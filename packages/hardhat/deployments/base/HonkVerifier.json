{
  "address": "0x02ac90ff7a4Cd9cE928e87eCe611F9F2bE7D938C",
  "abi": [
    {
      "inputs": [],
      "name": "ProofLengthWrong",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PublicInputsLengthWrong",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ShpleminiFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SumcheckFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "proof",
          "type": "bytes"
        },
        {
          "internalType": "bytes32[]",
          "name": "publicInputs",
          "type": "bytes32[]"
        }
      ],
      "name": "verify",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x293bec7d9ee9ed0d3cd55b1129c9d11e0417abefbbde8c62042a835a13550f06",
  "receipt": {
    "to": null,
    "from": "0x059E31Ea8A88b62FE1603CCE134eF7c1cC557395",
    "contractAddress": "0x02ac90ff7a4Cd9cE928e87eCe611F9F2bE7D938C",
    "transactionIndex": 12,
    "gasUsed": "7526791",
    "logsBloom": "0x
    "blockHash": "0xa74325f65a37e0a86ab7db26c88961a9aae2741f3e6c84bca70d5f9dfd2fefb7",
    "transactionHash": "0x293bec7d9ee9ed0d3cd55b1129c9d11e0417abefbbde8c62042a835a13550f06",
    "logs": [],
    "blockNumber": 34577270,
    "cumulativeGasUsed": "7572947",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "00aa2acd532fd6eaa78049d6943bcf24",
  "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ProofLengthWrong\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PublicInputsLengthWrong\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ShpleminiFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SumcheckFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"publicInputs\",\"type\":\"bytes32[]\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Verifier.sol\":\"HonkVerifier\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Verifier.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n// Copyright 2022 Aztec\\npragma solidity >=0.8.21;\\n\\nuint256 constant N = 65536;\\nuint256 constant LOG_N = 16;\\nuint256 constant NUMBER_OF_PUBLIC_INPUTS = 4;\\n\\nlibrary HonkVerificationKey {\\n    function loadVerificationKey() internal pure returns (Honk.VerificationKey memory) {\\n        Honk.VerificationKey memory vk = Honk.VerificationKey({\\n            circuitSize: uint256(65536),\\n            logCircuitSize: uint256(16),\\n            publicInputsSize: uint256(4),\\n            ql: Honk.G1Point({\\n                x: uint256(0x289bc01445fa4667a47e7c31bd32f98a3cde89f397210db72ecfb8ba8debc721),\\n                y: uint256(0x2a2b5bb3fbf5b5db7fb67bbfaea5f3b2b65c2641960d22942e5f34edbf132c6f)\\n            }),\\n            qr: Honk.G1Point({\\n                x: uint256(0x0667987db93a70ac462f2032574d4faef715558177759b0f030d2575110e38a2),\\n                y: uint256(0x0e6d558cff6092eb202d7220b0b5acdd77c5e8c5fbe5ca93529da1ba4ab88a63)\\n            }),\\n            qo: Honk.G1Point({\\n                x: uint256(0x1a4783374b8e1286da984e250f7117c703d7d759eeec2290cf75ff3303da323c),\\n                y: uint256(0x14ed00618cb70f64a78b5075367897da4522241796b89d03f1a7e517d5a01473)\\n            }),\\n            q4: Honk.G1Point({\\n                x: uint256(0x247a5f4dcd5da54fc4cc1fbf2fef714135bd72cc772be0d1138861825be7b138),\\n                y: uint256(0x1281bb3780dc178ba98ac9445afa409b125727a8fb9b95363050b088968f6800)\\n            }),\\n            qm: Honk.G1Point({\\n                x: uint256(0x0e7c8f71103873a611efb9c443b09efd3859513d21de02d80ab196eb12f0d4c6),\\n                y: uint256(0x29e3e4a1b6736e10131476bb407004e5ecf26b179432991882820f6f79285725)\\n            }),\\n            qc: Honk.G1Point({\\n                x: uint256(0x10b22b6cc367dbd4ac7fa7f84ebfe41b99d5c7e21d7a0810344fa9c93144f0a3),\\n                y: uint256(0x2765e2786d9916dbf73ce7d6a23715bf7cfa476500e01cd339c8ca98078218ae)\\n            }),\\n            qArith: Honk.G1Point({\\n                x: uint256(0x1c869231034e86642f5e2ed94d205f3a86dd6cec7133f8ff8ab1089e8439355b),\\n                y: uint256(0x0ea198adb5f6ddb95ce8d85f4df30e36422d530430305fa3e2d6f06d9c2aab7a)\\n            }),\\n            qDeltaRange: Honk.G1Point({\\n                x: uint256(0x0b38b1e2772df277dfa0350e9bbfbebca51881301dce17e696cfad18e51dbc65),\\n                y: uint256(0x0a90218270c2fdc5df0e46cdfc2df195ee2a38a03e8f0f99311d080abe5f4e49)\\n            }),\\n            qElliptic: Honk.G1Point({\\n                x: uint256(0x0942a8c0fa84846052c670b62e1da756c2a5e0fd44a5e46a961a6bd52179045a),\\n                y: uint256(0x2b944cb0ce32ffb81415a764d62167c40d63e2622fd7ce1df0e8f9acbe803d03)\\n            }),\\n            qAux: Honk.G1Point({\\n                x: uint256(0x2323f93d03add03fb6247f3a439f1ea268416a510d493e834c6b52d562b63033),\\n                y: uint256(0x19e7c430853d913c5d09312bd1ea4bf190857ca7d437ce58b6bd355ba07e88c1)\\n            }),\\n            qLookup: Honk.G1Point({\\n                x: uint256(0x304b1f3f6dbf38013e2451e1d3441b59536d30f6f10b2e3d2536666ce5283221),\\n                y: uint256(0x276cd8fc9a873e4e071bcba6aff6d9ee4b9bacd691a89401857d9015136a7ef8)\\n            }),\\n            qPoseidon2External: Honk.G1Point({\\n                x: uint256(0x153489639e766c30bca863f2ea89201657ce3323b9d0157c66b23b38e7b08287),\\n                y: uint256(0x2e0867c16a2f11b5dfd62f88bc08f7f33558940b8e1394632be20f823911d8d2)\\n            }),\\n            qPoseidon2Internal: Honk.G1Point({\\n                x: uint256(0x0fdcb5db747b6520763b37266d0c0cbe8945ae0117cc24a5a5c7a1dbabf874ca),\\n                y: uint256(0x022fae24762750f69a02dde8e1391229245815ea8af2e6b23f134c1dfea5108e)\\n            }),\\n            s1: Honk.G1Point({\\n                x: uint256(0x18d3e11683b0c1c921e8fa9d4bd3b629c3f93b13b72f2afedc90089f8af5fe80),\\n                y: uint256(0x19a6ae399fe5434931bd8c593e3a672e9a25147e255477d117d393639e43d350)\\n            }),\\n            s2: Honk.G1Point({\\n                x: uint256(0x0b39afaf77d3ca9c568f137b87631c1cffb1c7137cab43147a383c96ba7adc1b),\\n                y: uint256(0x05a4fac9b485fc43f81d4f4fbafd2e42b171104133c10eadcea99b509d9fa649)\\n            }),\\n            s3: Honk.G1Point({\\n                x: uint256(0x22220e411f43fbc5ecf12a8854aaf9d1c0e9683df425cdc7449a437485c3c23f),\\n                y: uint256(0x0d69edec69db97c7302887f3eae675a9692e3a1a98766f1aaed3759729678ce0)\\n            }),\\n            s4: Honk.G1Point({\\n                x: uint256(0x0bb72d9d3be7f8e4255500162cd00c4d3b48dae83e0b3ac1b1fbb346c651ce3d),\\n                y: uint256(0x024559e9989e23c871963bc1070c7c848aa6f9f3f3f9742ab595363e8f2e66d0)\\n            }),\\n            t1: Honk.G1Point({\\n                x: uint256(0x2cdb329f4ac54a9b2a6bb49f35b27881fa6a6bb06a51e41a3addbc63b92a09f2),\\n                y: uint256(0x09de6f6dce6674dfe0bb9a2d33543b23fa70fdaae3e508356ea287353ff56377)\\n            }),\\n            t2: Honk.G1Point({\\n                x: uint256(0x011733a47342be1b62b23b74d39fb6a27677b44284035c618a4cfa6c35918367),\\n                y: uint256(0x1b6124ff294c0bbe277c398d606ca94bf37bad466915d4b7b1fcfd2ff798705d)\\n            }),\\n            t3: Honk.G1Point({\\n                x: uint256(0x233834e0140e5ef7e22c8e9c71b60d1f9ad15ec60b1160db943c043c64e5635b),\\n                y: uint256(0x2a1e72915741ffdc0d9537378ca015e8943fd1ce6bb8eeb999eb04d9c51b1f4e)\\n            }),\\n            t4: Honk.G1Point({\\n                x: uint256(0x2ae1cb509ce1e6f5a706388238a045046c7d1b3a1c534d8d1cd1165deb1b3a33),\\n                y: uint256(0x1f0a2bdf6edefdfa216746a70719395d6c1f362f7bacfdb326d34457994ca6c1)\\n            }),\\n            id1: Honk.G1Point({\\n                x: uint256(0x04d13b1c0e341a923e30ea4da2d1c3d34b1416aa293f122f07aa6fe7301e05f1),\\n                y: uint256(0x0495e05d3a988ce9ac980bf9fe14db43ff3cb3395eac9376e5e544acdd8bca10)\\n            }),\\n            id2: Honk.G1Point({\\n                x: uint256(0x2d0f4c891a768d790e4c5b894a1477eba0f2a16d791d921ff1515b565e156d2e),\\n                y: uint256(0x19fb56af78c7473e782f00e60ab85b0c4a5e7ee4abe7f356c38590aa64560e2c)\\n            }),\\n            id3: Honk.G1Point({\\n                x: uint256(0x0693c992d7ce560ad9d614d204d98a012e1b139620c121d921b9615a494bc86a),\\n                y: uint256(0x045a545d832d4f109a0ddfe3cb7cb6d5d3488dd448aa7521071ef860397c0912)\\n            }),\\n            id4: Honk.G1Point({\\n                x: uint256(0x0656cecfd8cd5b3b88b4af342001bebe2d9f6d4a3b459e1eab3e55b874bb79e4),\\n                y: uint256(0x1baf584ecc371569c53c9b05a6ab7141860a01c96bb5a2cc2c442d855d849f81)\\n            }),\\n            lagrangeFirst: Honk.G1Point({\\n                x: uint256(0x0000000000000000000000000000000000000000000000000000000000000001),\\n                y: uint256(0x0000000000000000000000000000000000000000000000000000000000000002)\\n            }),\\n            lagrangeLast: Honk.G1Point({\\n                x: uint256(0x0400db363c23b02efe7cda4efaf725385fee64685a57c86ca44efed025dfbbaa),\\n                y: uint256(0x24994cd738a7aa135cc20a5e6f9488098d36743559400b42681b959b6a1145bc)\\n            })\\n        });\\n        return vk;\\n    }\\n}\\n\\npragma solidity ^0.8.27;\\n\\ntype Fr is uint256;\\n\\nusing {add as +} for Fr global;\\nusing {sub as -} for Fr global;\\nusing {mul as *} for Fr global;\\nusing {exp as ^} for Fr global;\\nusing {notEqual as !=} for Fr global;\\nusing {equal as ==} for Fr global;\\n\\nuint256 constant MODULUS = 21888242871839275222246405745257275088548364400416034343698204186575808495617; // Prime field order\\n\\nFr constant MINUS_ONE = Fr.wrap(MODULUS - 1);\\n\\n// Instantiation\\nlibrary FrLib {\\n    function from(uint256 value) internal pure returns (Fr) {\\n        return Fr.wrap(value % MODULUS);\\n    }\\n\\n    function fromBytes32(bytes32 value) internal pure returns (Fr) {\\n        return Fr.wrap(uint256(value) % MODULUS);\\n    }\\n\\n    function toBytes32(Fr value) internal pure returns (bytes32) {\\n        return bytes32(Fr.unwrap(value));\\n    }\\n\\n    function invert(Fr value) internal view returns (Fr) {\\n        uint256 v = Fr.unwrap(value);\\n        uint256 result;\\n\\n        // Call the modexp precompile to invert in the field\\n        assembly {\\n            let free := mload(0x40)\\n            mstore(free, 0x20)\\n            mstore(add(free, 0x20), 0x20)\\n            mstore(add(free, 0x40), 0x20)\\n            mstore(add(free, 0x60), v)\\n            mstore(add(free, 0x80), sub(MODULUS, 2))\\n            mstore(add(free, 0xa0), MODULUS)\\n            let success := staticcall(gas(), 0x05, free, 0xc0, 0x00, 0x20)\\n            if iszero(success) { revert(0, 0) }\\n            result := mload(0x00)\\n        }\\n\\n        return Fr.wrap(result);\\n    }\\n\\n    function pow(Fr base, uint256 v) internal view returns (Fr) {\\n        uint256 b = Fr.unwrap(base);\\n        uint256 result;\\n\\n        // Call the modexp precompile to invert in the field\\n        assembly {\\n            let free := mload(0x40)\\n            mstore(free, 0x20)\\n            mstore(add(free, 0x20), 0x20)\\n            mstore(add(free, 0x40), 0x20)\\n            mstore(add(free, 0x60), b)\\n            mstore(add(free, 0x80), v)\\n            mstore(add(free, 0xa0), MODULUS)\\n            let success := staticcall(gas(), 0x05, free, 0xc0, 0x00, 0x20)\\n            if iszero(success) { revert(0, 0) }\\n            result := mload(0x00)\\n        }\\n\\n        return Fr.wrap(result);\\n    }\\n\\n    function div(Fr numerator, Fr denominator) internal view returns (Fr) {\\n        return numerator * invert(denominator);\\n    }\\n\\n    function sqr(Fr value) internal pure returns (Fr) {\\n        return value * value;\\n    }\\n\\n    function unwrap(Fr value) internal pure returns (uint256) {\\n        return Fr.unwrap(value);\\n    }\\n\\n    function neg(Fr value) internal pure returns (Fr) {\\n        return Fr.wrap(MODULUS - Fr.unwrap(value));\\n    }\\n}\\n\\n// Free functions\\nfunction add(Fr a, Fr b) pure returns (Fr) {\\n    return Fr.wrap(addmod(Fr.unwrap(a), Fr.unwrap(b), MODULUS));\\n}\\n\\nfunction mul(Fr a, Fr b) pure returns (Fr) {\\n    return Fr.wrap(mulmod(Fr.unwrap(a), Fr.unwrap(b), MODULUS));\\n}\\n\\nfunction sub(Fr a, Fr b) pure returns (Fr) {\\n    return Fr.wrap(addmod(Fr.unwrap(a), MODULUS - Fr.unwrap(b), MODULUS));\\n}\\n\\nfunction exp(Fr base, Fr exponent) pure returns (Fr) {\\n    if (Fr.unwrap(exponent) == 0) return Fr.wrap(1);\\n\\n    for (uint256 i = 1; i < Fr.unwrap(exponent); i += i) {\\n        base = base * base;\\n    }\\n    return base;\\n}\\n\\nfunction notEqual(Fr a, Fr b) pure returns (bool) {\\n    return Fr.unwrap(a) != Fr.unwrap(b);\\n}\\n\\nfunction equal(Fr a, Fr b) pure returns (bool) {\\n    return Fr.unwrap(a) == Fr.unwrap(b);\\n}\\n\\nuint256 constant CONST_PROOF_SIZE_LOG_N = 28;\\n\\nuint256 constant NUMBER_OF_SUBRELATIONS = 26;\\nuint256 constant BATCHED_RELATION_PARTIAL_LENGTH = 8;\\nuint256 constant NUMBER_OF_ENTITIES = 40;\\nuint256 constant NUMBER_UNSHIFTED = 35;\\nuint256 constant NUMBER_TO_BE_SHIFTED = 5;\\n\\n// Alphas are used as relation separators so there should be NUMBER_OF_SUBRELATIONS - 1\\nuint256 constant NUMBER_OF_ALPHAS = 25;\\n\\n// Prime field order\\nuint256 constant Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583; // EC group order. F_q\\nuint256 constant P = 21888242871839275222246405745257275088548364400416034343698204186575808495617; // Prime field order, F_r\\n\\n// ENUM FOR WIRES\\nenum WIRE {\\n    Q_M,\\n    Q_C,\\n    Q_L,\\n    Q_R,\\n    Q_O,\\n    Q_4,\\n    Q_LOOKUP,\\n    Q_ARITH,\\n    Q_RANGE,\\n    Q_ELLIPTIC,\\n    Q_AUX,\\n    Q_POSEIDON2_EXTERNAL,\\n    Q_POSEIDON2_INTERNAL,\\n    SIGMA_1,\\n    SIGMA_2,\\n    SIGMA_3,\\n    SIGMA_4,\\n    ID_1,\\n    ID_2,\\n    ID_3,\\n    ID_4,\\n    TABLE_1,\\n    TABLE_2,\\n    TABLE_3,\\n    TABLE_4,\\n    LAGRANGE_FIRST,\\n    LAGRANGE_LAST,\\n    W_L,\\n    W_R,\\n    W_O,\\n    W_4,\\n    Z_PERM,\\n    LOOKUP_INVERSES,\\n    LOOKUP_READ_COUNTS,\\n    LOOKUP_READ_TAGS,\\n    W_L_SHIFT,\\n    W_R_SHIFT,\\n    W_O_SHIFT,\\n    W_4_SHIFT,\\n    Z_PERM_SHIFT\\n}\\n\\nlibrary Honk {\\n    struct G1Point {\\n        uint256 x;\\n        uint256 y;\\n    }\\n\\n    struct G1ProofPoint {\\n        uint256 x_0;\\n        uint256 x_1;\\n        uint256 y_0;\\n        uint256 y_1;\\n    }\\n\\n    struct VerificationKey {\\n        // Misc Params\\n        uint256 circuitSize;\\n        uint256 logCircuitSize;\\n        uint256 publicInputsSize;\\n        // Selectors\\n        G1Point qm;\\n        G1Point qc;\\n        G1Point ql;\\n        G1Point qr;\\n        G1Point qo;\\n        G1Point q4;\\n        G1Point qLookup; // Lookup\\n        G1Point qArith; // Arithmetic widget\\n        G1Point qDeltaRange; // Delta Range sort\\n        G1Point qAux; // Auxillary\\n        G1Point qElliptic; // Auxillary\\n        G1Point qPoseidon2External;\\n        G1Point qPoseidon2Internal;\\n        // Copy cnstraints\\n        G1Point s1;\\n        G1Point s2;\\n        G1Point s3;\\n        G1Point s4;\\n        // Copy identity\\n        G1Point id1;\\n        G1Point id2;\\n        G1Point id3;\\n        G1Point id4;\\n        // Precomputed lookup table\\n        G1Point t1;\\n        G1Point t2;\\n        G1Point t3;\\n        G1Point t4;\\n        // Fixed first and last\\n        G1Point lagrangeFirst;\\n        G1Point lagrangeLast;\\n    }\\n\\n    struct RelationParameters {\\n        // challenges\\n        Fr eta;\\n        Fr etaTwo;\\n        Fr etaThree;\\n        Fr beta;\\n        Fr gamma;\\n        // derived\\n        Fr publicInputsDelta;\\n    }\\n\\n    struct Proof {\\n        // Free wires\\n        Honk.G1ProofPoint w1;\\n        Honk.G1ProofPoint w2;\\n        Honk.G1ProofPoint w3;\\n        Honk.G1ProofPoint w4;\\n        // Lookup helpers - Permutations\\n        Honk.G1ProofPoint zPerm;\\n        // Lookup helpers - logup\\n        Honk.G1ProofPoint lookupReadCounts;\\n        Honk.G1ProofPoint lookupReadTags;\\n        Honk.G1ProofPoint lookupInverses;\\n        // Sumcheck\\n        Fr[BATCHED_RELATION_PARTIAL_LENGTH][CONST_PROOF_SIZE_LOG_N] sumcheckUnivariates;\\n        Fr[NUMBER_OF_ENTITIES] sumcheckEvaluations;\\n        // Shplemini\\n        Honk.G1ProofPoint[CONST_PROOF_SIZE_LOG_N - 1] geminiFoldComms;\\n        Fr[CONST_PROOF_SIZE_LOG_N] geminiAEvaluations;\\n        Honk.G1ProofPoint shplonkQ;\\n        Honk.G1ProofPoint kzgQuotient;\\n    }\\n}\\n\\n// Transcript library to generate fiat shamir challenges\\nstruct Transcript {\\n    // Oink\\n    Honk.RelationParameters relationParameters;\\n    Fr[NUMBER_OF_ALPHAS] alphas;\\n    Fr[CONST_PROOF_SIZE_LOG_N] gateChallenges;\\n    // Sumcheck\\n    Fr[CONST_PROOF_SIZE_LOG_N] sumCheckUChallenges;\\n    // Gemini\\n    Fr rho;\\n    Fr geminiR;\\n    // Shplonk\\n    Fr shplonkNu;\\n    Fr shplonkZ;\\n}\\n\\nlibrary TranscriptLib {\\n    function generateTranscript(\\n        Honk.Proof memory proof,\\n        bytes32[] calldata publicInputs,\\n        uint256 circuitSize,\\n        uint256 publicInputsSize,\\n        uint256 pubInputsOffset\\n    ) internal pure returns (Transcript memory t) {\\n        Fr previousChallenge;\\n        (t.relationParameters, previousChallenge) = generateRelationParametersChallenges(\\n            proof, publicInputs, circuitSize, publicInputsSize, pubInputsOffset, previousChallenge\\n        );\\n\\n        (t.alphas, previousChallenge) = generateAlphaChallenges(previousChallenge, proof);\\n\\n        (t.gateChallenges, previousChallenge) = generateGateChallenges(previousChallenge);\\n\\n        (t.sumCheckUChallenges, previousChallenge) = generateSumcheckChallenges(proof, previousChallenge);\\n\\n        (t.rho, previousChallenge) = generateRhoChallenge(proof, previousChallenge);\\n\\n        (t.geminiR, previousChallenge) = generateGeminiRChallenge(proof, previousChallenge);\\n\\n        (t.shplonkNu, previousChallenge) = generateShplonkNuChallenge(proof, previousChallenge);\\n\\n        (t.shplonkZ, previousChallenge) = generateShplonkZChallenge(proof, previousChallenge);\\n\\n        return t;\\n    }\\n\\n    function splitChallenge(Fr challenge) internal pure returns (Fr first, Fr second) {\\n        uint256 challengeU256 = uint256(Fr.unwrap(challenge));\\n        uint256 lo = challengeU256 & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n        uint256 hi = challengeU256 >> 128;\\n        first = FrLib.fromBytes32(bytes32(lo));\\n        second = FrLib.fromBytes32(bytes32(hi));\\n    }\\n\\n    function generateRelationParametersChallenges(\\n        Honk.Proof memory proof,\\n        bytes32[] calldata publicInputs,\\n        uint256 circuitSize,\\n        uint256 publicInputsSize,\\n        uint256 pubInputsOffset,\\n        Fr previousChallenge\\n    ) internal pure returns (Honk.RelationParameters memory rp, Fr nextPreviousChallenge) {\\n        (rp.eta, rp.etaTwo, rp.etaThree, previousChallenge) =\\n            generateEtaChallenge(proof, publicInputs, circuitSize, publicInputsSize, pubInputsOffset);\\n\\n        (rp.beta, rp.gamma, nextPreviousChallenge) = generateBetaAndGammaChallenges(previousChallenge, proof);\\n    }\\n\\n    function generateEtaChallenge(\\n        Honk.Proof memory proof,\\n        bytes32[] calldata publicInputs,\\n        uint256 circuitSize,\\n        uint256 publicInputsSize,\\n        uint256 pubInputsOffset\\n    ) internal pure returns (Fr eta, Fr etaTwo, Fr etaThree, Fr previousChallenge) {\\n        bytes32[] memory round0 = new bytes32[](3 + publicInputsSize + 12);\\n        round0[0] = bytes32(circuitSize);\\n        round0[1] = bytes32(publicInputsSize);\\n        round0[2] = bytes32(pubInputsOffset);\\n        for (uint256 i = 0; i < publicInputsSize; i++) {\\n            round0[3 + i] = bytes32(publicInputs[i]);\\n        }\\n\\n        // Create the first challenge\\n        // Note: w4 is added to the challenge later on\\n        round0[3 + publicInputsSize] = bytes32(proof.w1.x_0);\\n        round0[3 + publicInputsSize + 1] = bytes32(proof.w1.x_1);\\n        round0[3 + publicInputsSize + 2] = bytes32(proof.w1.y_0);\\n        round0[3 + publicInputsSize + 3] = bytes32(proof.w1.y_1);\\n        round0[3 + publicInputsSize + 4] = bytes32(proof.w2.x_0);\\n        round0[3 + publicInputsSize + 5] = bytes32(proof.w2.x_1);\\n        round0[3 + publicInputsSize + 6] = bytes32(proof.w2.y_0);\\n        round0[3 + publicInputsSize + 7] = bytes32(proof.w2.y_1);\\n        round0[3 + publicInputsSize + 8] = bytes32(proof.w3.x_0);\\n        round0[3 + publicInputsSize + 9] = bytes32(proof.w3.x_1);\\n        round0[3 + publicInputsSize + 10] = bytes32(proof.w3.y_0);\\n        round0[3 + publicInputsSize + 11] = bytes32(proof.w3.y_1);\\n\\n        previousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(round0)));\\n        (eta, etaTwo) = splitChallenge(previousChallenge);\\n        previousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(Fr.unwrap(previousChallenge))));\\n        Fr unused;\\n        (etaThree, unused) = splitChallenge(previousChallenge);\\n    }\\n\\n    function generateBetaAndGammaChallenges(Fr previousChallenge, Honk.Proof memory proof)\\n        internal\\n        pure\\n        returns (Fr beta, Fr gamma, Fr nextPreviousChallenge)\\n    {\\n        bytes32[13] memory round1;\\n        round1[0] = FrLib.toBytes32(previousChallenge);\\n        round1[1] = bytes32(proof.lookupReadCounts.x_0);\\n        round1[2] = bytes32(proof.lookupReadCounts.x_1);\\n        round1[3] = bytes32(proof.lookupReadCounts.y_0);\\n        round1[4] = bytes32(proof.lookupReadCounts.y_1);\\n        round1[5] = bytes32(proof.lookupReadTags.x_0);\\n        round1[6] = bytes32(proof.lookupReadTags.x_1);\\n        round1[7] = bytes32(proof.lookupReadTags.y_0);\\n        round1[8] = bytes32(proof.lookupReadTags.y_1);\\n        round1[9] = bytes32(proof.w4.x_0);\\n        round1[10] = bytes32(proof.w4.x_1);\\n        round1[11] = bytes32(proof.w4.y_0);\\n        round1[12] = bytes32(proof.w4.y_1);\\n\\n        nextPreviousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(round1)));\\n        (beta, gamma) = splitChallenge(nextPreviousChallenge);\\n    }\\n\\n    // Alpha challenges non-linearise the gate contributions\\n    function generateAlphaChallenges(Fr previousChallenge, Honk.Proof memory proof)\\n        internal\\n        pure\\n        returns (Fr[NUMBER_OF_ALPHAS] memory alphas, Fr nextPreviousChallenge)\\n    {\\n        // Generate the original sumcheck alpha 0 by hashing zPerm and zLookup\\n        uint256[9] memory alpha0;\\n        alpha0[0] = Fr.unwrap(previousChallenge);\\n        alpha0[1] = proof.lookupInverses.x_0;\\n        alpha0[2] = proof.lookupInverses.x_1;\\n        alpha0[3] = proof.lookupInverses.y_0;\\n        alpha0[4] = proof.lookupInverses.y_1;\\n        alpha0[5] = proof.zPerm.x_0;\\n        alpha0[6] = proof.zPerm.x_1;\\n        alpha0[7] = proof.zPerm.y_0;\\n        alpha0[8] = proof.zPerm.y_1;\\n\\n        nextPreviousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(alpha0)));\\n        (alphas[0], alphas[1]) = splitChallenge(nextPreviousChallenge);\\n\\n        for (uint256 i = 1; i < NUMBER_OF_ALPHAS / 2; i++) {\\n            nextPreviousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(Fr.unwrap(nextPreviousChallenge))));\\n            (alphas[2 * i], alphas[2 * i + 1]) = splitChallenge(nextPreviousChallenge);\\n        }\\n        if (((NUMBER_OF_ALPHAS & 1) == 1) && (NUMBER_OF_ALPHAS > 2)) {\\n            nextPreviousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(Fr.unwrap(nextPreviousChallenge))));\\n            Fr unused;\\n            (alphas[NUMBER_OF_ALPHAS - 1], unused) = splitChallenge(nextPreviousChallenge);\\n        }\\n    }\\n\\n    function generateGateChallenges(Fr previousChallenge)\\n        internal\\n        pure\\n        returns (Fr[CONST_PROOF_SIZE_LOG_N] memory gateChallenges, Fr nextPreviousChallenge)\\n    {\\n        for (uint256 i = 0; i < CONST_PROOF_SIZE_LOG_N; i++) {\\n            previousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(Fr.unwrap(previousChallenge))));\\n            Fr unused;\\n            (gateChallenges[i], unused) = splitChallenge(previousChallenge);\\n        }\\n        nextPreviousChallenge = previousChallenge;\\n    }\\n\\n    function generateSumcheckChallenges(Honk.Proof memory proof, Fr prevChallenge)\\n        internal\\n        pure\\n        returns (Fr[CONST_PROOF_SIZE_LOG_N] memory sumcheckChallenges, Fr nextPreviousChallenge)\\n    {\\n        for (uint256 i = 0; i < CONST_PROOF_SIZE_LOG_N; i++) {\\n            Fr[BATCHED_RELATION_PARTIAL_LENGTH + 1] memory univariateChal;\\n            univariateChal[0] = prevChallenge;\\n\\n            for (uint256 j = 0; j < BATCHED_RELATION_PARTIAL_LENGTH; j++) {\\n                univariateChal[j + 1] = proof.sumcheckUnivariates[i][j];\\n            }\\n            prevChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(univariateChal)));\\n            Fr unused;\\n            (sumcheckChallenges[i], unused) = splitChallenge(prevChallenge);\\n        }\\n        nextPreviousChallenge = prevChallenge;\\n    }\\n\\n    function generateRhoChallenge(Honk.Proof memory proof, Fr prevChallenge)\\n        internal\\n        pure\\n        returns (Fr rho, Fr nextPreviousChallenge)\\n    {\\n        Fr[NUMBER_OF_ENTITIES + 1] memory rhoChallengeElements;\\n        rhoChallengeElements[0] = prevChallenge;\\n\\n        for (uint256 i = 0; i < NUMBER_OF_ENTITIES; i++) {\\n            rhoChallengeElements[i + 1] = proof.sumcheckEvaluations[i];\\n        }\\n\\n        nextPreviousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(rhoChallengeElements)));\\n        Fr unused;\\n        (rho, unused) = splitChallenge(nextPreviousChallenge);\\n    }\\n\\n    function generateGeminiRChallenge(Honk.Proof memory proof, Fr prevChallenge)\\n        internal\\n        pure\\n        returns (Fr geminiR, Fr nextPreviousChallenge)\\n    {\\n        uint256[(CONST_PROOF_SIZE_LOG_N - 1) * 4 + 1] memory gR;\\n        gR[0] = Fr.unwrap(prevChallenge);\\n\\n        for (uint256 i = 0; i < CONST_PROOF_SIZE_LOG_N - 1; i++) {\\n            gR[1 + i * 4] = proof.geminiFoldComms[i].x_0;\\n            gR[2 + i * 4] = proof.geminiFoldComms[i].x_1;\\n            gR[3 + i * 4] = proof.geminiFoldComms[i].y_0;\\n            gR[4 + i * 4] = proof.geminiFoldComms[i].y_1;\\n        }\\n\\n        nextPreviousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(gR)));\\n        Fr unused;\\n        (geminiR, unused) = splitChallenge(nextPreviousChallenge);\\n    }\\n\\n    function generateShplonkNuChallenge(Honk.Proof memory proof, Fr prevChallenge)\\n        internal\\n        pure\\n        returns (Fr shplonkNu, Fr nextPreviousChallenge)\\n    {\\n        uint256[(CONST_PROOF_SIZE_LOG_N) + 1] memory shplonkNuChallengeElements;\\n        shplonkNuChallengeElements[0] = Fr.unwrap(prevChallenge);\\n\\n        for (uint256 i = 0; i < CONST_PROOF_SIZE_LOG_N; i++) {\\n            shplonkNuChallengeElements[i + 1] = Fr.unwrap(proof.geminiAEvaluations[i]);\\n        }\\n\\n        nextPreviousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(shplonkNuChallengeElements)));\\n        Fr unused;\\n        (shplonkNu, unused) = splitChallenge(nextPreviousChallenge);\\n    }\\n\\n    function generateShplonkZChallenge(Honk.Proof memory proof, Fr prevChallenge)\\n        internal\\n        pure\\n        returns (Fr shplonkZ, Fr nextPreviousChallenge)\\n    {\\n        uint256[5] memory shplonkZChallengeElements;\\n        shplonkZChallengeElements[0] = Fr.unwrap(prevChallenge);\\n\\n        shplonkZChallengeElements[1] = proof.shplonkQ.x_0;\\n        shplonkZChallengeElements[2] = proof.shplonkQ.x_1;\\n        shplonkZChallengeElements[3] = proof.shplonkQ.y_0;\\n        shplonkZChallengeElements[4] = proof.shplonkQ.y_1;\\n\\n        nextPreviousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(shplonkZChallengeElements)));\\n        Fr unused;\\n        (shplonkZ, unused) = splitChallenge(nextPreviousChallenge);\\n    }\\n\\n    function loadProof(bytes calldata proof) internal pure returns (Honk.Proof memory p) {\\n        // Commitments\\n        p.w1 = bytesToG1ProofPoint(proof[0x0:0x80]);\\n\\n        p.w2 = bytesToG1ProofPoint(proof[0x80:0x100]);\\n        p.w3 = bytesToG1ProofPoint(proof[0x100:0x180]);\\n\\n        // Lookup / Permutation Helper Commitments\\n        p.lookupReadCounts = bytesToG1ProofPoint(proof[0x180:0x200]);\\n        p.lookupReadTags = bytesToG1ProofPoint(proof[0x200:0x280]);\\n        p.w4 = bytesToG1ProofPoint(proof[0x280:0x300]);\\n        p.lookupInverses = bytesToG1ProofPoint(proof[0x300:0x380]);\\n        p.zPerm = bytesToG1ProofPoint(proof[0x380:0x400]);\\n        uint256 boundary = 0x400;\\n\\n        // Sumcheck univariates\\n        for (uint256 i = 0; i < CONST_PROOF_SIZE_LOG_N; i++) {\\n            for (uint256 j = 0; j < BATCHED_RELATION_PARTIAL_LENGTH; j++) {\\n                p.sumcheckUnivariates[i][j] = bytesToFr(proof[boundary:boundary + 0x20]);\\n                boundary += 0x20;\\n            }\\n        }\\n        // Sumcheck evaluations\\n        for (uint256 i = 0; i < NUMBER_OF_ENTITIES; i++) {\\n            p.sumcheckEvaluations[i] = bytesToFr(proof[boundary:boundary + 0x20]);\\n            boundary += 0x20;\\n        }\\n\\n        // Gemini\\n        // Read gemini fold univariates\\n        for (uint256 i = 0; i < CONST_PROOF_SIZE_LOG_N - 1; i++) {\\n            p.geminiFoldComms[i] = bytesToG1ProofPoint(proof[boundary:boundary + 0x80]);\\n            boundary += 0x80;\\n        }\\n\\n        // Read gemini a evaluations\\n        for (uint256 i = 0; i < CONST_PROOF_SIZE_LOG_N; i++) {\\n            p.geminiAEvaluations[i] = bytesToFr(proof[boundary:boundary + 0x20]);\\n            boundary += 0x20;\\n        }\\n\\n        // Shplonk\\n        p.shplonkQ = bytesToG1ProofPoint(proof[boundary:boundary + 0x80]);\\n        boundary = boundary + 0x80;\\n        // KZG\\n        p.kzgQuotient = bytesToG1ProofPoint(proof[boundary:boundary + 0x80]);\\n    }\\n}\\n\\n// Fr utility\\n\\nfunction bytesToFr(bytes calldata proofSection) pure returns (Fr scalar) {\\n    require(proofSection.length == 0x20, \\\"invalid bytes scalar\\\");\\n    scalar = FrLib.fromBytes32(bytes32(proofSection));\\n}\\n\\n// EC Point utilities\\nfunction convertProofPoint(Honk.G1ProofPoint memory input) pure returns (Honk.G1Point memory) {\\n    return Honk.G1Point({x: input.x_0 | (input.x_1 << 136), y: input.y_0 | (input.y_1 << 136)});\\n}\\n\\nfunction bytesToG1ProofPoint(bytes calldata proofSection) pure returns (Honk.G1ProofPoint memory point) {\\n    require(proofSection.length == 0x80, \\\"invalid bytes point\\\");\\n    point = Honk.G1ProofPoint({\\n        x_0: uint256(bytes32(proofSection[0x00:0x20])),\\n        x_1: uint256(bytes32(proofSection[0x20:0x40])),\\n        y_0: uint256(bytes32(proofSection[0x40:0x60])),\\n        y_1: uint256(bytes32(proofSection[0x60:0x80]))\\n    });\\n}\\n\\nfunction negateInplace(Honk.G1Point memory point) pure returns (Honk.G1Point memory) {\\n    point.y = (Q - point.y) % Q;\\n    return point;\\n}\\n\\nfunction pairing(Honk.G1Point memory rhs, Honk.G1Point memory lhs) view returns (bool) {\\n    bytes memory input = abi.encodePacked(\\n        rhs.x,\\n        rhs.y,\\n        // Fixed G1 point\\n        uint256(0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2),\\n        uint256(0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed),\\n        uint256(0x090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b),\\n        uint256(0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa),\\n        lhs.x,\\n        lhs.y,\\n        // G1 point from VK\\n        uint256(0x260e01b251f6f1c7e7ff4e580791dee8ea51d87a358e038b4efe30fac09383c1),\\n        uint256(0x0118c4d5b837bcc2bc89b5b398b5974e9f5944073b32078b7e231fec938883b0),\\n        uint256(0x04fc6369f7110fe3d25156c1bb9a72859cf2a04641f99ba4ee413c80da6a5fe4),\\n        uint256(0x22febda3c0c0632a56475b4214e5615e11e6dd3f96e6cea2854a87d4dacc5e55)\\n    );\\n\\n    (bool success, bytes memory result) = address(0x08).staticcall(input);\\n    bool decodedResult = abi.decode(result, (bool));\\n    return success && decodedResult;\\n}\\n\\nlibrary RelationsLib {\\n    Fr internal constant GRUMPKIN_CURVE_B_PARAMETER_NEGATED = Fr.wrap(17); // -(-17)\\n\\n    function accumulateRelationEvaluations(\\n        Fr[NUMBER_OF_ENTITIES] memory purportedEvaluations,\\n        Honk.RelationParameters memory rp,\\n        Fr[NUMBER_OF_ALPHAS] memory alphas,\\n        Fr powPartialEval\\n    ) internal pure returns (Fr accumulator) {\\n        Fr[NUMBER_OF_SUBRELATIONS] memory evaluations;\\n\\n        // Accumulate all relations in Ultra Honk - each with varying number of subrelations\\n        accumulateArithmeticRelation(purportedEvaluations, evaluations, powPartialEval);\\n        accumulatePermutationRelation(purportedEvaluations, rp, evaluations, powPartialEval);\\n        accumulateLogDerivativeLookupRelation(purportedEvaluations, rp, evaluations, powPartialEval);\\n        accumulateDeltaRangeRelation(purportedEvaluations, evaluations, powPartialEval);\\n        accumulateEllipticRelation(purportedEvaluations, evaluations, powPartialEval);\\n        accumulateAuxillaryRelation(purportedEvaluations, rp, evaluations, powPartialEval);\\n        accumulatePoseidonExternalRelation(purportedEvaluations, evaluations, powPartialEval);\\n        accumulatePoseidonInternalRelation(purportedEvaluations, evaluations, powPartialEval);\\n        // batch the subrelations with the alpha challenges to obtain the full honk relation\\n        accumulator = scaleAndBatchSubrelations(evaluations, alphas);\\n    }\\n\\n    /**\\n     * Aesthetic helper function that is used to index by enum into proof.sumcheckEvaluations, it avoids\\n     * the relation checking code being cluttered with uint256 type casting, which is often a different colour in code\\n     * editors, and thus is noisy.\\n     */\\n    function wire(Fr[NUMBER_OF_ENTITIES] memory p, WIRE _wire) internal pure returns (Fr) {\\n        return p[uint256(_wire)];\\n    }\\n\\n    uint256 internal constant NEG_HALF_MODULO_P = 0x183227397098d014dc2822db40c0ac2e9419f4243cdcb848a1f0fac9f8000000;\\n    /**\\n     * Ultra Arithmetic Relation\\n     *\\n     */\\n\\n    function accumulateArithmeticRelation(\\n        Fr[NUMBER_OF_ENTITIES] memory p,\\n        Fr[NUMBER_OF_SUBRELATIONS] memory evals,\\n        Fr domainSep\\n    ) internal pure {\\n        // Relation 0\\n        Fr q_arith = wire(p, WIRE.Q_ARITH);\\n        {\\n            Fr neg_half = Fr.wrap(NEG_HALF_MODULO_P);\\n\\n            Fr accum = (q_arith - Fr.wrap(3)) * (wire(p, WIRE.Q_M) * wire(p, WIRE.W_R) * wire(p, WIRE.W_L)) * neg_half;\\n            accum = accum + (wire(p, WIRE.Q_L) * wire(p, WIRE.W_L)) + (wire(p, WIRE.Q_R) * wire(p, WIRE.W_R))\\n                + (wire(p, WIRE.Q_O) * wire(p, WIRE.W_O)) + (wire(p, WIRE.Q_4) * wire(p, WIRE.W_4)) + wire(p, WIRE.Q_C);\\n            accum = accum + (q_arith - Fr.wrap(1)) * wire(p, WIRE.W_4_SHIFT);\\n            accum = accum * q_arith;\\n            accum = accum * domainSep;\\n            evals[0] = accum;\\n        }\\n\\n        // Relation 1\\n        {\\n            Fr accum = wire(p, WIRE.W_L) + wire(p, WIRE.W_4) - wire(p, WIRE.W_L_SHIFT) + wire(p, WIRE.Q_M);\\n            accum = accum * (q_arith - Fr.wrap(2));\\n            accum = accum * (q_arith - Fr.wrap(1));\\n            accum = accum * q_arith;\\n            accum = accum * domainSep;\\n            evals[1] = accum;\\n        }\\n    }\\n\\n    function accumulatePermutationRelation(\\n        Fr[NUMBER_OF_ENTITIES] memory p,\\n        Honk.RelationParameters memory rp,\\n        Fr[NUMBER_OF_SUBRELATIONS] memory evals,\\n        Fr domainSep\\n    ) internal pure {\\n        Fr grand_product_numerator;\\n        Fr grand_product_denominator;\\n\\n        {\\n            Fr num = wire(p, WIRE.W_L) + wire(p, WIRE.ID_1) * rp.beta + rp.gamma;\\n            num = num * (wire(p, WIRE.W_R) + wire(p, WIRE.ID_2) * rp.beta + rp.gamma);\\n            num = num * (wire(p, WIRE.W_O) + wire(p, WIRE.ID_3) * rp.beta + rp.gamma);\\n            num = num * (wire(p, WIRE.W_4) + wire(p, WIRE.ID_4) * rp.beta + rp.gamma);\\n\\n            grand_product_numerator = num;\\n        }\\n        {\\n            Fr den = wire(p, WIRE.W_L) + wire(p, WIRE.SIGMA_1) * rp.beta + rp.gamma;\\n            den = den * (wire(p, WIRE.W_R) + wire(p, WIRE.SIGMA_2) * rp.beta + rp.gamma);\\n            den = den * (wire(p, WIRE.W_O) + wire(p, WIRE.SIGMA_3) * rp.beta + rp.gamma);\\n            den = den * (wire(p, WIRE.W_4) + wire(p, WIRE.SIGMA_4) * rp.beta + rp.gamma);\\n\\n            grand_product_denominator = den;\\n        }\\n\\n        // Contribution 2\\n        {\\n            Fr acc = (wire(p, WIRE.Z_PERM) + wire(p, WIRE.LAGRANGE_FIRST)) * grand_product_numerator;\\n\\n            acc = acc\\n                - (\\n                    (wire(p, WIRE.Z_PERM_SHIFT) + (wire(p, WIRE.LAGRANGE_LAST) * rp.publicInputsDelta))\\n                        * grand_product_denominator\\n                );\\n            acc = acc * domainSep;\\n            evals[2] = acc;\\n        }\\n\\n        // Contribution 3\\n        {\\n            Fr acc = (wire(p, WIRE.LAGRANGE_LAST) * wire(p, WIRE.Z_PERM_SHIFT)) * domainSep;\\n            evals[3] = acc;\\n        }\\n    }\\n\\n    function accumulateLogDerivativeLookupRelation(\\n        Fr[NUMBER_OF_ENTITIES] memory p,\\n        Honk.RelationParameters memory rp,\\n        Fr[NUMBER_OF_SUBRELATIONS] memory evals,\\n        Fr domainSep\\n    ) internal pure {\\n        Fr write_term;\\n        Fr read_term;\\n\\n        // Calculate the write term (the table accumulation)\\n        {\\n            write_term = wire(p, WIRE.TABLE_1) + rp.gamma + (wire(p, WIRE.TABLE_2) * rp.eta)\\n                + (wire(p, WIRE.TABLE_3) * rp.etaTwo) + (wire(p, WIRE.TABLE_4) * rp.etaThree);\\n        }\\n\\n        // Calculate the write term\\n        {\\n            Fr derived_entry_1 = wire(p, WIRE.W_L) + rp.gamma + (wire(p, WIRE.Q_R) * wire(p, WIRE.W_L_SHIFT));\\n            Fr derived_entry_2 = wire(p, WIRE.W_R) + wire(p, WIRE.Q_M) * wire(p, WIRE.W_R_SHIFT);\\n            Fr derived_entry_3 = wire(p, WIRE.W_O) + wire(p, WIRE.Q_C) * wire(p, WIRE.W_O_SHIFT);\\n\\n            read_term = derived_entry_1 + (derived_entry_2 * rp.eta) + (derived_entry_3 * rp.etaTwo)\\n                + (wire(p, WIRE.Q_O) * rp.etaThree);\\n        }\\n\\n        Fr read_inverse = wire(p, WIRE.LOOKUP_INVERSES) * write_term;\\n        Fr write_inverse = wire(p, WIRE.LOOKUP_INVERSES) * read_term;\\n\\n        Fr inverse_exists_xor = wire(p, WIRE.LOOKUP_READ_TAGS) + wire(p, WIRE.Q_LOOKUP)\\n            - (wire(p, WIRE.LOOKUP_READ_TAGS) * wire(p, WIRE.Q_LOOKUP));\\n\\n        // Inverse calculated correctly relation\\n        Fr accumulatorNone = read_term * write_term * wire(p, WIRE.LOOKUP_INVERSES) - inverse_exists_xor;\\n        accumulatorNone = accumulatorNone * domainSep;\\n\\n        // Inverse\\n        Fr accumulatorOne = wire(p, WIRE.Q_LOOKUP) * read_inverse - wire(p, WIRE.LOOKUP_READ_COUNTS) * write_inverse;\\n\\n        evals[4] = accumulatorNone;\\n        evals[5] = accumulatorOne;\\n    }\\n\\n    function accumulateDeltaRangeRelation(\\n        Fr[NUMBER_OF_ENTITIES] memory p,\\n        Fr[NUMBER_OF_SUBRELATIONS] memory evals,\\n        Fr domainSep\\n    ) internal pure {\\n        Fr minus_one = Fr.wrap(0) - Fr.wrap(1);\\n        Fr minus_two = Fr.wrap(0) - Fr.wrap(2);\\n        Fr minus_three = Fr.wrap(0) - Fr.wrap(3);\\n\\n        // Compute wire differences\\n        Fr delta_1 = wire(p, WIRE.W_R) - wire(p, WIRE.W_L);\\n        Fr delta_2 = wire(p, WIRE.W_O) - wire(p, WIRE.W_R);\\n        Fr delta_3 = wire(p, WIRE.W_4) - wire(p, WIRE.W_O);\\n        Fr delta_4 = wire(p, WIRE.W_L_SHIFT) - wire(p, WIRE.W_4);\\n\\n        // Contribution 6\\n        {\\n            Fr acc = delta_1;\\n            acc = acc * (delta_1 + minus_one);\\n            acc = acc * (delta_1 + minus_two);\\n            acc = acc * (delta_1 + minus_three);\\n            acc = acc * wire(p, WIRE.Q_RANGE);\\n            acc = acc * domainSep;\\n            evals[6] = acc;\\n        }\\n\\n        // Contribution 7\\n        {\\n            Fr acc = delta_2;\\n            acc = acc * (delta_2 + minus_one);\\n            acc = acc * (delta_2 + minus_two);\\n            acc = acc * (delta_2 + minus_three);\\n            acc = acc * wire(p, WIRE.Q_RANGE);\\n            acc = acc * domainSep;\\n            evals[7] = acc;\\n        }\\n\\n        // Contribution 8\\n        {\\n            Fr acc = delta_3;\\n            acc = acc * (delta_3 + minus_one);\\n            acc = acc * (delta_3 + minus_two);\\n            acc = acc * (delta_3 + minus_three);\\n            acc = acc * wire(p, WIRE.Q_RANGE);\\n            acc = acc * domainSep;\\n            evals[8] = acc;\\n        }\\n\\n        // Contribution 9\\n        {\\n            Fr acc = delta_4;\\n            acc = acc * (delta_4 + minus_one);\\n            acc = acc * (delta_4 + minus_two);\\n            acc = acc * (delta_4 + minus_three);\\n            acc = acc * wire(p, WIRE.Q_RANGE);\\n            acc = acc * domainSep;\\n            evals[9] = acc;\\n        }\\n    }\\n\\n    struct EllipticParams {\\n        // Points\\n        Fr x_1;\\n        Fr y_1;\\n        Fr x_2;\\n        Fr y_2;\\n        Fr y_3;\\n        Fr x_3;\\n        // push accumulators into memory\\n        Fr x_double_identity;\\n    }\\n\\n    function accumulateEllipticRelation(\\n        Fr[NUMBER_OF_ENTITIES] memory p,\\n        Fr[NUMBER_OF_SUBRELATIONS] memory evals,\\n        Fr domainSep\\n    ) internal pure {\\n        EllipticParams memory ep;\\n        ep.x_1 = wire(p, WIRE.W_R);\\n        ep.y_1 = wire(p, WIRE.W_O);\\n\\n        ep.x_2 = wire(p, WIRE.W_L_SHIFT);\\n        ep.y_2 = wire(p, WIRE.W_4_SHIFT);\\n        ep.y_3 = wire(p, WIRE.W_O_SHIFT);\\n        ep.x_3 = wire(p, WIRE.W_R_SHIFT);\\n\\n        Fr q_sign = wire(p, WIRE.Q_L);\\n        Fr q_is_double = wire(p, WIRE.Q_M);\\n\\n        // Contribution 10 point addition, x-coordinate check\\n        // q_elliptic * (x3 + x2 + x1)(x2 - x1)(x2 - x1) - y2^2 - y1^2 + 2(y2y1)*q_sign = 0\\n        Fr x_diff = (ep.x_2 - ep.x_1);\\n        Fr y1_sqr = (ep.y_1 * ep.y_1);\\n        {\\n            // Move to top\\n            Fr partialEval = domainSep;\\n\\n            Fr y2_sqr = (ep.y_2 * ep.y_2);\\n            Fr y1y2 = ep.y_1 * ep.y_2 * q_sign;\\n            Fr x_add_identity = (ep.x_3 + ep.x_2 + ep.x_1);\\n            x_add_identity = x_add_identity * x_diff * x_diff;\\n            x_add_identity = x_add_identity - y2_sqr - y1_sqr + y1y2 + y1y2;\\n\\n            evals[10] = x_add_identity * partialEval * wire(p, WIRE.Q_ELLIPTIC) * (Fr.wrap(1) - q_is_double);\\n        }\\n\\n        // Contribution 11 point addition, x-coordinate check\\n        // q_elliptic * (q_sign * y1 + y3)(x2 - x1) + (x3 - x1)(y2 - q_sign * y1) = 0\\n        {\\n            Fr y1_plus_y3 = ep.y_1 + ep.y_3;\\n            Fr y_diff = ep.y_2 * q_sign - ep.y_1;\\n            Fr y_add_identity = y1_plus_y3 * x_diff + (ep.x_3 - ep.x_1) * y_diff;\\n            evals[11] = y_add_identity * domainSep * wire(p, WIRE.Q_ELLIPTIC) * (Fr.wrap(1) - q_is_double);\\n        }\\n\\n        // Contribution 10 point doubling, x-coordinate check\\n        // (x3 + x1 + x1) (4y1*y1) - 9 * x1 * x1 * x1 * x1 = 0\\n        // N.B. we're using the equivalence x1*x1*x1 === y1*y1 - curve_b to reduce degree by 1\\n        {\\n            Fr x_pow_4 = (y1_sqr + GRUMPKIN_CURVE_B_PARAMETER_NEGATED) * ep.x_1;\\n            Fr y1_sqr_mul_4 = y1_sqr + y1_sqr;\\n            y1_sqr_mul_4 = y1_sqr_mul_4 + y1_sqr_mul_4;\\n            Fr x1_pow_4_mul_9 = x_pow_4 * Fr.wrap(9);\\n\\n            // NOTE: pushed into memory (stack >:'( )\\n            ep.x_double_identity = (ep.x_3 + ep.x_1 + ep.x_1) * y1_sqr_mul_4 - x1_pow_4_mul_9;\\n\\n            Fr acc = ep.x_double_identity * domainSep * wire(p, WIRE.Q_ELLIPTIC) * q_is_double;\\n            evals[10] = evals[10] + acc;\\n        }\\n\\n        // Contribution 11 point doubling, y-coordinate check\\n        // (y1 + y1) (2y1) - (3 * x1 * x1)(x1 - x3) = 0\\n        {\\n            Fr x1_sqr_mul_3 = (ep.x_1 + ep.x_1 + ep.x_1) * ep.x_1;\\n            Fr y_double_identity = x1_sqr_mul_3 * (ep.x_1 - ep.x_3) - (ep.y_1 + ep.y_1) * (ep.y_1 + ep.y_3);\\n            evals[11] = evals[11] + y_double_identity * domainSep * wire(p, WIRE.Q_ELLIPTIC) * q_is_double;\\n        }\\n    }\\n\\n    // Constants for the auxiliary relation\\n    Fr constant LIMB_SIZE = Fr.wrap(uint256(1) << 68);\\n    Fr constant SUBLIMB_SHIFT = Fr.wrap(uint256(1) << 14);\\n\\n    // Parameters used within the Auxiliary Relation\\n    // A struct is used to work around stack too deep. This relation has alot of variables\\n    struct AuxParams {\\n        Fr limb_subproduct;\\n        Fr non_native_field_gate_1;\\n        Fr non_native_field_gate_2;\\n        Fr non_native_field_gate_3;\\n        Fr limb_accumulator_1;\\n        Fr limb_accumulator_2;\\n        Fr memory_record_check;\\n        Fr partial_record_check;\\n        Fr next_gate_access_type;\\n        Fr record_delta;\\n        Fr index_delta;\\n        Fr adjacent_values_match_if_adjacent_indices_match;\\n        Fr adjacent_values_match_if_adjacent_indices_match_and_next_access_is_a_read_operation;\\n        Fr access_check;\\n        Fr next_gate_access_type_is_boolean;\\n        Fr ROM_consistency_check_identity;\\n        Fr RAM_consistency_check_identity;\\n        Fr timestamp_delta;\\n        Fr RAM_timestamp_check_identity;\\n        Fr memory_identity;\\n        Fr index_is_monotonically_increasing;\\n        Fr auxiliary_identity;\\n    }\\n\\n    function accumulateAuxillaryRelation(\\n        Fr[NUMBER_OF_ENTITIES] memory p,\\n        Honk.RelationParameters memory rp,\\n        Fr[NUMBER_OF_SUBRELATIONS] memory evals,\\n        Fr domainSep\\n    ) internal pure {\\n        AuxParams memory ap;\\n\\n        /**\\n         * Contribution 12\\n         * Non native field arithmetic gate 2\\n         * deg 4\\n         *\\n         *             _                                                                               _\\n         *            /   _                   _                               _       14                \\\\\\n         * q_2 . q_4 |   (w_1 . w_2) + (w_1 . w_2) + (w_1 . w_4 + w_2 . w_3 - w_3) . 2    - w_3 - w_4   |\\n         *            \\\\_                                                                               _/\\n         *\\n         *\\n         */\\n        ap.limb_subproduct = wire(p, WIRE.W_L) * wire(p, WIRE.W_R_SHIFT) + wire(p, WIRE.W_L_SHIFT) * wire(p, WIRE.W_R);\\n        ap.non_native_field_gate_2 =\\n            (wire(p, WIRE.W_L) * wire(p, WIRE.W_4) + wire(p, WIRE.W_R) * wire(p, WIRE.W_O) - wire(p, WIRE.W_O_SHIFT));\\n        ap.non_native_field_gate_2 = ap.non_native_field_gate_2 * LIMB_SIZE;\\n        ap.non_native_field_gate_2 = ap.non_native_field_gate_2 - wire(p, WIRE.W_4_SHIFT);\\n        ap.non_native_field_gate_2 = ap.non_native_field_gate_2 + ap.limb_subproduct;\\n        ap.non_native_field_gate_2 = ap.non_native_field_gate_2 * wire(p, WIRE.Q_4);\\n\\n        ap.limb_subproduct = ap.limb_subproduct * LIMB_SIZE;\\n        ap.limb_subproduct = ap.limb_subproduct + (wire(p, WIRE.W_L_SHIFT) * wire(p, WIRE.W_R_SHIFT));\\n        ap.non_native_field_gate_1 = ap.limb_subproduct;\\n        ap.non_native_field_gate_1 = ap.non_native_field_gate_1 - (wire(p, WIRE.W_O) + wire(p, WIRE.W_4));\\n        ap.non_native_field_gate_1 = ap.non_native_field_gate_1 * wire(p, WIRE.Q_O);\\n\\n        ap.non_native_field_gate_3 = ap.limb_subproduct;\\n        ap.non_native_field_gate_3 = ap.non_native_field_gate_3 + wire(p, WIRE.W_4);\\n        ap.non_native_field_gate_3 = ap.non_native_field_gate_3 - (wire(p, WIRE.W_O_SHIFT) + wire(p, WIRE.W_4_SHIFT));\\n        ap.non_native_field_gate_3 = ap.non_native_field_gate_3 * wire(p, WIRE.Q_M);\\n\\n        Fr non_native_field_identity =\\n            ap.non_native_field_gate_1 + ap.non_native_field_gate_2 + ap.non_native_field_gate_3;\\n        non_native_field_identity = non_native_field_identity * wire(p, WIRE.Q_R);\\n\\n        // ((((w2' * 2^14 + w1') * 2^14 + w3) * 2^14 + w2) * 2^14 + w1 - w4) * qm\\n        // deg 2\\n        ap.limb_accumulator_1 = wire(p, WIRE.W_R_SHIFT) * SUBLIMB_SHIFT;\\n        ap.limb_accumulator_1 = ap.limb_accumulator_1 + wire(p, WIRE.W_L_SHIFT);\\n        ap.limb_accumulator_1 = ap.limb_accumulator_1 * SUBLIMB_SHIFT;\\n        ap.limb_accumulator_1 = ap.limb_accumulator_1 + wire(p, WIRE.W_O);\\n        ap.limb_accumulator_1 = ap.limb_accumulator_1 * SUBLIMB_SHIFT;\\n        ap.limb_accumulator_1 = ap.limb_accumulator_1 + wire(p, WIRE.W_R);\\n        ap.limb_accumulator_1 = ap.limb_accumulator_1 * SUBLIMB_SHIFT;\\n        ap.limb_accumulator_1 = ap.limb_accumulator_1 + wire(p, WIRE.W_L);\\n        ap.limb_accumulator_1 = ap.limb_accumulator_1 - wire(p, WIRE.W_4);\\n        ap.limb_accumulator_1 = ap.limb_accumulator_1 * wire(p, WIRE.Q_4);\\n\\n        // ((((w3' * 2^14 + w2') * 2^14 + w1') * 2^14 + w4) * 2^14 + w3 - w4') * qm\\n        // deg 2\\n        ap.limb_accumulator_2 = wire(p, WIRE.W_O_SHIFT) * SUBLIMB_SHIFT;\\n        ap.limb_accumulator_2 = ap.limb_accumulator_2 + wire(p, WIRE.W_R_SHIFT);\\n        ap.limb_accumulator_2 = ap.limb_accumulator_2 * SUBLIMB_SHIFT;\\n        ap.limb_accumulator_2 = ap.limb_accumulator_2 + wire(p, WIRE.W_L_SHIFT);\\n        ap.limb_accumulator_2 = ap.limb_accumulator_2 * SUBLIMB_SHIFT;\\n        ap.limb_accumulator_2 = ap.limb_accumulator_2 + wire(p, WIRE.W_4);\\n        ap.limb_accumulator_2 = ap.limb_accumulator_2 * SUBLIMB_SHIFT;\\n        ap.limb_accumulator_2 = ap.limb_accumulator_2 + wire(p, WIRE.W_O);\\n        ap.limb_accumulator_2 = ap.limb_accumulator_2 - wire(p, WIRE.W_4_SHIFT);\\n        ap.limb_accumulator_2 = ap.limb_accumulator_2 * wire(p, WIRE.Q_M);\\n\\n        Fr limb_accumulator_identity = ap.limb_accumulator_1 + ap.limb_accumulator_2;\\n        limb_accumulator_identity = limb_accumulator_identity * wire(p, WIRE.Q_O); //  deg 3\\n\\n        /**\\n         * MEMORY\\n         *\\n         * A RAM memory record contains a tuple of the following fields:\\n         *  * i: `index` of memory cell being accessed\\n         *  * t: `timestamp` of memory cell being accessed (used for RAM, set to 0 for ROM)\\n         *  * v: `value` of memory cell being accessed\\n         *  * a: `access` type of record. read: 0 = read, 1 = write\\n         *  * r: `record` of memory cell. record = access + index * eta + timestamp * eta_two + value * eta_three\\n         *\\n         * A ROM memory record contains a tuple of the following fields:\\n         *  * i: `index` of memory cell being accessed\\n         *  * v: `value1` of memory cell being accessed (ROM tables can store up to 2 values per index)\\n         *  * v2:`value2` of memory cell being accessed (ROM tables can store up to 2 values per index)\\n         *  * r: `record` of memory cell. record = index * eta + value2 * eta_two + value1 * eta_three\\n         *\\n         *  When performing a read/write access, the values of i, t, v, v2, a, r are stored in the following wires +\\n         * selectors, depending on whether the gate is a RAM read/write or a ROM read\\n         *\\n         *  | gate type | i  | v2/t  |  v | a  | r  |\\n         *  | --------- | -- | ----- | -- | -- | -- |\\n         *  | ROM       | w1 | w2    | w3 | -- | w4 |\\n         *  | RAM       | w1 | w2    | w3 | qc | w4 |\\n         *\\n         * (for accesses where `index` is a circuit constant, it is assumed the circuit will apply a copy constraint on\\n         * `w2` to fix its value)\\n         *\\n         *\\n         */\\n\\n        /**\\n         * Memory Record Check\\n         * Partial degree: 1\\n         * Total degree: 4\\n         *\\n         * A ROM/ROM access gate can be evaluated with the identity:\\n         *\\n         * qc + w1 \\\\eta + w2 \\\\eta_two + w3 \\\\eta_three - w4 = 0\\n         *\\n         * For ROM gates, qc = 0\\n         */\\n        ap.memory_record_check = wire(p, WIRE.W_O) * rp.etaThree;\\n        ap.memory_record_check = ap.memory_record_check + (wire(p, WIRE.W_R) * rp.etaTwo);\\n        ap.memory_record_check = ap.memory_record_check + (wire(p, WIRE.W_L) * rp.eta);\\n        ap.memory_record_check = ap.memory_record_check + wire(p, WIRE.Q_C);\\n        ap.partial_record_check = ap.memory_record_check; // used in RAM consistency check; deg 1 or 4\\n        ap.memory_record_check = ap.memory_record_check - wire(p, WIRE.W_4);\\n\\n        /**\\n         * Contribution 13 & 14\\n         * ROM Consistency Check\\n         * Partial degree: 1\\n         * Total degree: 4\\n         *\\n         * For every ROM read, a set equivalence check is applied between the record witnesses, and a second set of\\n         * records that are sorted.\\n         *\\n         * We apply the following checks for the sorted records:\\n         *\\n         * 1. w1, w2, w3 correctly map to 'index', 'v1, 'v2' for a given record value at w4\\n         * 2. index values for adjacent records are monotonically increasing\\n         * 3. if, at gate i, index_i == index_{i + 1}, then value1_i == value1_{i + 1} and value2_i == value2_{i + 1}\\n         *\\n         */\\n        ap.index_delta = wire(p, WIRE.W_L_SHIFT) - wire(p, WIRE.W_L);\\n        ap.record_delta = wire(p, WIRE.W_4_SHIFT) - wire(p, WIRE.W_4);\\n\\n        ap.index_is_monotonically_increasing = ap.index_delta * ap.index_delta - ap.index_delta; // deg 2\\n\\n        ap.adjacent_values_match_if_adjacent_indices_match = (ap.index_delta * MINUS_ONE + Fr.wrap(1)) * ap.record_delta; // deg 2\\n\\n        evals[13] = ap.adjacent_values_match_if_adjacent_indices_match * (wire(p, WIRE.Q_L) * wire(p, WIRE.Q_R))\\n            * (wire(p, WIRE.Q_AUX) * domainSep); // deg 5\\n        evals[14] = ap.index_is_monotonically_increasing * (wire(p, WIRE.Q_L) * wire(p, WIRE.Q_R))\\n            * (wire(p, WIRE.Q_AUX) * domainSep); // deg 5\\n\\n        ap.ROM_consistency_check_identity = ap.memory_record_check * (wire(p, WIRE.Q_L) * wire(p, WIRE.Q_R)); // deg 3 or 7\\n\\n        /**\\n         * Contributions 15,16,17\\n         * RAM Consistency Check\\n         *\\n         * The 'access' type of the record is extracted with the expression `w_4 - ap.partial_record_check`\\n         * (i.e. for an honest Prover `w1 * eta + w2 * eta^2 + w3 * eta^3 - w4 = access`.\\n         * This is validated by requiring `access` to be boolean\\n         *\\n         * For two adjacent entries in the sorted list if _both_\\n         *  A) index values match\\n         *  B) adjacent access value is 0 (i.e. next gate is a READ)\\n         * then\\n         *  C) both values must match.\\n         * The gate boolean check is\\n         * (A && B) => C  === !(A && B) || C ===  !A || !B || C\\n         *\\n         * N.B. it is the responsibility of the circuit writer to ensure that every RAM cell is initialized\\n         * with a WRITE operation.\\n         */\\n        Fr access_type = (wire(p, WIRE.W_4) - ap.partial_record_check); // will be 0 or 1 for honest Prover; deg 1 or 4\\n        ap.access_check = access_type * access_type - access_type; // check value is 0 or 1; deg 2 or 8\\n\\n        ap.next_gate_access_type = wire(p, WIRE.W_O_SHIFT) * rp.etaThree;\\n        ap.next_gate_access_type = ap.next_gate_access_type + (wire(p, WIRE.W_R_SHIFT) * rp.etaTwo);\\n        ap.next_gate_access_type = ap.next_gate_access_type + (wire(p, WIRE.W_L_SHIFT) * rp.eta);\\n        ap.next_gate_access_type = wire(p, WIRE.W_4_SHIFT) - ap.next_gate_access_type;\\n\\n        Fr value_delta = wire(p, WIRE.W_O_SHIFT) - wire(p, WIRE.W_O);\\n        ap.adjacent_values_match_if_adjacent_indices_match_and_next_access_is_a_read_operation = (\\n            ap.index_delta * MINUS_ONE + Fr.wrap(1)\\n        ) * value_delta * (ap.next_gate_access_type * MINUS_ONE + Fr.wrap(1)); // deg 3 or 6\\n\\n        // We can't apply the RAM consistency check identity on the final entry in the sorted list (the wires in the\\n        // next gate would make the identity fail).  We need to validate that its 'access type' bool is correct. Can't\\n        // do  with an arithmetic gate because of the  `eta` factors. We need to check that the *next* gate's access\\n        // type is  correct, to cover this edge case\\n        // deg 2 or 4\\n        ap.next_gate_access_type_is_boolean =\\n            ap.next_gate_access_type * ap.next_gate_access_type - ap.next_gate_access_type;\\n\\n        // Putting it all together...\\n        evals[15] = ap.adjacent_values_match_if_adjacent_indices_match_and_next_access_is_a_read_operation\\n            * (wire(p, WIRE.Q_ARITH)) * (wire(p, WIRE.Q_AUX) * domainSep); // deg 5 or 8\\n        evals[16] = ap.index_is_monotonically_increasing * (wire(p, WIRE.Q_ARITH)) * (wire(p, WIRE.Q_AUX) * domainSep); // deg 4\\n        evals[17] = ap.next_gate_access_type_is_boolean * (wire(p, WIRE.Q_ARITH)) * (wire(p, WIRE.Q_AUX) * domainSep); // deg 4 or 6\\n\\n        ap.RAM_consistency_check_identity = ap.access_check * (wire(p, WIRE.Q_ARITH)); // deg 3 or 9\\n\\n        /**\\n         * RAM Timestamp Consistency Check\\n         *\\n         * | w1 | w2 | w3 | w4 |\\n         * | index | timestamp | timestamp_check | -- |\\n         *\\n         * Let delta_index = index_{i + 1} - index_{i}\\n         *\\n         * Iff delta_index == 0, timestamp_check = timestamp_{i + 1} - timestamp_i\\n         * Else timestamp_check = 0\\n         */\\n        ap.timestamp_delta = wire(p, WIRE.W_R_SHIFT) - wire(p, WIRE.W_R);\\n        ap.RAM_timestamp_check_identity =\\n            (ap.index_delta * MINUS_ONE + Fr.wrap(1)) * ap.timestamp_delta - wire(p, WIRE.W_O); // deg 3\\n\\n        /**\\n         * Complete Contribution 12\\n         * The complete RAM/ROM memory identity\\n         * Partial degree:\\n         */\\n        ap.memory_identity = ap.ROM_consistency_check_identity; // deg 3 or 6\\n        ap.memory_identity =\\n            ap.memory_identity + ap.RAM_timestamp_check_identity * (wire(p, WIRE.Q_4) * wire(p, WIRE.Q_L)); // deg 4\\n        ap.memory_identity = ap.memory_identity + ap.memory_record_check * (wire(p, WIRE.Q_M) * wire(p, WIRE.Q_L)); // deg 3 or 6\\n        ap.memory_identity = ap.memory_identity + ap.RAM_consistency_check_identity; // deg 3 or 9\\n\\n        // (deg 3 or 9) + (deg 4) + (deg 3)\\n        ap.auxiliary_identity = ap.memory_identity + non_native_field_identity + limb_accumulator_identity;\\n        ap.auxiliary_identity = ap.auxiliary_identity * (wire(p, WIRE.Q_AUX) * domainSep); // deg 4 or 10\\n        evals[12] = ap.auxiliary_identity;\\n    }\\n\\n    struct PoseidonExternalParams {\\n        Fr s1;\\n        Fr s2;\\n        Fr s3;\\n        Fr s4;\\n        Fr u1;\\n        Fr u2;\\n        Fr u3;\\n        Fr u4;\\n        Fr t0;\\n        Fr t1;\\n        Fr t2;\\n        Fr t3;\\n        Fr v1;\\n        Fr v2;\\n        Fr v3;\\n        Fr v4;\\n        Fr q_pos_by_scaling;\\n    }\\n\\n    function accumulatePoseidonExternalRelation(\\n        Fr[NUMBER_OF_ENTITIES] memory p,\\n        Fr[NUMBER_OF_SUBRELATIONS] memory evals,\\n        Fr domainSep\\n    ) internal pure {\\n        PoseidonExternalParams memory ep;\\n\\n        ep.s1 = wire(p, WIRE.W_L) + wire(p, WIRE.Q_L);\\n        ep.s2 = wire(p, WIRE.W_R) + wire(p, WIRE.Q_R);\\n        ep.s3 = wire(p, WIRE.W_O) + wire(p, WIRE.Q_O);\\n        ep.s4 = wire(p, WIRE.W_4) + wire(p, WIRE.Q_4);\\n\\n        ep.u1 = ep.s1 * ep.s1 * ep.s1 * ep.s1 * ep.s1;\\n        ep.u2 = ep.s2 * ep.s2 * ep.s2 * ep.s2 * ep.s2;\\n        ep.u3 = ep.s3 * ep.s3 * ep.s3 * ep.s3 * ep.s3;\\n        ep.u4 = ep.s4 * ep.s4 * ep.s4 * ep.s4 * ep.s4;\\n        // matrix mul v = M_E * u with 14 additions\\n        ep.t0 = ep.u1 + ep.u2; // u_1 + u_2\\n        ep.t1 = ep.u3 + ep.u4; // u_3 + u_4\\n        ep.t2 = ep.u2 + ep.u2 + ep.t1; // 2u_2\\n        // ep.t2 += ep.t1; // 2u_2 + u_3 + u_4\\n        ep.t3 = ep.u4 + ep.u4 + ep.t0; // 2u_4\\n        // ep.t3 += ep.t0; // u_1 + u_2 + 2u_4\\n        ep.v4 = ep.t1 + ep.t1;\\n        ep.v4 = ep.v4 + ep.v4 + ep.t3;\\n        // ep.v4 += ep.t3; // u_1 + u_2 + 4u_3 + 6u_4\\n        ep.v2 = ep.t0 + ep.t0;\\n        ep.v2 = ep.v2 + ep.v2 + ep.t2;\\n        // ep.v2 += ep.t2; // 4u_1 + 6u_2 + u_3 + u_4\\n        ep.v1 = ep.t3 + ep.v2; // 5u_1 + 7u_2 + u_3 + 3u_4\\n        ep.v3 = ep.t2 + ep.v4; // u_1 + 3u_2 + 5u_3 + 7u_4\\n\\n        ep.q_pos_by_scaling = wire(p, WIRE.Q_POSEIDON2_EXTERNAL) * domainSep;\\n        evals[18] = evals[18] + ep.q_pos_by_scaling * (ep.v1 - wire(p, WIRE.W_L_SHIFT));\\n\\n        evals[19] = evals[19] + ep.q_pos_by_scaling * (ep.v2 - wire(p, WIRE.W_R_SHIFT));\\n\\n        evals[20] = evals[20] + ep.q_pos_by_scaling * (ep.v3 - wire(p, WIRE.W_O_SHIFT));\\n\\n        evals[21] = evals[21] + ep.q_pos_by_scaling * (ep.v4 - wire(p, WIRE.W_4_SHIFT));\\n    }\\n\\n    struct PoseidonInternalParams {\\n        Fr u1;\\n        Fr u2;\\n        Fr u3;\\n        Fr u4;\\n        Fr u_sum;\\n        Fr v1;\\n        Fr v2;\\n        Fr v3;\\n        Fr v4;\\n        Fr s1;\\n        Fr q_pos_by_scaling;\\n    }\\n\\n    function accumulatePoseidonInternalRelation(\\n        Fr[NUMBER_OF_ENTITIES] memory p,\\n        Fr[NUMBER_OF_SUBRELATIONS] memory evals,\\n        Fr domainSep\\n    ) internal pure {\\n        PoseidonInternalParams memory ip;\\n\\n        Fr[4] memory INTERNAL_MATRIX_DIAGONAL = [\\n            FrLib.from(0x10dc6e9c006ea38b04b1e03b4bd9490c0d03f98929ca1d7fb56821fd19d3b6e7),\\n            FrLib.from(0x0c28145b6a44df3e0149b3d0a30b3bb599df9756d4dd9b84a86b38cfb45a740b),\\n            FrLib.from(0x00544b8338791518b2c7645a50392798b21f75bb60e3596170067d00141cac15),\\n            FrLib.from(0x222c01175718386f2e2e82eb122789e352e105a3b8fa852613bc534433ee428b)\\n        ];\\n\\n        // add round constants\\n        ip.s1 = wire(p, WIRE.W_L) + wire(p, WIRE.Q_L);\\n\\n        // apply s-box round\\n        ip.u1 = ip.s1 * ip.s1 * ip.s1 * ip.s1 * ip.s1;\\n        ip.u2 = wire(p, WIRE.W_R);\\n        ip.u3 = wire(p, WIRE.W_O);\\n        ip.u4 = wire(p, WIRE.W_4);\\n\\n        // matrix mul with v = M_I * u 4 muls and 7 additions\\n        ip.u_sum = ip.u1 + ip.u2 + ip.u3 + ip.u4;\\n\\n        ip.q_pos_by_scaling = wire(p, WIRE.Q_POSEIDON2_INTERNAL) * domainSep;\\n\\n        ip.v1 = ip.u1 * INTERNAL_MATRIX_DIAGONAL[0] + ip.u_sum;\\n        evals[22] = evals[22] + ip.q_pos_by_scaling * (ip.v1 - wire(p, WIRE.W_L_SHIFT));\\n\\n        ip.v2 = ip.u2 * INTERNAL_MATRIX_DIAGONAL[1] + ip.u_sum;\\n        evals[23] = evals[23] + ip.q_pos_by_scaling * (ip.v2 - wire(p, WIRE.W_R_SHIFT));\\n\\n        ip.v3 = ip.u3 * INTERNAL_MATRIX_DIAGONAL[2] + ip.u_sum;\\n        evals[24] = evals[24] + ip.q_pos_by_scaling * (ip.v3 - wire(p, WIRE.W_O_SHIFT));\\n\\n        ip.v4 = ip.u4 * INTERNAL_MATRIX_DIAGONAL[3] + ip.u_sum;\\n        evals[25] = evals[25] + ip.q_pos_by_scaling * (ip.v4 - wire(p, WIRE.W_4_SHIFT));\\n    }\\n\\n    function scaleAndBatchSubrelations(\\n        Fr[NUMBER_OF_SUBRELATIONS] memory evaluations,\\n        Fr[NUMBER_OF_ALPHAS] memory subrelationChallenges\\n    ) internal pure returns (Fr accumulator) {\\n        accumulator = accumulator + evaluations[0];\\n\\n        for (uint256 i = 1; i < NUMBER_OF_SUBRELATIONS; ++i) {\\n            accumulator = accumulator + evaluations[i] * subrelationChallenges[i - 1];\\n        }\\n    }\\n}\\n\\nstruct ShpleminiIntermediates {\\n    Fr unshiftedScalar;\\n    Fr shiftedScalar;\\n    // Scalar to be multiplied by [1]\\u2081\\n    Fr constantTermAccumulator;\\n    // Accumulator for powers of rho\\n    Fr batchingChallenge;\\n    // Linear combination of multilinear (sumcheck) evaluations and powers of rho\\n    Fr batchedEvaluation;\\n    // 1/(z - r^{2^i}) for i = 0, ..., logSize, dynamically updated\\n    Fr posInvertedDenominator;\\n    // 1/(z + r^{2^i}) for i = 0, ..., logSize, dynamically updated\\n    Fr negInvertedDenominator;\\n    // v^{2i} * 1/(z - r^{2^i})\\n    Fr scalingFactorPos;\\n    // v^{2i+1} * 1/(z + r^{2^i})\\n    Fr scalingFactorNeg;\\n}\\n// // Fold_i(r^{2^i}) reconstructed by Verifier\\n// Fr[CONST_PROOF_SIZE_LOG_N] foldPosEvaluations;\\n\\nlibrary CommitmentSchemeLib {\\n    using FrLib for Fr;\\n\\n    function computeSquares(Fr r) internal pure returns (Fr[CONST_PROOF_SIZE_LOG_N] memory squares) {\\n        squares[0] = r;\\n        for (uint256 i = 1; i < CONST_PROOF_SIZE_LOG_N; ++i) {\\n            squares[i] = squares[i - 1].sqr();\\n        }\\n    }\\n\\n    // Compute the evaluations  A_l(r^{2^l}) for l = 0, ..., m-1\\n    function computeFoldPosEvaluations(\\n        Fr[CONST_PROOF_SIZE_LOG_N] memory sumcheckUChallenges,\\n        Fr batchedEvalAccumulator,\\n        Fr[CONST_PROOF_SIZE_LOG_N] memory geminiEvaluations,\\n        Fr[CONST_PROOF_SIZE_LOG_N] memory geminiEvalChallengePowers,\\n        uint256 logSize\\n    ) internal view returns (Fr[CONST_PROOF_SIZE_LOG_N] memory foldPosEvaluations) {\\n        for (uint256 i = CONST_PROOF_SIZE_LOG_N; i > 0; --i) {\\n            Fr challengePower = geminiEvalChallengePowers[i - 1];\\n            Fr u = sumcheckUChallenges[i - 1];\\n\\n            Fr batchedEvalRoundAcc = (\\n                (challengePower * batchedEvalAccumulator * Fr.wrap(2))\\n                    - geminiEvaluations[i - 1] * (challengePower * (Fr.wrap(1) - u) - u)\\n            );\\n            // Divide by the denominator\\n            batchedEvalRoundAcc = batchedEvalRoundAcc * (challengePower * (Fr.wrap(1) - u) + u).invert();\\n\\n            if (i <= logSize) {\\n                batchedEvalAccumulator = batchedEvalRoundAcc;\\n                foldPosEvaluations[i - 1] = batchedEvalRoundAcc;\\n            }\\n        }\\n    }\\n}\\n\\ninterface IVerifier {\\n    function verify(bytes calldata _proof, bytes32[] calldata _publicInputs) external view returns (bool);\\n}\\n\\nabstract contract BaseHonkVerifier is IVerifier {\\n    using FrLib for Fr;\\n\\n    uint256 immutable n;\\n    uint256 immutable logN;\\n    uint256 immutable numPublicInputs;\\n\\n    constructor(uint256 _n, uint256 _logN, uint256 _numPublicInputs) {\\n        n = _n;\\n        logN = _logN;\\n        numPublicInputs = _numPublicInputs;\\n    }\\n\\n    error ProofLengthWrong();\\n    error PublicInputsLengthWrong();\\n    error SumcheckFailed();\\n    error ShpleminiFailed();\\n\\n    // Number of field elements in a ultra honk zero knowledge proof\\n    uint256 constant PROOF_SIZE = 440;\\n\\n    function loadVerificationKey() internal pure virtual returns (Honk.VerificationKey memory);\\n\\n    function verify(bytes calldata proof, bytes32[] calldata publicInputs) public view override returns (bool) {\\n        // Check the received proof is the expected size where each field element is 32 bytes\\n        if (proof.length != PROOF_SIZE * 32) {\\n            revert ProofLengthWrong();\\n        }\\n\\n        Honk.VerificationKey memory vk = loadVerificationKey();\\n        Honk.Proof memory p = TranscriptLib.loadProof(proof);\\n\\n        if (publicInputs.length != vk.publicInputsSize) {\\n            revert PublicInputsLengthWrong();\\n        }\\n\\n        // Generate the fiat shamir challenges for the whole protocol\\n        // TODO(https://github.com/AztecProtocol/barretenberg/issues/1281): Add pubInputsOffset to VK or remove entirely.\\n        Transcript memory t = TranscriptLib.generateTranscript(\\n            p, publicInputs, vk.circuitSize, vk.publicInputsSize, /*pubInputsOffset=*/ 1\\n        );\\n\\n        // Derive public input delta\\n        // TODO(https://github.com/AztecProtocol/barretenberg/issues/1281): Add pubInputsOffset to VK or remove entirely.\\n        t.relationParameters.publicInputsDelta = computePublicInputDelta(\\n            publicInputs, t.relationParameters.beta, t.relationParameters.gamma, /*pubInputsOffset=*/ 1\\n        );\\n\\n        // Sumcheck\\n        bool sumcheckVerified = verifySumcheck(p, t);\\n        if (!sumcheckVerified) revert SumcheckFailed();\\n\\n        bool shpleminiVerified = verifyShplemini(p, vk, t);\\n        if (!shpleminiVerified) revert ShpleminiFailed();\\n\\n        return sumcheckVerified && shpleminiVerified; // Boolean condition not required - nice for vanity :)\\n    }\\n\\n    function computePublicInputDelta(bytes32[] memory publicInputs, Fr beta, Fr gamma, uint256 offset)\\n        internal\\n        view\\n        returns (Fr publicInputDelta)\\n    {\\n        Fr numerator = Fr.wrap(1);\\n        Fr denominator = Fr.wrap(1);\\n\\n        Fr numeratorAcc = gamma + (beta * FrLib.from(n + offset));\\n        Fr denominatorAcc = gamma - (beta * FrLib.from(offset + 1));\\n\\n        {\\n            for (uint256 i = 0; i < numPublicInputs; i++) {\\n                Fr pubInput = FrLib.fromBytes32(publicInputs[i]);\\n\\n                numerator = numerator * (numeratorAcc + pubInput);\\n                denominator = denominator * (denominatorAcc + pubInput);\\n\\n                numeratorAcc = numeratorAcc + beta;\\n                denominatorAcc = denominatorAcc - beta;\\n            }\\n        }\\n\\n        // Fr delta = numerator / denominator; // TOOO: batch invert later?\\n        publicInputDelta = FrLib.div(numerator, denominator);\\n    }\\n\\n    function verifySumcheck(Honk.Proof memory proof, Transcript memory tp) internal view returns (bool verified) {\\n        Fr roundTarget;\\n        Fr powPartialEvaluation = Fr.wrap(1);\\n\\n        // We perform sumcheck reductions over log n rounds ( the multivariate degree )\\n        for (uint256 round; round < logN; ++round) {\\n            Fr[BATCHED_RELATION_PARTIAL_LENGTH] memory roundUnivariate = proof.sumcheckUnivariates[round];\\n            bool valid = checkSum(roundUnivariate, roundTarget);\\n            if (!valid) revert SumcheckFailed();\\n\\n            Fr roundChallenge = tp.sumCheckUChallenges[round];\\n\\n            // Update the round target for the next rounf\\n            roundTarget = computeNextTargetSum(roundUnivariate, roundChallenge);\\n            powPartialEvaluation = partiallyEvaluatePOW(tp.gateChallenges[round], powPartialEvaluation, roundChallenge);\\n        }\\n\\n        // Last round\\n        Fr grandHonkRelationSum = RelationsLib.accumulateRelationEvaluations(\\n            proof.sumcheckEvaluations, tp.relationParameters, tp.alphas, powPartialEvaluation\\n        );\\n        verified = (grandHonkRelationSum == roundTarget);\\n    }\\n\\n    function checkSum(Fr[BATCHED_RELATION_PARTIAL_LENGTH] memory roundUnivariate, Fr roundTarget)\\n        internal\\n        pure\\n        returns (bool checked)\\n    {\\n        Fr totalSum = roundUnivariate[0] + roundUnivariate[1];\\n        checked = totalSum == roundTarget;\\n    }\\n\\n    // Return the new target sum for the next sumcheck round\\n    function computeNextTargetSum(Fr[BATCHED_RELATION_PARTIAL_LENGTH] memory roundUnivariates, Fr roundChallenge)\\n        internal\\n        view\\n        returns (Fr targetSum)\\n    {\\n        // TODO: inline\\n        Fr[BATCHED_RELATION_PARTIAL_LENGTH] memory BARYCENTRIC_LAGRANGE_DENOMINATORS = [\\n            Fr.wrap(0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efffec51),\\n            Fr.wrap(0x00000000000000000000000000000000000000000000000000000000000002d0),\\n            Fr.wrap(0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efffff11),\\n            Fr.wrap(0x0000000000000000000000000000000000000000000000000000000000000090),\\n            Fr.wrap(0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efffff71),\\n            Fr.wrap(0x00000000000000000000000000000000000000000000000000000000000000f0),\\n            Fr.wrap(0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593effffd31),\\n            Fr.wrap(0x00000000000000000000000000000000000000000000000000000000000013b0)\\n        ];\\n\\n        // To compute the next target sum, we evaluate the given univariate at a point u (challenge).\\n\\n        // Performing Barycentric evaluations\\n        // Compute B(x)\\n        Fr numeratorValue = Fr.wrap(1);\\n        for (uint256 i = 0; i < BATCHED_RELATION_PARTIAL_LENGTH; ++i) {\\n            numeratorValue = numeratorValue * (roundChallenge - Fr.wrap(i));\\n        }\\n\\n        // Calculate domain size N of inverses\\n        Fr[BATCHED_RELATION_PARTIAL_LENGTH] memory denominatorInverses;\\n        for (uint256 i = 0; i < BATCHED_RELATION_PARTIAL_LENGTH; ++i) {\\n            Fr inv = BARYCENTRIC_LAGRANGE_DENOMINATORS[i];\\n            inv = inv * (roundChallenge - Fr.wrap(i));\\n            inv = FrLib.invert(inv);\\n            denominatorInverses[i] = inv;\\n        }\\n\\n        for (uint256 i = 0; i < BATCHED_RELATION_PARTIAL_LENGTH; ++i) {\\n            Fr term = roundUnivariates[i];\\n            term = term * denominatorInverses[i];\\n            targetSum = targetSum + term;\\n        }\\n\\n        // Scale the sum by the value of B(x)\\n        targetSum = targetSum * numeratorValue;\\n    }\\n\\n    // Univariate evaluation of the monomial ((1-X_l) + X_l.B_l) at the challenge point X_l=u_l\\n    function partiallyEvaluatePOW(Fr gateChallenge, Fr currentEvaluation, Fr roundChallenge)\\n        internal\\n        pure\\n        returns (Fr newEvaluation)\\n    {\\n        Fr univariateEval = Fr.wrap(1) + (roundChallenge * (gateChallenge - Fr.wrap(1)));\\n        newEvaluation = currentEvaluation * univariateEval;\\n    }\\n\\n    function verifyShplemini(Honk.Proof memory proof, Honk.VerificationKey memory vk, Transcript memory tp)\\n        internal\\n        view\\n        returns (bool verified)\\n    {\\n        ShpleminiIntermediates memory mem; // stack\\n\\n        // - Compute vector (r, r\\u00b2, ... , r\\u00b2\\u207d\\u207f\\u207b\\u00b9\\u207e), where n = log_circuit_size\\n        Fr[CONST_PROOF_SIZE_LOG_N] memory powers_of_evaluation_challenge =\\n            CommitmentSchemeLib.computeSquares(tp.geminiR);\\n\\n        // Arrays hold values that will be linearly combined for the gemini and shplonk batch openings\\n        Fr[NUMBER_OF_ENTITIES + CONST_PROOF_SIZE_LOG_N + 2] memory scalars;\\n        Honk.G1Point[NUMBER_OF_ENTITIES + CONST_PROOF_SIZE_LOG_N + 2] memory commitments;\\n\\n        mem.posInvertedDenominator = (tp.shplonkZ - powers_of_evaluation_challenge[0]).invert();\\n        mem.negInvertedDenominator = (tp.shplonkZ + powers_of_evaluation_challenge[0]).invert();\\n\\n        mem.unshiftedScalar = mem.posInvertedDenominator + (tp.shplonkNu * mem.negInvertedDenominator);\\n        mem.shiftedScalar =\\n            tp.geminiR.invert() * (mem.posInvertedDenominator - (tp.shplonkNu * mem.negInvertedDenominator));\\n\\n        scalars[0] = Fr.wrap(1);\\n        commitments[0] = convertProofPoint(proof.shplonkQ);\\n\\n        mem.batchingChallenge = Fr.wrap(1);\\n        mem.batchedEvaluation = Fr.wrap(0);\\n\\n        for (uint256 i = 1; i <= NUMBER_UNSHIFTED; ++i) {\\n            scalars[i] = mem.unshiftedScalar.neg() * mem.batchingChallenge;\\n            mem.batchedEvaluation = mem.batchedEvaluation + (proof.sumcheckEvaluations[i - 1] * mem.batchingChallenge);\\n            mem.batchingChallenge = mem.batchingChallenge * tp.rho;\\n        }\\n        // g commitments are accumulated at r\\n        for (uint256 i = NUMBER_UNSHIFTED + 1; i <= NUMBER_OF_ENTITIES; ++i) {\\n            scalars[i] = mem.shiftedScalar.neg() * mem.batchingChallenge;\\n            mem.batchedEvaluation = mem.batchedEvaluation + (proof.sumcheckEvaluations[i - 1] * mem.batchingChallenge);\\n            mem.batchingChallenge = mem.batchingChallenge * tp.rho;\\n        }\\n\\n        commitments[1] = vk.qm;\\n        commitments[2] = vk.qc;\\n        commitments[3] = vk.ql;\\n        commitments[4] = vk.qr;\\n        commitments[5] = vk.qo;\\n        commitments[6] = vk.q4;\\n        commitments[7] = vk.qLookup;\\n        commitments[8] = vk.qArith;\\n        commitments[9] = vk.qDeltaRange;\\n        commitments[10] = vk.qElliptic;\\n        commitments[11] = vk.qAux;\\n        commitments[12] = vk.qPoseidon2External;\\n        commitments[13] = vk.qPoseidon2Internal;\\n        commitments[14] = vk.s1;\\n        commitments[15] = vk.s2;\\n        commitments[16] = vk.s3;\\n        commitments[17] = vk.s4;\\n        commitments[18] = vk.id1;\\n        commitments[19] = vk.id2;\\n        commitments[20] = vk.id3;\\n        commitments[21] = vk.id4;\\n        commitments[22] = vk.t1;\\n        commitments[23] = vk.t2;\\n        commitments[24] = vk.t3;\\n        commitments[25] = vk.t4;\\n        commitments[26] = vk.lagrangeFirst;\\n        commitments[27] = vk.lagrangeLast;\\n\\n        // Accumulate proof points\\n        commitments[28] = convertProofPoint(proof.w1);\\n        commitments[29] = convertProofPoint(proof.w2);\\n        commitments[30] = convertProofPoint(proof.w3);\\n        commitments[31] = convertProofPoint(proof.w4);\\n        commitments[32] = convertProofPoint(proof.zPerm);\\n        commitments[33] = convertProofPoint(proof.lookupInverses);\\n        commitments[34] = convertProofPoint(proof.lookupReadCounts);\\n        commitments[35] = convertProofPoint(proof.lookupReadTags);\\n\\n        // to be Shifted\\n        commitments[36] = convertProofPoint(proof.w1);\\n        commitments[37] = convertProofPoint(proof.w2);\\n        commitments[38] = convertProofPoint(proof.w3);\\n        commitments[39] = convertProofPoint(proof.w4);\\n        commitments[40] = convertProofPoint(proof.zPerm);\\n\\n        // Add contributions from A\\u2080(r) and A\\u2080(-r) to constant_term_accumulator:\\n        // Compute the evaluations A_l(r^{2^l}) for l = 0, ..., logN - 1\\n        Fr[CONST_PROOF_SIZE_LOG_N] memory foldPosEvaluations = CommitmentSchemeLib.computeFoldPosEvaluations(\\n            tp.sumCheckUChallenges,\\n            mem.batchedEvaluation,\\n            proof.geminiAEvaluations,\\n            powers_of_evaluation_challenge,\\n            logN\\n        );\\n\\n        // Compute the Shplonk constant term contributions from A\\u2080(\\u00b1r)\\n        mem.constantTermAccumulator = foldPosEvaluations[0] * mem.posInvertedDenominator;\\n        mem.constantTermAccumulator =\\n            mem.constantTermAccumulator + (proof.geminiAEvaluations[0] * tp.shplonkNu * mem.negInvertedDenominator);\\n        mem.batchingChallenge = tp.shplonkNu.sqr();\\n\\n        // Compute Shplonk constant term contributions from A\\u2097(\\u00b1r^{2\\u02e1}) for l = 1, ..., m-1;\\n        // Compute scalar multipliers for each fold commitment\\n        for (uint256 i = 0; i < CONST_PROOF_SIZE_LOG_N - 1; ++i) {\\n            bool dummy_round = i >= (logN - 1);\\n\\n            if (!dummy_round) {\\n                // Update inverted denominators\\n                mem.posInvertedDenominator = (tp.shplonkZ - powers_of_evaluation_challenge[i + 1]).invert();\\n                mem.negInvertedDenominator = (tp.shplonkZ + powers_of_evaluation_challenge[i + 1]).invert();\\n\\n                // Compute the scalar multipliers for A\\u2097(\\u00b1 r^{2\\u02e1}) and [A\\u2097]\\n                mem.scalingFactorPos = mem.batchingChallenge * mem.posInvertedDenominator;\\n                mem.scalingFactorNeg = mem.batchingChallenge * tp.shplonkNu * mem.negInvertedDenominator;\\n                // [A\\u2097] is multiplied by -v^{2l}/(z-r^{2^l}) - v^{2l+1} /(z+ r^{2^l})\\n                scalars[NUMBER_OF_ENTITIES + 1 + i] = mem.scalingFactorNeg.neg() + mem.scalingFactorPos.neg();\\n\\n                // Accumulate the const term contribution given by\\n                // v^{2l} * A\\u2097(r^{2\\u02e1}) /(z-r^{2^l}) + v^{2l+1} * A\\u2097(-r^{2\\u02e1}) /(z+ r^{2^l})\\n                Fr accumContribution = mem.scalingFactorNeg * proof.geminiAEvaluations[i + 1];\\n                accumContribution = accumContribution + mem.scalingFactorPos * foldPosEvaluations[i + 1];\\n                mem.constantTermAccumulator = mem.constantTermAccumulator + accumContribution;\\n                // Update the running power of v\\n                mem.batchingChallenge = mem.batchingChallenge * tp.shplonkNu * tp.shplonkNu;\\n            }\\n\\n            commitments[NUMBER_OF_ENTITIES + 1 + i] = convertProofPoint(proof.geminiFoldComms[i]);\\n        }\\n\\n        // Finalise the batch opening claim\\n        commitments[NUMBER_OF_ENTITIES + CONST_PROOF_SIZE_LOG_N] = Honk.G1Point({x: 1, y: 2});\\n        scalars[NUMBER_OF_ENTITIES + CONST_PROOF_SIZE_LOG_N] = mem.constantTermAccumulator;\\n\\n        Honk.G1Point memory quotient_commitment = convertProofPoint(proof.kzgQuotient);\\n\\n        commitments[NUMBER_OF_ENTITIES + CONST_PROOF_SIZE_LOG_N + 1] = quotient_commitment;\\n        scalars[NUMBER_OF_ENTITIES + CONST_PROOF_SIZE_LOG_N + 1] = tp.shplonkZ; // evaluation challenge\\n\\n        Honk.G1Point memory P_0 = batchMul(commitments, scalars);\\n        Honk.G1Point memory P_1 = negateInplace(quotient_commitment);\\n\\n        return pairing(P_0, P_1);\\n    }\\n\\n    // This implementation is the same as above with different constants\\n    function batchMul(\\n        Honk.G1Point[NUMBER_OF_ENTITIES + CONST_PROOF_SIZE_LOG_N + 2] memory base,\\n        Fr[NUMBER_OF_ENTITIES + CONST_PROOF_SIZE_LOG_N + 2] memory scalars\\n    ) internal view returns (Honk.G1Point memory result) {\\n        uint256 limit = NUMBER_OF_ENTITIES + CONST_PROOF_SIZE_LOG_N + 2;\\n        assembly {\\n            let success := 0x01\\n            let free := mload(0x40)\\n\\n            // Write the original into the accumulator\\n            // Load into memory for ecMUL, leave offset for eccAdd result\\n            // base is an array of pointers, so we have to dereference them\\n            mstore(add(free, 0x40), mload(mload(base)))\\n            mstore(add(free, 0x60), mload(add(0x20, mload(base))))\\n            // Add scalar\\n            mstore(add(free, 0x80), mload(scalars))\\n            success := and(success, staticcall(gas(), 7, add(free, 0x40), 0x60, free, 0x40))\\n\\n            let count := 0x01\\n            for {} lt(count, limit) { count := add(count, 1) } {\\n                // Get loop offsets\\n                let base_base := add(base, mul(count, 0x20))\\n                let scalar_base := add(scalars, mul(count, 0x20))\\n\\n                mstore(add(free, 0x40), mload(mload(base_base)))\\n                mstore(add(free, 0x60), mload(add(0x20, mload(base_base))))\\n                // Add scalar\\n                mstore(add(free, 0x80), mload(scalar_base))\\n\\n                success := and(success, staticcall(gas(), 7, add(free, 0x40), 0x60, add(free, 0x40), 0x40))\\n                // accumulator = accumulator + accumulator_2\\n                success := and(success, staticcall(gas(), 6, free, 0x80, free, 0x40))\\n            }\\n\\n            // Return the result - i hate this\\n            mstore(result, mload(free))\\n            mstore(add(result, 0x20), mload(add(free, 0x20)))\\n        }\\n    }\\n}\\n\\ncontract HonkVerifier is BaseHonkVerifier(N, LOG_N, NUMBER_OF_PUBLIC_INPUTS) {\\n    function loadVerificationKey() internal pure override returns (Honk.VerificationKey memory) {\\n        return HonkVerificationKey.loadVerificationKey();\\n    }\\n}\\n\",\"keccak256\":\"0x9a274afb596b14099a23f93b74fba41c5e779878a74df8431fdf0bb008270d04\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063ea50d0e414610030575b600080fd5b61004361003e36600461504e565b610057565b604051901515815260200160405180910390f35b60006100666101b86020615137565b8414610085576040516376ba560560e11b815260040160405180910390fd5b600061008f6101a3565b9050600061009d87876101b8565b604083015190915084146100c45760405163fa06659360e01b815260040160405180910390fd5b60006100dd828787866000015187604001516001610466565b905061012c868680806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250508451606081015160809091015190925090506001610516565b815160a00152600061013e838361062b565b90508061015e576040516313f8744360e31b815260040160405180910390fd5b600061016b848685610732565b90508061018b576040516352ec174560e11b815260040160405180910390fd5b8180156101955750805b9a9950505050505050505050565b6101ab61491b565b6101b3610fbd565b905090565b6101c0614cd2565b6101d66101d160806000858761514e565b6118a3565b81526101ea6101d16101006080858761514e565b60208201526102026101d1610180610100858761514e565b604082015261021a6101d1610200610180858761514e565b60a08201526102326101d1610280610200858761514e565b60c082015261024a6101d1610300610280858761514e565b60608201526102626101d1610380610300858761514e565b60e082015261027a6101d1610400610380858761514e565b608082015261040060005b601c8110156103135760005b600881101561030a576102bd8684876102ab826020615178565b926102b89392919061514e565b611979565b84610100015183601c81106102d4576102d461518b565b602002015182600881106102ea576102ea61518b565b6020020181815250506020836103009190615178565b9250600101610291565b50600101610285565b5060005b6028811015610368576103318583866102ab826020615178565b83610120015182602881106103485761034861518b565b60200201818152505060208261035e9190615178565b9150600101610317565b5060005b6103786001601c6151a1565b8110156103ce5761039d858386610390826080615178565b926101d19392919061514e565b83610140015182601b81106103b4576103b461518b565b60200201526103c4608083615178565b915060010161036c565b5060005b601c811015610423576103ec8583866102ab826020615178565b83610160015182601c81106104035761040361518b565b6020020181815250506020826104199190615178565b91506001016103d2565b50610435848285610390826080615178565b610180830152610446816080615178565b9050610459848285610390826080615178565b6101a08301525092915050565b61046e614d8f565b600061047f888888888888876119d6565b908352905061048e8189611a5e565b602084019190915290506104a181611bfb565b604084019190915290506104b58882611c5e565b606084019190915290506104c98882611d35565b608084019190915290506104dd8882611dc3565b60a084019190915290506104f18882611f33565b60c084019190915290506105058882611fa7565b5060e0830152509695505050505050565b6000600180826105608661055b896105566105518a7f0000000000000000000000000000000000000000000000000000000000000000615178565b611fff565b61201f565b61203a565b9050600061057f8761057a8a6105566105518b6001615178565b612055565b905060005b7f00000000000000000000000000000000000000000000000000000000000000008110156106135760006105d08b83815181106105c3576105c361518b565b6020026020010151611fff565b90506105e086610556868461203a565b95506105f085610556858461203a565b94506105fc848b61203a565b9350610608838b612055565b925050600101610584565b5061061e8484612087565b9998505050505050505050565b6000806001815b7f000000000000000000000000000000000000000000000000000000000000000081101561070657600086610100015182601c81106106735761067361518b565b6020020151905060006106868286612096565b9050806106a6576040516313f8744360e31b815260040160405180910390fd5b6000876060015184601c81106106be576106be61518b565b602002015190506106cf83826120b4565b95506106f6886040015185601c81106106ea576106ea61518b565b60200201518683612268565b9450505050806001019050610632565b5060006107228661012001518660000151876020015185612294565b90508281145b9695505050505050565b60006107836040518061012001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60006107928460a00151612303565b905061079c614e1d565b6107a4614e3c565b60e08601516107c4906107bf908560005b6020020151612055565b612368565b60a085015260e08601516107e4906107bf908560005b602002015161203a565b60c080860182905260a0860151908801516108039261055b919061201f565b845260a08601516108319061081790612368565b6105568660a0015161057a8a60c001518960c0015161201f565b602085015260018252610180880151610849906123d8565b8152600160608501819052600060808601525b602381116109035761087e6108748660000151612424565b866060015161201f565b8382604681106108905761089061518b565b602002015260808501516101208a01516108d3919061055b906108b46001866151a1565b602881106108c4576108c461518b565b6020020151886060015161201f565b8560800181815250506108ee8560600151886080015161201f565b60608601526108fc816151b4565b905061085c565b50600061091260236001615178565b90505b602881116109935761092d6108748660200151612424565b83826046811061093f5761093f61518b565b602002015260808501516101208a0151610963919061055b906108b46001866151a1565b85608001818152505061097e8560600151886080015161201f565b606086015261098c816151b4565b9050610915565b50606087015181600160200201526080870151816002602002015260a0870151816003602002015260c0870151816004602002015260e0870151816005602002015261010087015181600660200201526101208701518160076020020152610140870151816008602002015261016087015181600960200201526101a087015181600a602002015261018087015181600b60200201526101c087015181600c60200201526101e087015181600d602002015261020087015181600e602002015261022087015181600f60200201526102408701518160106020020152610260870151816011602002015261028087015181601260200201526102a087015181601360200201526102c087015181601460200201526102e08701518160156020020152610300870151816016602002015261032087015181601760200201526103408701518160186020020152610360870151816019602002015261038087015181601a60200201526103a087015181601b60200201528751610b14906123d8565b6103808201526020880151610b28906123d8565b6103a08201526040880151610b3c906123d8565b6103c08201526060880151610b50906123d8565b6103e08201526080880151610b64906123d8565b61040082015260e0880151610b78906123d8565b61042082015260a0880151610b8c906123d8565b61044082015260c0880151610ba0906123d8565b6104608201528751610bb1906123d8565b6104808201526020880151610bc5906123d8565b6104a08201526040880151610bd9906123d8565b6104c08201526060880151610bed906123d8565b6104e08201526080880151610c01906123d8565b610500820152606086015160808501516101608a0151600092610c47929091877f000000000000000000000000000000000000000000000000000000000000000061243e565b805160a0870151919250610c5a9161201f565b604086018190526101608a01515160c0890151610c8a929161055b91610c80919061201f565b8860c0015161201f565b604086015260c0870151610c9d9061255c565b606086015260005b610cb16001601c6151a1565b811015610eb5576000610ce560017f00000000000000000000000000000000000000000000000000000000000000006151a1565b821015905080610e5b57610d186107bf8a60e0015188856001610d089190615178565b601c81106107b5576107b561518b565b60a088015260e0890151610d46906107bf9088610d36866001615178565b601c81106107da576107da61518b565b60c0880152606087015160a0880151610d5f919061201f565b60e0880152606087015160c08a0151610d7b91610c809161201f565b6101008801819052610d9d90610d9090612424565b61055b8960e00151612424565b8583610dab60286001615178565b610db59190615178565b60468110610dc557610dc561518b565b60200201526101008701516101608c0151600091610e0291610de8866001615178565b601c8110610df857610df861518b565b602002015161201f565b9050610e1e8161055b8a60e0015187876001610de89190615178565b9050610e2e88604001518261203a565b6040890152606088015160c08b0151610e5491610e4a9161201f565b8b60c0015161201f565b6060890152505b610e7f8b610140015183601b8110610e7557610e7561518b565b60200201516123d8565b8483610e8d60286001615178565b610e979190615178565b60468110610ea757610ea761518b565b602002015250600101610ca5565b5060408051808201909152600181526002602082015282610ed8601c6028615178565b60468110610ee857610ee861518b565b6020020152604085015183610eff601c6028615178565b60468110610f0f57610f0f61518b565b60200201526101a0890151600090610f26906123d8565b90508083610f36601c6028615178565b610f41906001615178565b60468110610f5157610f5161518b565b602002015260e088015184610f68601c6028615178565b610f73906001615178565b60468110610f8357610f8361518b565b60200201526000610f948486612568565b90506000610fa18361263b565b9050610fad82826126b3565b9c9b505050505050505050505050565b610fc561491b565b50604080516103c0810182526201000081526010602080830191909152600482840152825180840184527f0e7c8f71103873a611efb9c443b09efd3859513d21de02d80ab196eb12f0d4c681527f29e3e4a1b6736e10131476bb407004e5ecf26b179432991882820f6f79285725818301526060830152825180840184527f10b22b6cc367dbd4ac7fa7f84ebfe41b99d5c7e21d7a0810344fa9c93144f0a381527f2765e2786d9916dbf73ce7d6a23715bf7cfa476500e01cd339c8ca98078218ae818301526080830152825180840184527f289bc01445fa4667a47e7c31bd32f98a3cde89f397210db72ecfb8ba8debc72181527f2a2b5bb3fbf5b5db7fb67bbfaea5f3b2b65c2641960d22942e5f34edbf132c6f8183015260a0830152825180840184527f0667987db93a70ac462f2032574d4faef715558177759b0f030d2575110e38a281527f0e6d558cff6092eb202d7220b0b5acdd77c5e8c5fbe5ca93529da1ba4ab88a638183015260c0830152825180840184527f1a4783374b8e1286da984e250f7117c703d7d759eeec2290cf75ff3303da323c81527f14ed00618cb70f64a78b5075367897da4522241796b89d03f1a7e517d5a014738183015260e0830152825180840184527f247a5f4dcd5da54fc4cc1fbf2fef714135bd72cc772be0d1138861825be7b13881527f1281bb3780dc178ba98ac9445afa409b125727a8fb9b95363050b088968f680081830152610100830152825180840184527f304b1f3f6dbf38013e2451e1d3441b59536d30f6f10b2e3d2536666ce528322181527f276cd8fc9a873e4e071bcba6aff6d9ee4b9bacd691a89401857d9015136a7ef881830152610120830152825180840184527f1c869231034e86642f5e2ed94d205f3a86dd6cec7133f8ff8ab1089e8439355b81527f0ea198adb5f6ddb95ce8d85f4df30e36422d530430305fa3e2d6f06d9c2aab7a81830152610140830152825180840184527f0b38b1e2772df277dfa0350e9bbfbebca51881301dce17e696cfad18e51dbc6581527f0a90218270c2fdc5df0e46cdfc2df195ee2a38a03e8f0f99311d080abe5f4e4981830152610160830152825180840184527f2323f93d03add03fb6247f3a439f1ea268416a510d493e834c6b52d562b6303381527f19e7c430853d913c5d09312bd1ea4bf190857ca7d437ce58b6bd355ba07e88c181830152610180830152825180840184527f0942a8c0fa84846052c670b62e1da756c2a5e0fd44a5e46a961a6bd52179045a81527f2b944cb0ce32ffb81415a764d62167c40d63e2622fd7ce1df0e8f9acbe803d03818301526101a0830152825180840184527f153489639e766c30bca863f2ea89201657ce3323b9d0157c66b23b38e7b0828781527f2e0867c16a2f11b5dfd62f88bc08f7f33558940b8e1394632be20f823911d8d2818301526101c0830152825180840184527f0fdcb5db747b6520763b37266d0c0cbe8945ae0117cc24a5a5c7a1dbabf874ca81527f022fae24762750f69a02dde8e1391229245815ea8af2e6b23f134c1dfea5108e818301526101e0830152825180840184527f18d3e11683b0c1c921e8fa9d4bd3b629c3f93b13b72f2afedc90089f8af5fe8081527f19a6ae399fe5434931bd8c593e3a672e9a25147e255477d117d393639e43d35081830152610200830152825180840184527f0b39afaf77d3ca9c568f137b87631c1cffb1c7137cab43147a383c96ba7adc1b81527f05a4fac9b485fc43f81d4f4fbafd2e42b171104133c10eadcea99b509d9fa64981830152610220830152825180840184527f22220e411f43fbc5ecf12a8854aaf9d1c0e9683df425cdc7449a437485c3c23f81527f0d69edec69db97c7302887f3eae675a9692e3a1a98766f1aaed3759729678ce081830152610240830152825180840184527f0bb72d9d3be7f8e4255500162cd00c4d3b48dae83e0b3ac1b1fbb346c651ce3d81527f024559e9989e23c871963bc1070c7c848aa6f9f3f3f9742ab595363e8f2e66d081830152610260830152825180840184527f04d13b1c0e341a923e30ea4da2d1c3d34b1416aa293f122f07aa6fe7301e05f181527f0495e05d3a988ce9ac980bf9fe14db43ff3cb3395eac9376e5e544acdd8bca1081830152610280830152825180840184527f2d0f4c891a768d790e4c5b894a1477eba0f2a16d791d921ff1515b565e156d2e81527f19fb56af78c7473e782f00e60ab85b0c4a5e7ee4abe7f356c38590aa64560e2c818301526102a0830152825180840184527f0693c992d7ce560ad9d614d204d98a012e1b139620c121d921b9615a494bc86a81527f045a545d832d4f109a0ddfe3cb7cb6d5d3488dd448aa7521071ef860397c0912818301526102c0830152825180840184527f0656cecfd8cd5b3b88b4af342001bebe2d9f6d4a3b459e1eab3e55b874bb79e481527f1baf584ecc371569c53c9b05a6ab7141860a01c96bb5a2cc2c442d855d849f81818301526102e0830152825180840184527f2cdb329f4ac54a9b2a6bb49f35b27881fa6a6bb06a51e41a3addbc63b92a09f281527f09de6f6dce6674dfe0bb9a2d33543b23fa70fdaae3e508356ea287353ff5637781830152610300830152825180840184527f011733a47342be1b62b23b74d39fb6a27677b44284035c618a4cfa6c3591836781527f1b6124ff294c0bbe277c398d606ca94bf37bad466915d4b7b1fcfd2ff798705d81830152610320830152825180840184527f233834e0140e5ef7e22c8e9c71b60d1f9ad15ec60b1160db943c043c64e5635b81527f2a1e72915741ffdc0d9537378ca015e8943fd1ce6bb8eeb999eb04d9c51b1f4e81830152610340830152825180840184527f2ae1cb509ce1e6f5a706388238a045046c7d1b3a1c534d8d1cd1165deb1b3a3381527f1f0a2bdf6edefdfa216746a70719395d6c1f362f7bacfdb326d34457994ca6c181830152610360830152825180840184526001815260028183015261038083015282518084019093527f0400db363c23b02efe7cda4efaf725385fee64685a57c86ca44efed025dfbbaa83527f24994cd738a7aa135cc20a5e6f9488098d36743559400b42681b959b6a1145bc908301526103a081019190915290565b6118ab614e76565b608082146118f65760405162461bcd60e51b81526020600482015260136024820152721a5b9d985b1a5908189e5d195cc81c1bda5b9d606a1b60448201526064015b60405180910390fd5b60408051608081019091528061191060206000868861514e565b611919916151cd565b815260209081019061192f90604090868861514e565b611938916151cd565b815260200161194b60606040868861514e565b611954916151cd565b815260200161196760806060868861514e565b611970916151cd565b90529392505050565b6000602082146119c25760405162461bcd60e51b815260206004820152601460248201527334b73b30b634b210313cba32b99039b1b0b630b960611b60448201526064016118ed565b6119cf61055183856151cd565b9392505050565b611a0f6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6000611a1f8989898989896128bd565b604086019190915260208501919091529083529250611a3e838a612ce8565b608085019190915260608401919091529199919850909650505050505050565b611a66614e9e565b6000611a70614ebd565b84815260e0848101805151602080850191909152815181015160408086019190915282518101516060808701919091529251830151608080870191909152880180515160a0870152805183015160c08701528051820151948601949094529251909101516101008401529051611b0791611aec918491016151eb565b60405160208183030381529060405280519060200120611fff565b9150611b1282612db5565b6020850152835260015b611b2860026019615236565b811015611ba857611b4583604051602001611aec91815260200190565b9250611b5083612db5565b85611b5c846002615137565b60198110611b6c57611b6c61518b565b6020020186611b7c856002615137565b611b87906001615178565b60198110611b9757611b9761518b565b602002019190915252600101611b1c565b50611bbf82604051602001611aec91815260200190565b91506000611bcc83612db5565b85611bd9600160196151a1565b60198110611be957611be961518b565b60200201919091525050509250929050565b611c03614edc565b6000805b601c811015611c5757611c2684604051602001611aec91815260200190565b93506000611c3385612db5565b8584601c8110611c4557611c4561518b565b60200201919091525050600101611c07565b5090929050565b611c66614edc565b6000805b601c811015611d2c57611c7b614ebd565b84815260005b6008811015611ce55786610100015183601c8110611ca157611ca161518b565b60200201518160088110611cb757611cb761518b565b602002015182611cc8836001615178565b60098110611cd857611cd861518b565b6020020152600101611c81565b50611cfa81604051602001611aec91906151eb565b94506000611d0786612db5565b8685601c8110611d1957611d1961518b565b6020020191909152505050600101611c6a565b50909391925050565b600080611d40614efb565b83815260005b6028811015611d94578561012001518160288110611d6657611d6661518b565b602002015182611d77836001615178565b60298110611d8757611d8761518b565b6020020152600101611d46565b50611da981604051602001611aec919061524a565b91506000611db683612db5565b5096929550919350505050565b600080611dce614f1a565b83815260005b611de06001601c6151a1565b811015611f1e5785610140015181601b8110611dfe57611dfe61518b565b60200201515182611e10836004615137565b611e1b906001615178565b606d8110611e2b57611e2b61518b565b602002015261014086015181601b8110611e4757611e4761518b565b60200201516020015182826004611e5e9190615137565b611e69906002615178565b606d8110611e7957611e7961518b565b602002015261014086015181601b8110611e9557611e9561518b565b60200201516040015182611eaa836004615137565b611eb5906003615178565b606d8110611ec557611ec561518b565b602002015261014086015181601b8110611ee157611ee161518b565b60200201516060015182611ef6836004615137565b611f01906004615178565b606d8110611f1157611f1161518b565b6020020152600101611dd4565b50611da981604051602001611aec919061527f565b600080611f3e614f39565b83815260005b601c811015611f925785610160015181601c8110611f6457611f6461518b565b602002015182611f75836001615178565b601d8110611f8557611f8561518b565b6020020152600101611f44565b50611da981604051602001611aec91906152b4565b600080611fb2614f58565b83815261018085018051516020808401919091528151810151604080850191909152825181015160608086019190915292519092015160808401529051611da991611aec918491016152e9565b60006120196000805160206154318339815191528361531d565b92915050565b60006000805160206154318339815191528284099392505050565b60006000805160206154318339815191528284089392505050565b600060008051602061543183398151915261207e836000805160206154318339815191526151a1565b84089392505050565b60006119cf8361055684612368565b815160009081906120a9908560016107da565b929092149392505050565b60408051610100810182527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efffec5181526102d060208201527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efffff1191810191909152609060608201527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efffff71608082015260f060a08201527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593effffd3160c08201526113b060e08201526000906001825b600881101561219c57612192826105568784612055565b915060010161217b565b506121a5614f76565b60005b60088110156122085760008482600881106121c5576121c561518b565b602002015190506121da816105568985612055565b90506121e581612368565b9050808383600881106121fa576121fa61518b565b6020020152506001016121a8565b5060005b600881101561225d5760008782600881106122295761222961518b565b6020020151905061224681848460088110610df857610df861518b565b9050612252868261203a565b95505060010161220c565b50610728848361201f565b60008061227f600161055b85610556896001612055565b905061228b848261201f565b95945050505050565b600061229e614f95565b6122a9868285612def565b6122b586868386612fa0565b6122c18686838661318d565b6122cc868285613394565b6122d7868285613586565b6122e3868683866138eb565b6122ee8682856141a6565b6122f9868285614582565b6107288185614884565b61230b614edc565b81815260015b601c81101561236257612343826123296001846151a1565b601c81106123395761233961518b565b602002015161255c565b8282601c81106123555761235561518b565b6020020152600101612311565b50919050565b60008082905060006040516020815260208082015260206040820152826060820152600260008051602061543183398151915203608082015260008051602061543183398151915260a08201526020600060c08360055afa9050806123cc57600080fd5b50506000519392505050565b6040805180820190915260008082526020820152604051806040016040528060888460200151901b846000015117815260200160888460600151901b8460400151178152509050919050565b6000612019826000805160206154318339815191526151a1565b612446614edc565b601c5b80156125525760008461245d6001846151a1565b601c811061246d5761246d61518b565b602002015190506000886124826001856151a1565b601c81106124925761249261518b565b6020020151905060006124ee6124b26124ab858c61201f565b600261201f565b61057a8a6124c16001896151a1565b601c81106124d1576124d161518b565b60200201516105566124e88861055660018a612055565b87612055565b905061250f816105566107bf61250987610556600189612055565b8661203a565b905085841161253e5797508780856125286001876151a1565b601c81106125385761253861518b565b60200201525b5050508061254b90615331565b9050612449565b5095945050505050565b6000612019828361201f565b6040805180820190915260008082526020820152600061258a601c6028615178565b612595906002615178565b90506001604051855151604082015285516020015160608201528451608082015260408160606040840160075afa8216915060015b838110156126235760208102870160208202870181515160408501528151602001516060850152805160808501525050604080830160606040850160075afa8316925060408260808460065afa909216916001016125ca565b50805184526020810151602085015250505092915050565b60408051808201909152600080825260208201527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4782602001517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd476126a091906151a1565b6126aa919061531d565b60208301525090565b81516020808401518351848301516040805194850195909552938301919091527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c260608301527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed60808301527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b60a08301527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa60c083015260e08201526101008101919091527f260e01b251f6f1c7e7ff4e580791dee8ea51d87a358e038b4efe30fac09383c16101208201527f0118c4d5b837bcc2bc89b5b398b5974e9f5944073b32078b7e231fec938883b06101408201527f04fc6369f7110fe3d25156c1bb9a72859cf2a04641f99ba4ee413c80da6a5fe46101608201527f22febda3c0c0632a56475b4214e5615e11e6dd3f96e6cea2854a87d4dacc5e5561018082015260009081906101a001604051602081830303815290604052905060008060086001600160a01b03168360405161284b9190615348565b600060405180830381855afa9150503d8060008114612886576040519150601f19603f3d011682016040523d82523d6000602084013e61288b565b606091505b50915091506000818060200190518101906128a69190615377565b90508280156128b25750805b979650505050505050565b6000808080806128ce876003615178565b6128d990600c615178565b67ffffffffffffffff8111156128f1576128f1615399565b60405190808252806020026020018201604052801561291a578160200160208202803683370190505b5090508760001b816000815181106129345761293461518b565b6020026020010181815250508660001b816001815181106129575761295761518b565b6020026020010181815250508560001b8160028151811061297a5761297a61518b565b60200260200101818152505060005b878110156129db578a8a828181106129a3576129a361518b565b90506020020135828260036129b89190615178565b815181106129c8576129c861518b565b6020908102919091010152600101612989565b508a5151816129eb896003615178565b815181106129fb576129fb61518b565b6020908102919091018101919091528b51015181612a1a896003615178565b612a25906001615178565b81518110612a3557612a3561518b565b60209081029190910101528a516040015181612a52896003615178565b612a5d906002615178565b81518110612a6d57612a6d61518b565b60209081029190910101528a516060015181612a8a896003615178565b612a95906003615178565b81518110612aa557612aa561518b565b6020908102919091018101919091528b01515181612ac4896003615178565b612acf906004615178565b81518110612adf57612adf61518b565b6020908102919091018101919091528b810151015181612b00896003615178565b612b0b906005615178565b81518110612b1b57612b1b61518b565b6020908102919091018101919091528b01516040015181612b3d896003615178565b612b48906006615178565b81518110612b5857612b5861518b565b6020908102919091018101919091528b01516060015181612b7a896003615178565b612b85906007615178565b81518110612b9557612b9561518b565b602090810291909101015260408b01515181612bb2896003615178565b612bbd906008615178565b81518110612bcd57612bcd61518b565b60209081029190910181019190915260408c0151015181612bef896003615178565b612bfa906009615178565b81518110612c0a57612c0a61518b565b60209081029190910101526040808c0151015181612c29896003615178565b612c3490600a615178565b81518110612c4457612c4461518b565b602090810291909101015260408b01516060015181612c64896003615178565b612c6f90600b615178565b81518110612c7f57612c7f61518b565b602002602001018181525050612c9f81604051602001611aec91906153af565b9150612caa82612db5565b6040805160208101869052929750909550612cc59101611aec565b91506000612cd283612db5565b50959c949b509499509097509195505050505050565b6000806000612cf5614fb4565b85815260a0858101805151602080850191909152815181015160408086019190915282518101516060808701919091529251830151608086015260c0808a0180515195870195909552845183015190860152835181015160e086015292518201516101008501528188018051516101208601528051820151610140860152805184015161016086015251909101516101808401529051612d9b91611aec918491016153e5565b9150612da682612db5565b90979096509194509092505050565b600080826fffffffffffffffffffffffffffffffff8116608082901c612dda82611fff565b9450612de581611fff565b9350505050915091565b6000612dfc8460076148ea565b90507f183227397098d014dc2822db40c0ac2e9419f4243cdcb848a1f0fac9f80000006000612e5f612e59612e32856003612055565b610556612e4e612e438b60006148ea565b6105568c601c6148ea565b6105568b601b6148ea565b8361201f565b9050612ee0612ed5612ebc612ea3612e8a8561055b612e7f8d60026148ea565b6105568e601b6148ea565b61055b612e988c60036148ea565b6105568d601c6148ea565b61055b612eb18b60046148ea565b6105568c601d6148ea565b61055b612eca8a60056148ea565b6105568b601e6148ea565b61055b8860016148ea565b9050612eff8161055b612ef4866001612055565b6105568a60266148ea565b9050612f0b818461201f565b9050612f17818561201f565b85525060009050612f53612f48612f3d612f3288601b6148ea565b61055b89601e6148ea565b61057a8860236148ea565b61055b8760006148ea565b9050612f6481610556846002612055565b9050612f7581610556846001612055565b9050612f81818361201f565b9050612f8d818461201f565b9050808460015b60200201525050505050565b6000806000612fd8612fce612fb689601b6148ea565b61055b612fc48b60116148ea565b8a6060015161201f565b876080015161203a565b905061301181610556613007612fef8b601c6148ea565b61055b612ffd8d60126148ea565b8c6060015161201f565b896080015161203a565b9050613036816105566130076130288b601d6148ea565b61055b612ffd8d60136148ea565b905061305b8161055661300761304d8b601e6148ea565b61055b612ffd8d60146148ea565b925060009050613080612fce61307289601b6148ea565b61055b612fc48b600d6148ea565b90506130a5816105566130076130978b601c6148ea565b61055b612ffd8d600e6148ea565b90506130ca816105566130076130bc8b601d6148ea565b61055b612ffd8d600f6148ea565b90506130ef816105566130076130e18b601e6148ea565b61055b612ffd8d60106148ea565b91506000905061311761311161310689601f6148ea565b61055b8a60196148ea565b8461201f565b905061314c8161057a61314661312e8b60276148ea565b61055b61313c8d601a6148ea565b8c60a0015161201f565b8561201f565b9050613158818561201f565b604086015250600061317c61314661317189601a6148ea565b6105568a60276148ea565b606090950194909452505050505050565b6000806131ec6131d46131bc6131a76130078a60156148ea565b61055b6131b58b60166148ea565b8a5161201f565b61055b6131ca8a60176148ea565b896020015161201f565b61055b6131e28960186148ea565b886040015161201f565b9150600061322461320b61320189601b6148ea565b886080015161203a565b61055b6132198a60036148ea565b6105568b60236148ea565b9050600061324f61323689601c6148ea565b61055b6132448b60006148ea565b6105568c60246148ea565b9050600061327a6132618a601d6148ea565b61055b61326f8c60016148ea565b6105568d60256148ea565b90506132ba6132a26132948561055b868d6000015161201f565b61055b848c6020015161201f565b61055b6132b08c60046148ea565b8b6040015161201f565b935050505060006132cf6131118860206148ea565b905060006132e16131118960206148ea565b9050600061331a6133016132f68b60226148ea565b61055b8c60066148ea565b61057a61330f8c60226148ea565b6105568d60066148ea565b9050600061333f61333961332e878961201f565b6105568d60206148ea565b83612055565b905061334b818861201f565b905060006133746133666133608d60066148ea565b8761201f565b61057a6133608e60216148ea565b60808a018390529050808960055b60200201525050505050505050505050565b60006133a260006001612055565b905060006133b260006002612055565b905060006133c260006003612055565b905060006133df6133d488601c6148ea565b61057a89601b6148ea565b905060006133fc6133f189601d6148ea565b61057a8a601c6148ea565b9050600061341961340e8a601e6148ea565b61057a8b601d6148ea565b9050600061343661342b8b60236148ea565b61057a8c601e6148ea565b90508361344781610556818b61203a565b905061345781610556878a61203a565b905061346781610556878961203a565b9050613478816105568d60086148ea565b9050613484818a61201f565b60c08b0152508261349981610556818b61203a565b90506134a981610556868a61203a565b90506134b981610556868961203a565b90506134ca816105568d60086148ea565b90506134d6818a61201f565b60e08b015250816134eb81610556818b61203a565b90506134fb81610556858a61203a565b905061350b81610556858961203a565b905061351c816105568d60086148ea565b9050613528818a61201f565b6101008b0152508061353e81610556818b61203a565b905061354e81610556848a61203a565b905061355e81610556848961203a565b905061356f816105568d60086148ea565b905061357b818a61201f565b9050808a6009613382565b6135c66040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6135d184601c6148ea565b81526135de84601d6148ea565b60208201526135ee8460236148ea565b60408201526135fe8460266148ea565b606082015261360e8460256148ea565b608082015261361e8460246148ea565b60a082015260006136308560026148ea565b9050600061363f8660006148ea565b9050600061365584604001518560000151612055565b9050600061366b8560200151866020015161201f565b60608601519091508690600090613682908061201f565b905060006136a161369b89602001518a6060015161201f565b8861201f565b905060006136c16136ba8a60a001518b6040015161203a565b8a5161203a565b90506136d0613360828861201f565b90506136f76136f16136eb6136e58487612055565b88612055565b8461203a565b8361203a565b905061371f613714613709838761201f565b6105568f60096148ea565b61055660018a612055565b6101408c0152505050506020850151608086015160009161373f9161203a565b9050600061375e61375488606001518861201f565b8860200151612055565b9050600061378461376f848761201f565b61055b6131468b60a001518c60000151612055565b90506137ac6137a1613796838c61201f565b6105568e60096148ea565b610556600189612055565b6101608b015250600091506137ce90506137c783601161203a565b875161201f565b905060006137dc838461203a565b90506137e8818261203a565b905060006137f783600961201f565b905061382161381b6131116138148b60a001518c6000015161203a565b8b5161203a565b82612055565b60c0890181905260009061383d9061369b90613709908d61201f565b90506138508b600a60200201518261203a565b6101408c0152505086516000925061387891506137c790613871908061203a565b885161203a565b905060006138ba613895836105568a600001518b60a00151612055565b602089015161057a906138a8908061203a565b6105568b602001518c6080015161203a565b90506138d789600b602002015161055b61369b613709858d61201f565b89600b602002015250505050505050505050565b613995604051806102c00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6139ca6139b16139a687601b6148ea565b6105568860246148ea565b61055b6139bf8860236148ea565b61055689601c6148ea565b8152613a0f613a046139eb6139e088601b6148ea565b61055689601e6148ea565b61055b6139f989601c6148ea565b6105568a601d6148ea565b61057a8760256148ea565b60408201819052613a2490600160441b61201f565b60408201819052613a3a9061057a8760266148ea565b604082018190528151613a4d919061203a565b60408201819052613a63906105568760056148ea565b60408201528051613a7890600160441b61201f565b808252613a989061055b613a8d8860236148ea565b6105568960246148ea565b80825260208201819052613ab49061057a612f3288601d6148ea565b60208201819052613aca906105568760046148ea565b6020820152805160608201819052613ae79061055b87601e6148ea565b60608201819052613b0b9061057a613b008860256148ea565b61055b8960266148ea565b60608201819052613b21906105568760006148ea565b8160600181815250506000613b4b613b418360200151846040015161203a565b836060015161203a565b9050613b5c816105568860036148ea565b9050613b74613b6c8760246148ea565b61400061201f565b60808301819052613b8a9061055b8860236148ea565b60808301819052613b9d9061400061201f565b60808301819052613bb39061055b88601d6148ea565b60808301819052613bc69061400061201f565b60808301819052613bdc9061055b88601c6148ea565b60808301819052613bef9061400061201f565b60808301819052613c059061055b88601b6148ea565b60808301819052613c1b9061057a88601e6148ea565b60808301819052613c31906105568860056148ea565b6080830152613c44613b6c8760256148ea565b60a08301819052613c5a9061055b8860246148ea565b60a08301819052613c6d9061400061201f565b60a08301819052613c839061055b8860236148ea565b60a08301819052613c969061400061201f565b60a08301819052613cac9061055b88601e6148ea565b60a08301819052613cbf9061400061201f565b60a08301819052613cd59061055b88601d6148ea565b60a08301819052613ceb9061057a8860266148ea565b60a08301819052613d01906105568860006148ea565b60a083018190526080830151600091613d1a919061203a565b9050613d2b816105568960046148ea565b9050613d45613d3b88601d6148ea565b876040015161201f565b60c08401819052613d5e9061055b6131ca8a601c6148ea565b60c08401819052613d7e9061055b613d778a601b6148ea565b895161201f565b60c08401819052613d949061055b8960016148ea565b60c0840181905260e08401819052613db19061057a89601e6148ea565b60c0840152613dc46133d48860236148ea565b610140840152613de3613dd88860266148ea565b61057a89601e6148ea565b610120840152610140830151613e0890613dfd908061201f565b846101400151612055565b610280840152610140830151613e4b90613e4090613e399061055660016000805160206154318339815191526151a1565b600161203a565b84610120015161201f565b6101608401819052613e8290613e7490610556613e698b60026148ea565b6105568c60036148ea565b6105566133608a600a6148ea565b6101a0860152610280830151613ea490613e7490610556613e698b60026148ea565b6101c086015260c0830151613ecc90610556613ec18a60026148ea565b6105568b60036148ea565b6101e08401526000613eec613ee289601e6148ea565b8560e00151612055565b9050613efb61381b828361201f565b6101a0850152613f0f6131e28960256148ea565b6101008501819052613f339061055b613f298b60246148ea565b8a6020015161201f565b6101008501819052613f4d9061055b6131b58b60236148ea565b610100850152613f6c613f618960266148ea565b856101000151612055565b6101008501526000613f8261340e8a60256148ea565b9050613fd8613fb1612e59613e39886101400151600160008051602061543183398151915261055691906151a1565b610556613e39886101000151600160008051602061543183398151915261055691906151a1565b610180860152610100850151613ffd90613ff2908061201f565b866101000151612055565b6101c08601526101808501516140309061401c906105568c60076148ea565b61055661402a8c600a6148ea565b8961201f565b6101e088015261028085015161404f9061401c906105568c60076148ea565b6102008801526101c085015161406e9061401c906105568c60076148ea565b6102208801526101a0850151614089906105568b60076148ea565b6102008601526140a861409d8a60246148ea565b61057a8b601c6148ea565b6102208601526101408501516140e89061340e906140dd90613e399061055660016000805160206154318339815191526151a1565b87610220015161201f565b61024086018190526101e0860151610260870181905261411f9161055b906105566141148e60056148ea565b6105568f60026148ea565b610260860181905260c0860151614143919061055b906105566141148e60006148ea565b610260860181905261020086015161415b919061203a565b6102608601819052614171906136eb908661203a565b6102a0860181905261418b9061055661402a8c600a6148ea565b6102a0860181905287600c6020020152505050505050505050565b61422d60405180610220016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b61424661423b85601b6148ea565b61055b8660026148ea565b815261426161425685601c6148ea565b61055b8660036148ea565b602082015261427f61427485601d6148ea565b61055b8660046148ea565b604082015261429d61429285601e6148ea565b61055b8660056148ea565b606082015280516142cf906142c8906142c1906142ba908061201f565b845161201f565b835161201f565b825161201f565b6080820152602081015161430d90614303906142f9906142ef908061201f565b846020015161201f565b836020015161201f565b826020015161201f565b60a0820152604081015161434b90614341906143379061432d908061201f565b846040015161201f565b836040015161201f565b826040015161201f565b60c082015260608101516143899061437f906143759061436b908061201f565b846060015161201f565b836060015161201f565b826060015161201f565b60e0820152608081015160a08201516143a2919061203a565b61010082015260c081015160e08201516143bc919061203a565b61012082015260a08101516143e0906143d5908061203a565b82610120015161203a565b61014082015260e0810151614404906143f9908061203a565b82610100015161203a565b61016082015261012081015161441a908061203a565b6101e0820181905261443b90614430908061203a565b82610160015161203a565b6101e0820152610100810151614451908061203a565b6101a0820181905261447290614467908061203a565b82610140015161203a565b6101a082018190526101608201516144899161203a565b6101808201526101408101516101e08201516144a5919061203a565b6101c08201526144b9612e5985600b6148ea565b61020082018190526102408401516101808301516144e49261055b916105569061057a8a60236148ea565b8360126020020152614514836013602002015161055b836102000151610556856101a0015161057a8a60246148ea565b8360136020020152614544836014602002015161055b836102000151610556856101c0015161057a8a60256148ea565b8360146020020152614574836015602002015161055b836102000151610556856101e0015161057a8a60266148ea565b836015602002015250505050565b6145df60405180610160016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600060405180608001604052806146157f10dc6e9c006ea38b04b1e03b4bd9490c0d03f98929ca1d7fb56821fd19d3b6e7611fff565b81526020016146437f0c28145b6a44df3e0149b3d0a30b3bb599df9756d4dd9b84a86b38cfb45a740b611fff565b81526020016146707e544b8338791518b2c7645a50392798b21f75bb60e3596170067d00141cac15611fff565b815260200161469e7f222c01175718386f2e2e82eb122789e352e105a3b8fa852613bc534433ee428b611fff565b905290506146bb6146b086601b6148ea565b61055b8760026148ea565b61012083018190526146ef906146e490613e40906146d9908061201f565b85610120015161201f565b83610120015161201f565b82526146fc85601c6148ea565b602083015261470c85601d6148ea565b604083015261471c85601e6148ea565b60608301528151602083015161474491613b419161473a919061203a565b846040015161203a565b608083015261475761311186600c6148ea565b61014083015281516147799061476f90836000610df8565b836080015161203a565b60a08301526147a5846016602002015161055b8461014001516105568660a0015161057a8b60236148ea565b6102c085015260208201516147c09061476f90836001610df8565b60c08301526147ec846017602002015161055b8461014001516105568660c0015161057a8b60246148ea565b6102e085015260408201516148079061476f90836002610df8565b60e0830152614833846018602002015161055b8461014001516105568660e0015161057a8b60256148ea565b610300850152606082015161484e9061476f90836003610df8565b61010083015261487c846019602002015161055b84610140015161055686610100015161057a8b60266148ea565b846019612f94565b60006148918184816107da565b905060015b601a8110156148e3576148d98261055b8684601a81106148b8576148b861518b565b6020020151866148c96001876151a1565b60198110610df857610df861518b565b9150600101614896565b5092915050565b6000828260278111156148ff576148ff61541a565b6028811061490f5761490f61518b565b60200201519392505050565b604051806103c00160405280600081526020016000815260200160008152602001614959604051806040016040528060008152602001600081525090565b815260200161497b604051806040016040528060008152602001600081525090565b815260200161499d604051806040016040528060008152602001600081525090565b81526020016149bf604051806040016040528060008152602001600081525090565b81526020016149e1604051806040016040528060008152602001600081525090565b8152602001614a03604051806040016040528060008152602001600081525090565b8152602001614a25604051806040016040528060008152602001600081525090565b8152602001614a47604051806040016040528060008152602001600081525090565b8152602001614a69604051806040016040528060008152602001600081525090565b8152602001614a8b604051806040016040528060008152602001600081525090565b8152602001614aad604051806040016040528060008152602001600081525090565b8152602001614acf604051806040016040528060008152602001600081525090565b8152602001614af1604051806040016040528060008152602001600081525090565b8152602001614b13604051806040016040528060008152602001600081525090565b8152602001614b35604051806040016040528060008152602001600081525090565b8152602001614b57604051806040016040528060008152602001600081525090565b8152602001614b79604051806040016040528060008152602001600081525090565b8152602001614b9b604051806040016040528060008152602001600081525090565b8152602001614bbd604051806040016040528060008152602001600081525090565b8152602001614bdf604051806040016040528060008152602001600081525090565b8152602001614c01604051806040016040528060008152602001600081525090565b8152602001614c23604051806040016040528060008152602001600081525090565b8152602001614c45604051806040016040528060008152602001600081525090565b8152602001614c67604051806040016040528060008152602001600081525090565b8152602001614c89604051806040016040528060008152602001600081525090565b8152602001614cab604051806040016040528060008152602001600081525090565b8152602001614ccd604051806040016040528060008152602001600081525090565b905290565b604051806101c00160405280614ce6614e76565b8152602001614cf3614e76565b8152602001614d00614e76565b8152602001614d0d614e76565b8152602001614d1a614e76565b8152602001614d27614e76565b8152602001614d34614e76565b8152602001614d41614e76565b8152602001614d4e614fd3565b8152602001614d5b615001565b8152602001614d68615020565b8152602001614d75614edc565b8152602001614d82614e76565b8152602001614ccd614e76565b604051806101000160405280614dd46040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b8152602001614de1614e9e565b8152602001614dee614edc565b8152602001614dfb614edc565b8152602001600081526020016000815260200160008152602001600081525090565b604051806108c001604052806046906020820280368337509192915050565b604051806108c001604052806046905b6040805180820190915260008082526020820152815260200190600190039081614e4c5790505090565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b6040518061032001604052806019906020820280368337509192915050565b6040518061012001604052806009906020820280368337509192915050565b604051806103800160405280601c906020820280368337509192915050565b6040518061052001604052806029906020820280368337509192915050565b60405180610da00160405280606d906020820280368337509192915050565b604051806103a00160405280601d906020820280368337509192915050565b6040518060a001604052806005906020820280368337509192915050565b6040518061010001604052806008906020820280368337509192915050565b604051806103400160405280601a906020820280368337509192915050565b604051806101a00160405280600d906020820280368337509192915050565b604051806103800160405280601c905b614feb614f76565b815260200190600190039081614fe35790505090565b6040518061050001604052806028906020820280368337509192915050565b604051806103600160405280601b905b615038614e76565b8152602001906001900390816150305790505090565b6000806000806040858703121561506457600080fd5b843567ffffffffffffffff81111561507b57600080fd5b8501601f8101871361508c57600080fd5b803567ffffffffffffffff8111156150a357600080fd5b8760208284010111156150b557600080fd5b60209182019550935085013567ffffffffffffffff8111156150d657600080fd5b8501601f810187136150e757600080fd5b803567ffffffffffffffff8111156150fe57600080fd5b8760208260051b840101111561511357600080fd5b949793965060200194505050565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761201957612019615121565b6000808585111561515e57600080fd5b8386111561516b57600080fd5b5050820193919092039150565b8082018082111561201957612019615121565b634e487b7160e01b600052603260045260246000fd5b8181038181111561201957612019615121565b6000600182016151c6576151c6615121565b5060010190565b8035602083101561201957600019602084900360031b1b1692915050565b60008183825b60098110156152105781518352602092830192909101906001016151f1565b5050506101208201905092915050565b634e487b7160e01b600052601260045260246000fd5b60008261524557615245615220565b500490565b60008183825b602981101561526f578151835260209283019290910190600101615250565b5050506105208201905092915050565b60008183825b606d8110156152a4578151835260209283019290910190600101615285565b505050610da08201905092915050565b60008183825b601d8110156152d95781518352602092830192909101906001016152ba565b5050506103a08201905092915050565b60008183825b600581101561530e5781518352602092830192909101906001016152ef565b50505060a08201905092915050565b60008261532c5761532c615220565b500690565b60008161534057615340615121565b506000190190565b6000825160005b81811015615369576020818601810151858301520161534f565b506000920191825250919050565b60006020828403121561538957600080fd5b815180151581146119cf57600080fd5b634e487b7160e01b600052604160045260246000fd5b8151600090829060208501835b828110156153da5781518452602093840193909101906001016153bc565b509195945050505050565b60008183825b600d81101561540a5781518352602092830192909101906001016153eb565b5050506101a08201905092915050565b634e487b7160e01b600052602160045260246000fdfe30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001a26469706673582212208b28977298e7aa7e3647639c559e6668cb131dde83391b6e8ac2cfd8a61a991d64736f6c634300081b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
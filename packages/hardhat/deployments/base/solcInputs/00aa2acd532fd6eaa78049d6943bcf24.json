{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@zk-kit/lean-imt.sol/Constants.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.4;\n\nuint256 constant SNARK_SCALAR_FIELD = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\n"
    },
    "@zk-kit/lean-imt.sol/InternalLeanIMT.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport {PoseidonT3} from \"poseidon-solidity/PoseidonT3.sol\";\nimport {SNARK_SCALAR_FIELD} from \"./Constants.sol\";\n\nstruct LeanIMTData {\n    // Tracks the current number of leaves in the tree.\n    uint256 size;\n    // Represents the current depth of the tree, which can increase as new leaves are inserted.\n    uint256 depth;\n    // A mapping from each level of the tree to the node value of the last even position at that level.\n    // Used for efficient inserts, updates and root calculations.\n    mapping(uint256 => uint256) sideNodes;\n    // A mapping from leaf values to their respective indices in the tree.\n    // This facilitates checks for leaf existence and retrieval of leaf positions.\n    mapping(uint256 => uint256) leaves;\n}\n\nerror WrongSiblingNodes();\nerror LeafGreaterThanSnarkScalarField();\nerror LeafCannotBeZero();\nerror LeafAlreadyExists();\nerror LeafDoesNotExist();\n\n/// @title Lean Incremental binary Merkle tree.\n/// @dev The LeanIMT is an optimized version of the BinaryIMT.\n/// This implementation eliminates the use of zeroes, and make the tree depth dynamic.\n/// When a node doesn't have the right child, instead of using a zero hash as in the BinaryIMT,\n/// the node's value becomes that of its left child. Furthermore, rather than utilizing a static tree depth,\n/// it is updated based on the number of leaves in the tree. This approach\n/// results in the calculation of significantly fewer hashes, making the tree more efficient.\nlibrary InternalLeanIMT {\n    /// @dev Inserts a new leaf into the incremental merkle tree.\n    /// The function ensures that the leaf is valid according to the\n    /// constraints of the tree and then updates the tree's structure accordingly.\n    /// @param self: A storage reference to the 'LeanIMTData' struct.\n    /// @param leaf: The value of the new leaf to be inserted into the tree.\n    /// @return The new hash of the node after the leaf has been inserted.\n    function _insert(LeanIMTData storage self, uint256 leaf) internal returns (uint256) {\n        if (leaf >= SNARK_SCALAR_FIELD) {\n            revert LeafGreaterThanSnarkScalarField();\n        } else if (leaf == 0) {\n            revert LeafCannotBeZero();\n        } else if (_has(self, leaf)) {\n            revert LeafAlreadyExists();\n        }\n\n        uint256 index = self.size;\n\n        // Cache tree depth to optimize gas\n        uint256 treeDepth = self.depth;\n\n        // A new insertion can increase a tree's depth by at most 1,\n        // and only if the number of leaves supported by the current\n        // depth is less than the number of leaves to be supported after insertion.\n        if (2 ** treeDepth < index + 1) {\n            ++treeDepth;\n        }\n\n        self.depth = treeDepth;\n\n        uint256 node = leaf;\n\n        for (uint256 level = 0; level < treeDepth; ) {\n            if ((index >> level) & 1 == 1) {\n                node = PoseidonT3.hash([self.sideNodes[level], node]);\n            } else {\n                self.sideNodes[level] = node;\n            }\n\n            unchecked {\n                ++level;\n            }\n        }\n\n        self.size = ++index;\n\n        self.sideNodes[treeDepth] = node;\n        self.leaves[leaf] = index;\n\n        return node;\n    }\n\n    /// @dev Inserts many leaves into the incremental merkle tree.\n    /// The function ensures that the leaves are valid according to the\n    /// constraints of the tree and then updates the tree's structure accordingly.\n    /// @param self: A storage reference to the 'LeanIMTData' struct.\n    /// @param leaves: The values of the new leaves to be inserted into the tree.\n    /// @return The root after the leaves have been inserted.\n    function _insertMany(LeanIMTData storage self, uint256[] calldata leaves) internal returns (uint256) {\n        // Cache tree size to optimize gas\n        uint256 treeSize = self.size;\n\n        // Check that all the new values are correct to be added.\n        for (uint256 i = 0; i < leaves.length; ) {\n            if (leaves[i] >= SNARK_SCALAR_FIELD) {\n                revert LeafGreaterThanSnarkScalarField();\n            } else if (leaves[i] == 0) {\n                revert LeafCannotBeZero();\n            } else if (_has(self, leaves[i])) {\n                revert LeafAlreadyExists();\n            }\n\n            self.leaves[leaves[i]] = treeSize + 1 + i;\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        // Array to save the nodes that will be used to create the next level of the tree.\n        uint256[] memory currentLevelNewNodes;\n\n        currentLevelNewNodes = leaves;\n\n        // Cache tree depth to optimize gas\n        uint256 treeDepth = self.depth;\n\n        // Calculate the depth of the tree after adding the new values.\n        // Unlike the 'insert' function, we need a while here as\n        // N insertions can increase the tree's depth more than once.\n        while (2 ** treeDepth < treeSize + leaves.length) {\n            ++treeDepth;\n        }\n\n        self.depth = treeDepth;\n\n        // First index to change in every level.\n        uint256 currentLevelStartIndex = treeSize;\n\n        // Size of the level used to create the next level.\n        uint256 currentLevelSize = treeSize + leaves.length;\n\n        // The index where changes begin at the next level.\n        uint256 nextLevelStartIndex = currentLevelStartIndex >> 1;\n\n        // The size of the next level.\n        uint256 nextLevelSize = ((currentLevelSize - 1) >> 1) + 1;\n\n        for (uint256 level = 0; level < treeDepth; ) {\n            // The number of nodes for the new level that will be created,\n            // only the new values, not the entire level.\n            uint256 numberOfNewNodes = nextLevelSize - nextLevelStartIndex;\n            uint256[] memory nextLevelNewNodes = new uint256[](numberOfNewNodes);\n            for (uint256 i = 0; i < numberOfNewNodes; ) {\n                uint256 leftNode;\n\n                // Assign the left node using the saved path or the position in the array.\n                if ((i + nextLevelStartIndex) * 2 < currentLevelStartIndex) {\n                    leftNode = self.sideNodes[level];\n                } else {\n                    leftNode = currentLevelNewNodes[(i + nextLevelStartIndex) * 2 - currentLevelStartIndex];\n                }\n\n                uint256 rightNode;\n\n                // Assign the right node if the value exists.\n                if ((i + nextLevelStartIndex) * 2 + 1 < currentLevelSize) {\n                    rightNode = currentLevelNewNodes[(i + nextLevelStartIndex) * 2 + 1 - currentLevelStartIndex];\n                }\n\n                uint256 parentNode;\n\n                // Assign the parent node.\n                // If it has a right child the result will be the hash(leftNode, rightNode) if not,\n                // it will be the leftNode.\n                if (rightNode != 0) {\n                    parentNode = PoseidonT3.hash([leftNode, rightNode]);\n                } else {\n                    parentNode = leftNode;\n                }\n\n                nextLevelNewNodes[i] = parentNode;\n\n                unchecked {\n                    ++i;\n                }\n            }\n\n            // Update the `sideNodes` variable.\n            // If `currentLevelSize` is odd, the saved value will be the last value of the array\n            // if it is even and there are more than 1 element in `currentLevelNewNodes`, the saved value\n            // will be the value before the last one.\n            // If it is even and there is only one element, there is no need to save anything because\n            // the correct value for this level was already saved before.\n            if (currentLevelSize & 1 == 1) {\n                self.sideNodes[level] = currentLevelNewNodes[currentLevelNewNodes.length - 1];\n            } else if (currentLevelNewNodes.length > 1) {\n                self.sideNodes[level] = currentLevelNewNodes[currentLevelNewNodes.length - 2];\n            }\n\n            currentLevelStartIndex = nextLevelStartIndex;\n\n            // Calculate the next level startIndex value.\n            // It is the position of the parent node which is pos/2.\n            nextLevelStartIndex >>= 1;\n\n            // Update the next array that will be used to calculate the next level.\n            currentLevelNewNodes = nextLevelNewNodes;\n\n            currentLevelSize = nextLevelSize;\n\n            // Calculate the size of the next level.\n            // The size of the next level is (currentLevelSize - 1) / 2 + 1.\n            nextLevelSize = ((nextLevelSize - 1) >> 1) + 1;\n\n            unchecked {\n                ++level;\n            }\n        }\n\n        // Update tree size\n        self.size = treeSize + leaves.length;\n\n        // Update tree root\n        self.sideNodes[treeDepth] = currentLevelNewNodes[0];\n\n        return currentLevelNewNodes[0];\n    }\n\n    /// @dev Updates the value of an existing leaf and recalculates hashes\n    /// to maintain tree integrity.\n    /// @param self: A storage reference to the 'LeanIMTData' struct.\n    /// @param oldLeaf: The value of the leaf that is to be updated.\n    /// @param newLeaf: The new value that will replace the oldLeaf in the tree.\n    /// @param siblingNodes: An array of sibling nodes that are necessary to recalculate the path to the root.\n    /// @return The new hash of the updated node after the leaf has been updated.\n    function _update(\n        LeanIMTData storage self,\n        uint256 oldLeaf,\n        uint256 newLeaf,\n        uint256[] calldata siblingNodes\n    ) internal returns (uint256) {\n        if (newLeaf >= SNARK_SCALAR_FIELD) {\n            revert LeafGreaterThanSnarkScalarField();\n        } else if (!_has(self, oldLeaf)) {\n            revert LeafDoesNotExist();\n        } else if (_has(self, newLeaf)) {\n            revert LeafAlreadyExists();\n        }\n\n        uint256 index = _indexOf(self, oldLeaf);\n        uint256 node = newLeaf;\n        uint256 oldRoot = oldLeaf;\n\n        uint256 lastIndex = self.size - 1;\n        uint256 i = 0;\n\n        // Cache tree depth to optimize gas\n        uint256 treeDepth = self.depth;\n\n        for (uint256 level = 0; level < treeDepth; ) {\n            if ((index >> level) & 1 == 1) {\n                if (siblingNodes[i] >= SNARK_SCALAR_FIELD) {\n                    revert LeafGreaterThanSnarkScalarField();\n                }\n\n                node = PoseidonT3.hash([siblingNodes[i], node]);\n                oldRoot = PoseidonT3.hash([siblingNodes[i], oldRoot]);\n\n                unchecked {\n                    ++i;\n                }\n            } else {\n                if (index >> level != lastIndex >> level) {\n                    if (siblingNodes[i] >= SNARK_SCALAR_FIELD) {\n                        revert LeafGreaterThanSnarkScalarField();\n                    }\n\n                    if (self.sideNodes[level] == oldRoot) {\n                        self.sideNodes[level] = node;\n                    }\n\n                    node = PoseidonT3.hash([node, siblingNodes[i]]);\n                    oldRoot = PoseidonT3.hash([oldRoot, siblingNodes[i]]);\n\n                    unchecked {\n                        ++i;\n                    }\n                } else {\n                    self.sideNodes[level] = node;\n                }\n            }\n\n            unchecked {\n                ++level;\n            }\n        }\n\n        if (oldRoot != _root(self)) {\n            revert WrongSiblingNodes();\n        }\n\n        self.sideNodes[treeDepth] = node;\n\n        if (newLeaf != 0) {\n            self.leaves[newLeaf] = self.leaves[oldLeaf];\n        }\n\n        self.leaves[oldLeaf] = 0;\n\n        return node;\n    }\n\n    /// @dev Removes a leaf from the tree by setting its value to zero.\n    /// This function utilizes the update function to set the leaf's value\n    /// to zero and update the tree's state accordingly.\n    /// @param self: A storage reference to the 'LeanIMTData' struct.\n    /// @param oldLeaf: The value of the leaf to be removed.\n    /// @param siblingNodes: An array of sibling nodes required for updating the path to the root after removal.\n    /// @return The new root hash of the tree after the leaf has been removed.\n    function _remove(\n        LeanIMTData storage self,\n        uint256 oldLeaf,\n        uint256[] calldata siblingNodes\n    ) internal returns (uint256) {\n        return _update(self, oldLeaf, 0, siblingNodes);\n    }\n\n    /// @dev Checks if a leaf exists in the tree.\n    /// @param self: A storage reference to the 'LeanIMTData' struct.\n    /// @param leaf: The value of the leaf to check for existence.\n    /// @return A boolean value indicating whether the leaf exists in the tree.\n    function _has(LeanIMTData storage self, uint256 leaf) internal view returns (bool) {\n        return self.leaves[leaf] != 0;\n    }\n\n    /// @dev Retrieves the index of a given leaf in the tree.\n    /// @param self: A storage reference to the 'LeanIMTData' struct.\n    /// @param leaf: The value of the leaf whose index is to be found.\n    /// @return The index of the specified leaf within the tree. If the leaf is not present, the function\n    /// reverts with a custom error.\n    function _indexOf(LeanIMTData storage self, uint256 leaf) internal view returns (uint256) {\n        if (self.leaves[leaf] == 0) {\n            revert LeafDoesNotExist();\n        }\n\n        return self.leaves[leaf] - 1;\n    }\n\n    /// @dev Retrieves the root of the tree from the 'sideNodes' mapping using the\n    /// current tree depth.\n    /// @param self: A storage reference to the 'LeanIMTData' struct.\n    /// @return The root hash of the tree.\n    function _root(LeanIMTData storage self) internal view returns (uint256) {\n        return self.sideNodes[self.depth];\n    }\n}\n"
    },
    "@zk-kit/lean-imt.sol/LeanIMT.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport {InternalLeanIMT, LeanIMTData} from \"./InternalLeanIMT.sol\";\n\nlibrary LeanIMT {\n    using InternalLeanIMT for *;\n\n    function insert(LeanIMTData storage self, uint256 leaf) public returns (uint256) {\n        return InternalLeanIMT._insert(self, leaf);\n    }\n\n    function insertMany(LeanIMTData storage self, uint256[] calldata leaves) public returns (uint256) {\n        return InternalLeanIMT._insertMany(self, leaves);\n    }\n\n    function update(\n        LeanIMTData storage self,\n        uint256 oldLeaf,\n        uint256 newLeaf,\n        uint256[] calldata siblingNodes\n    ) public returns (uint256) {\n        return InternalLeanIMT._update(self, oldLeaf, newLeaf, siblingNodes);\n    }\n\n    function remove(\n        LeanIMTData storage self,\n        uint256 oldLeaf,\n        uint256[] calldata siblingNodes\n    ) public returns (uint256) {\n        return InternalLeanIMT._remove(self, oldLeaf, siblingNodes);\n    }\n\n    function has(LeanIMTData storage self, uint256 leaf) public view returns (bool) {\n        return InternalLeanIMT._has(self, leaf);\n    }\n\n    function indexOf(LeanIMTData storage self, uint256 leaf) public view returns (uint256) {\n        return InternalLeanIMT._indexOf(self, leaf);\n    }\n\n    function root(LeanIMTData storage self) public view returns (uint256) {\n        return InternalLeanIMT._root(self);\n    }\n}\n"
    },
    "contracts/Verifier.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n// Copyright 2022 Aztec\npragma solidity >=0.8.21;\n\nuint256 constant N = 65536;\nuint256 constant LOG_N = 16;\nuint256 constant NUMBER_OF_PUBLIC_INPUTS = 4;\n\nlibrary HonkVerificationKey {\n    function loadVerificationKey() internal pure returns (Honk.VerificationKey memory) {\n        Honk.VerificationKey memory vk = Honk.VerificationKey({\n            circuitSize: uint256(65536),\n            logCircuitSize: uint256(16),\n            publicInputsSize: uint256(4),\n            ql: Honk.G1Point({\n                x: uint256(0x289bc01445fa4667a47e7c31bd32f98a3cde89f397210db72ecfb8ba8debc721),\n                y: uint256(0x2a2b5bb3fbf5b5db7fb67bbfaea5f3b2b65c2641960d22942e5f34edbf132c6f)\n            }),\n            qr: Honk.G1Point({\n                x: uint256(0x0667987db93a70ac462f2032574d4faef715558177759b0f030d2575110e38a2),\n                y: uint256(0x0e6d558cff6092eb202d7220b0b5acdd77c5e8c5fbe5ca93529da1ba4ab88a63)\n            }),\n            qo: Honk.G1Point({\n                x: uint256(0x1a4783374b8e1286da984e250f7117c703d7d759eeec2290cf75ff3303da323c),\n                y: uint256(0x14ed00618cb70f64a78b5075367897da4522241796b89d03f1a7e517d5a01473)\n            }),\n            q4: Honk.G1Point({\n                x: uint256(0x247a5f4dcd5da54fc4cc1fbf2fef714135bd72cc772be0d1138861825be7b138),\n                y: uint256(0x1281bb3780dc178ba98ac9445afa409b125727a8fb9b95363050b088968f6800)\n            }),\n            qm: Honk.G1Point({\n                x: uint256(0x0e7c8f71103873a611efb9c443b09efd3859513d21de02d80ab196eb12f0d4c6),\n                y: uint256(0x29e3e4a1b6736e10131476bb407004e5ecf26b179432991882820f6f79285725)\n            }),\n            qc: Honk.G1Point({\n                x: uint256(0x10b22b6cc367dbd4ac7fa7f84ebfe41b99d5c7e21d7a0810344fa9c93144f0a3),\n                y: uint256(0x2765e2786d9916dbf73ce7d6a23715bf7cfa476500e01cd339c8ca98078218ae)\n            }),\n            qArith: Honk.G1Point({\n                x: uint256(0x1c869231034e86642f5e2ed94d205f3a86dd6cec7133f8ff8ab1089e8439355b),\n                y: uint256(0x0ea198adb5f6ddb95ce8d85f4df30e36422d530430305fa3e2d6f06d9c2aab7a)\n            }),\n            qDeltaRange: Honk.G1Point({\n                x: uint256(0x0b38b1e2772df277dfa0350e9bbfbebca51881301dce17e696cfad18e51dbc65),\n                y: uint256(0x0a90218270c2fdc5df0e46cdfc2df195ee2a38a03e8f0f99311d080abe5f4e49)\n            }),\n            qElliptic: Honk.G1Point({\n                x: uint256(0x0942a8c0fa84846052c670b62e1da756c2a5e0fd44a5e46a961a6bd52179045a),\n                y: uint256(0x2b944cb0ce32ffb81415a764d62167c40d63e2622fd7ce1df0e8f9acbe803d03)\n            }),\n            qAux: Honk.G1Point({\n                x: uint256(0x2323f93d03add03fb6247f3a439f1ea268416a510d493e834c6b52d562b63033),\n                y: uint256(0x19e7c430853d913c5d09312bd1ea4bf190857ca7d437ce58b6bd355ba07e88c1)\n            }),\n            qLookup: Honk.G1Point({\n                x: uint256(0x304b1f3f6dbf38013e2451e1d3441b59536d30f6f10b2e3d2536666ce5283221),\n                y: uint256(0x276cd8fc9a873e4e071bcba6aff6d9ee4b9bacd691a89401857d9015136a7ef8)\n            }),\n            qPoseidon2External: Honk.G1Point({\n                x: uint256(0x153489639e766c30bca863f2ea89201657ce3323b9d0157c66b23b38e7b08287),\n                y: uint256(0x2e0867c16a2f11b5dfd62f88bc08f7f33558940b8e1394632be20f823911d8d2)\n            }),\n            qPoseidon2Internal: Honk.G1Point({\n                x: uint256(0x0fdcb5db747b6520763b37266d0c0cbe8945ae0117cc24a5a5c7a1dbabf874ca),\n                y: uint256(0x022fae24762750f69a02dde8e1391229245815ea8af2e6b23f134c1dfea5108e)\n            }),\n            s1: Honk.G1Point({\n                x: uint256(0x18d3e11683b0c1c921e8fa9d4bd3b629c3f93b13b72f2afedc90089f8af5fe80),\n                y: uint256(0x19a6ae399fe5434931bd8c593e3a672e9a25147e255477d117d393639e43d350)\n            }),\n            s2: Honk.G1Point({\n                x: uint256(0x0b39afaf77d3ca9c568f137b87631c1cffb1c7137cab43147a383c96ba7adc1b),\n                y: uint256(0x05a4fac9b485fc43f81d4f4fbafd2e42b171104133c10eadcea99b509d9fa649)\n            }),\n            s3: Honk.G1Point({\n                x: uint256(0x22220e411f43fbc5ecf12a8854aaf9d1c0e9683df425cdc7449a437485c3c23f),\n                y: uint256(0x0d69edec69db97c7302887f3eae675a9692e3a1a98766f1aaed3759729678ce0)\n            }),\n            s4: Honk.G1Point({\n                x: uint256(0x0bb72d9d3be7f8e4255500162cd00c4d3b48dae83e0b3ac1b1fbb346c651ce3d),\n                y: uint256(0x024559e9989e23c871963bc1070c7c848aa6f9f3f3f9742ab595363e8f2e66d0)\n            }),\n            t1: Honk.G1Point({\n                x: uint256(0x2cdb329f4ac54a9b2a6bb49f35b27881fa6a6bb06a51e41a3addbc63b92a09f2),\n                y: uint256(0x09de6f6dce6674dfe0bb9a2d33543b23fa70fdaae3e508356ea287353ff56377)\n            }),\n            t2: Honk.G1Point({\n                x: uint256(0x011733a47342be1b62b23b74d39fb6a27677b44284035c618a4cfa6c35918367),\n                y: uint256(0x1b6124ff294c0bbe277c398d606ca94bf37bad466915d4b7b1fcfd2ff798705d)\n            }),\n            t3: Honk.G1Point({\n                x: uint256(0x233834e0140e5ef7e22c8e9c71b60d1f9ad15ec60b1160db943c043c64e5635b),\n                y: uint256(0x2a1e72915741ffdc0d9537378ca015e8943fd1ce6bb8eeb999eb04d9c51b1f4e)\n            }),\n            t4: Honk.G1Point({\n                x: uint256(0x2ae1cb509ce1e6f5a706388238a045046c7d1b3a1c534d8d1cd1165deb1b3a33),\n                y: uint256(0x1f0a2bdf6edefdfa216746a70719395d6c1f362f7bacfdb326d34457994ca6c1)\n            }),\n            id1: Honk.G1Point({\n                x: uint256(0x04d13b1c0e341a923e30ea4da2d1c3d34b1416aa293f122f07aa6fe7301e05f1),\n                y: uint256(0x0495e05d3a988ce9ac980bf9fe14db43ff3cb3395eac9376e5e544acdd8bca10)\n            }),\n            id2: Honk.G1Point({\n                x: uint256(0x2d0f4c891a768d790e4c5b894a1477eba0f2a16d791d921ff1515b565e156d2e),\n                y: uint256(0x19fb56af78c7473e782f00e60ab85b0c4a5e7ee4abe7f356c38590aa64560e2c)\n            }),\n            id3: Honk.G1Point({\n                x: uint256(0x0693c992d7ce560ad9d614d204d98a012e1b139620c121d921b9615a494bc86a),\n                y: uint256(0x045a545d832d4f109a0ddfe3cb7cb6d5d3488dd448aa7521071ef860397c0912)\n            }),\n            id4: Honk.G1Point({\n                x: uint256(0x0656cecfd8cd5b3b88b4af342001bebe2d9f6d4a3b459e1eab3e55b874bb79e4),\n                y: uint256(0x1baf584ecc371569c53c9b05a6ab7141860a01c96bb5a2cc2c442d855d849f81)\n            }),\n            lagrangeFirst: Honk.G1Point({\n                x: uint256(0x0000000000000000000000000000000000000000000000000000000000000001),\n                y: uint256(0x0000000000000000000000000000000000000000000000000000000000000002)\n            }),\n            lagrangeLast: Honk.G1Point({\n                x: uint256(0x0400db363c23b02efe7cda4efaf725385fee64685a57c86ca44efed025dfbbaa),\n                y: uint256(0x24994cd738a7aa135cc20a5e6f9488098d36743559400b42681b959b6a1145bc)\n            })\n        });\n        return vk;\n    }\n}\n\npragma solidity ^0.8.27;\n\ntype Fr is uint256;\n\nusing {add as +} for Fr global;\nusing {sub as -} for Fr global;\nusing {mul as *} for Fr global;\nusing {exp as ^} for Fr global;\nusing {notEqual as !=} for Fr global;\nusing {equal as ==} for Fr global;\n\nuint256 constant MODULUS = 21888242871839275222246405745257275088548364400416034343698204186575808495617; // Prime field order\n\nFr constant MINUS_ONE = Fr.wrap(MODULUS - 1);\n\n// Instantiation\nlibrary FrLib {\n    function from(uint256 value) internal pure returns (Fr) {\n        return Fr.wrap(value % MODULUS);\n    }\n\n    function fromBytes32(bytes32 value) internal pure returns (Fr) {\n        return Fr.wrap(uint256(value) % MODULUS);\n    }\n\n    function toBytes32(Fr value) internal pure returns (bytes32) {\n        return bytes32(Fr.unwrap(value));\n    }\n\n    function invert(Fr value) internal view returns (Fr) {\n        uint256 v = Fr.unwrap(value);\n        uint256 result;\n\n        // Call the modexp precompile to invert in the field\n        assembly {\n            let free := mload(0x40)\n            mstore(free, 0x20)\n            mstore(add(free, 0x20), 0x20)\n            mstore(add(free, 0x40), 0x20)\n            mstore(add(free, 0x60), v)\n            mstore(add(free, 0x80), sub(MODULUS, 2))\n            mstore(add(free, 0xa0), MODULUS)\n            let success := staticcall(gas(), 0x05, free, 0xc0, 0x00, 0x20)\n            if iszero(success) { revert(0, 0) }\n            result := mload(0x00)\n        }\n\n        return Fr.wrap(result);\n    }\n\n    function pow(Fr base, uint256 v) internal view returns (Fr) {\n        uint256 b = Fr.unwrap(base);\n        uint256 result;\n\n        // Call the modexp precompile to invert in the field\n        assembly {\n            let free := mload(0x40)\n            mstore(free, 0x20)\n            mstore(add(free, 0x20), 0x20)\n            mstore(add(free, 0x40), 0x20)\n            mstore(add(free, 0x60), b)\n            mstore(add(free, 0x80), v)\n            mstore(add(free, 0xa0), MODULUS)\n            let success := staticcall(gas(), 0x05, free, 0xc0, 0x00, 0x20)\n            if iszero(success) { revert(0, 0) }\n            result := mload(0x00)\n        }\n\n        return Fr.wrap(result);\n    }\n\n    function div(Fr numerator, Fr denominator) internal view returns (Fr) {\n        return numerator * invert(denominator);\n    }\n\n    function sqr(Fr value) internal pure returns (Fr) {\n        return value * value;\n    }\n\n    function unwrap(Fr value) internal pure returns (uint256) {\n        return Fr.unwrap(value);\n    }\n\n    function neg(Fr value) internal pure returns (Fr) {\n        return Fr.wrap(MODULUS - Fr.unwrap(value));\n    }\n}\n\n// Free functions\nfunction add(Fr a, Fr b) pure returns (Fr) {\n    return Fr.wrap(addmod(Fr.unwrap(a), Fr.unwrap(b), MODULUS));\n}\n\nfunction mul(Fr a, Fr b) pure returns (Fr) {\n    return Fr.wrap(mulmod(Fr.unwrap(a), Fr.unwrap(b), MODULUS));\n}\n\nfunction sub(Fr a, Fr b) pure returns (Fr) {\n    return Fr.wrap(addmod(Fr.unwrap(a), MODULUS - Fr.unwrap(b), MODULUS));\n}\n\nfunction exp(Fr base, Fr exponent) pure returns (Fr) {\n    if (Fr.unwrap(exponent) == 0) return Fr.wrap(1);\n\n    for (uint256 i = 1; i < Fr.unwrap(exponent); i += i) {\n        base = base * base;\n    }\n    return base;\n}\n\nfunction notEqual(Fr a, Fr b) pure returns (bool) {\n    return Fr.unwrap(a) != Fr.unwrap(b);\n}\n\nfunction equal(Fr a, Fr b) pure returns (bool) {\n    return Fr.unwrap(a) == Fr.unwrap(b);\n}\n\nuint256 constant CONST_PROOF_SIZE_LOG_N = 28;\n\nuint256 constant NUMBER_OF_SUBRELATIONS = 26;\nuint256 constant BATCHED_RELATION_PARTIAL_LENGTH = 8;\nuint256 constant NUMBER_OF_ENTITIES = 40;\nuint256 constant NUMBER_UNSHIFTED = 35;\nuint256 constant NUMBER_TO_BE_SHIFTED = 5;\n\n// Alphas are used as relation separators so there should be NUMBER_OF_SUBRELATIONS - 1\nuint256 constant NUMBER_OF_ALPHAS = 25;\n\n// Prime field order\nuint256 constant Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583; // EC group order. F_q\nuint256 constant P = 21888242871839275222246405745257275088548364400416034343698204186575808495617; // Prime field order, F_r\n\n// ENUM FOR WIRES\nenum WIRE {\n    Q_M,\n    Q_C,\n    Q_L,\n    Q_R,\n    Q_O,\n    Q_4,\n    Q_LOOKUP,\n    Q_ARITH,\n    Q_RANGE,\n    Q_ELLIPTIC,\n    Q_AUX,\n    Q_POSEIDON2_EXTERNAL,\n    Q_POSEIDON2_INTERNAL,\n    SIGMA_1,\n    SIGMA_2,\n    SIGMA_3,\n    SIGMA_4,\n    ID_1,\n    ID_2,\n    ID_3,\n    ID_4,\n    TABLE_1,\n    TABLE_2,\n    TABLE_3,\n    TABLE_4,\n    LAGRANGE_FIRST,\n    LAGRANGE_LAST,\n    W_L,\n    W_R,\n    W_O,\n    W_4,\n    Z_PERM,\n    LOOKUP_INVERSES,\n    LOOKUP_READ_COUNTS,\n    LOOKUP_READ_TAGS,\n    W_L_SHIFT,\n    W_R_SHIFT,\n    W_O_SHIFT,\n    W_4_SHIFT,\n    Z_PERM_SHIFT\n}\n\nlibrary Honk {\n    struct G1Point {\n        uint256 x;\n        uint256 y;\n    }\n\n    struct G1ProofPoint {\n        uint256 x_0;\n        uint256 x_1;\n        uint256 y_0;\n        uint256 y_1;\n    }\n\n    struct VerificationKey {\n        // Misc Params\n        uint256 circuitSize;\n        uint256 logCircuitSize;\n        uint256 publicInputsSize;\n        // Selectors\n        G1Point qm;\n        G1Point qc;\n        G1Point ql;\n        G1Point qr;\n        G1Point qo;\n        G1Point q4;\n        G1Point qLookup; // Lookup\n        G1Point qArith; // Arithmetic widget\n        G1Point qDeltaRange; // Delta Range sort\n        G1Point qAux; // Auxillary\n        G1Point qElliptic; // Auxillary\n        G1Point qPoseidon2External;\n        G1Point qPoseidon2Internal;\n        // Copy cnstraints\n        G1Point s1;\n        G1Point s2;\n        G1Point s3;\n        G1Point s4;\n        // Copy identity\n        G1Point id1;\n        G1Point id2;\n        G1Point id3;\n        G1Point id4;\n        // Precomputed lookup table\n        G1Point t1;\n        G1Point t2;\n        G1Point t3;\n        G1Point t4;\n        // Fixed first and last\n        G1Point lagrangeFirst;\n        G1Point lagrangeLast;\n    }\n\n    struct RelationParameters {\n        // challenges\n        Fr eta;\n        Fr etaTwo;\n        Fr etaThree;\n        Fr beta;\n        Fr gamma;\n        // derived\n        Fr publicInputsDelta;\n    }\n\n    struct Proof {\n        // Free wires\n        Honk.G1ProofPoint w1;\n        Honk.G1ProofPoint w2;\n        Honk.G1ProofPoint w3;\n        Honk.G1ProofPoint w4;\n        // Lookup helpers - Permutations\n        Honk.G1ProofPoint zPerm;\n        // Lookup helpers - logup\n        Honk.G1ProofPoint lookupReadCounts;\n        Honk.G1ProofPoint lookupReadTags;\n        Honk.G1ProofPoint lookupInverses;\n        // Sumcheck\n        Fr[BATCHED_RELATION_PARTIAL_LENGTH][CONST_PROOF_SIZE_LOG_N] sumcheckUnivariates;\n        Fr[NUMBER_OF_ENTITIES] sumcheckEvaluations;\n        // Shplemini\n        Honk.G1ProofPoint[CONST_PROOF_SIZE_LOG_N - 1] geminiFoldComms;\n        Fr[CONST_PROOF_SIZE_LOG_N] geminiAEvaluations;\n        Honk.G1ProofPoint shplonkQ;\n        Honk.G1ProofPoint kzgQuotient;\n    }\n}\n\n// Transcript library to generate fiat shamir challenges\nstruct Transcript {\n    // Oink\n    Honk.RelationParameters relationParameters;\n    Fr[NUMBER_OF_ALPHAS] alphas;\n    Fr[CONST_PROOF_SIZE_LOG_N] gateChallenges;\n    // Sumcheck\n    Fr[CONST_PROOF_SIZE_LOG_N] sumCheckUChallenges;\n    // Gemini\n    Fr rho;\n    Fr geminiR;\n    // Shplonk\n    Fr shplonkNu;\n    Fr shplonkZ;\n}\n\nlibrary TranscriptLib {\n    function generateTranscript(\n        Honk.Proof memory proof,\n        bytes32[] calldata publicInputs,\n        uint256 circuitSize,\n        uint256 publicInputsSize,\n        uint256 pubInputsOffset\n    ) internal pure returns (Transcript memory t) {\n        Fr previousChallenge;\n        (t.relationParameters, previousChallenge) = generateRelationParametersChallenges(\n            proof, publicInputs, circuitSize, publicInputsSize, pubInputsOffset, previousChallenge\n        );\n\n        (t.alphas, previousChallenge) = generateAlphaChallenges(previousChallenge, proof);\n\n        (t.gateChallenges, previousChallenge) = generateGateChallenges(previousChallenge);\n\n        (t.sumCheckUChallenges, previousChallenge) = generateSumcheckChallenges(proof, previousChallenge);\n\n        (t.rho, previousChallenge) = generateRhoChallenge(proof, previousChallenge);\n\n        (t.geminiR, previousChallenge) = generateGeminiRChallenge(proof, previousChallenge);\n\n        (t.shplonkNu, previousChallenge) = generateShplonkNuChallenge(proof, previousChallenge);\n\n        (t.shplonkZ, previousChallenge) = generateShplonkZChallenge(proof, previousChallenge);\n\n        return t;\n    }\n\n    function splitChallenge(Fr challenge) internal pure returns (Fr first, Fr second) {\n        uint256 challengeU256 = uint256(Fr.unwrap(challenge));\n        uint256 lo = challengeU256 & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n        uint256 hi = challengeU256 >> 128;\n        first = FrLib.fromBytes32(bytes32(lo));\n        second = FrLib.fromBytes32(bytes32(hi));\n    }\n\n    function generateRelationParametersChallenges(\n        Honk.Proof memory proof,\n        bytes32[] calldata publicInputs,\n        uint256 circuitSize,\n        uint256 publicInputsSize,\n        uint256 pubInputsOffset,\n        Fr previousChallenge\n    ) internal pure returns (Honk.RelationParameters memory rp, Fr nextPreviousChallenge) {\n        (rp.eta, rp.etaTwo, rp.etaThree, previousChallenge) =\n            generateEtaChallenge(proof, publicInputs, circuitSize, publicInputsSize, pubInputsOffset);\n\n        (rp.beta, rp.gamma, nextPreviousChallenge) = generateBetaAndGammaChallenges(previousChallenge, proof);\n    }\n\n    function generateEtaChallenge(\n        Honk.Proof memory proof,\n        bytes32[] calldata publicInputs,\n        uint256 circuitSize,\n        uint256 publicInputsSize,\n        uint256 pubInputsOffset\n    ) internal pure returns (Fr eta, Fr etaTwo, Fr etaThree, Fr previousChallenge) {\n        bytes32[] memory round0 = new bytes32[](3 + publicInputsSize + 12);\n        round0[0] = bytes32(circuitSize);\n        round0[1] = bytes32(publicInputsSize);\n        round0[2] = bytes32(pubInputsOffset);\n        for (uint256 i = 0; i < publicInputsSize; i++) {\n            round0[3 + i] = bytes32(publicInputs[i]);\n        }\n\n        // Create the first challenge\n        // Note: w4 is added to the challenge later on\n        round0[3 + publicInputsSize] = bytes32(proof.w1.x_0);\n        round0[3 + publicInputsSize + 1] = bytes32(proof.w1.x_1);\n        round0[3 + publicInputsSize + 2] = bytes32(proof.w1.y_0);\n        round0[3 + publicInputsSize + 3] = bytes32(proof.w1.y_1);\n        round0[3 + publicInputsSize + 4] = bytes32(proof.w2.x_0);\n        round0[3 + publicInputsSize + 5] = bytes32(proof.w2.x_1);\n        round0[3 + publicInputsSize + 6] = bytes32(proof.w2.y_0);\n        round0[3 + publicInputsSize + 7] = bytes32(proof.w2.y_1);\n        round0[3 + publicInputsSize + 8] = bytes32(proof.w3.x_0);\n        round0[3 + publicInputsSize + 9] = bytes32(proof.w3.x_1);\n        round0[3 + publicInputsSize + 10] = bytes32(proof.w3.y_0);\n        round0[3 + publicInputsSize + 11] = bytes32(proof.w3.y_1);\n\n        previousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(round0)));\n        (eta, etaTwo) = splitChallenge(previousChallenge);\n        previousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(Fr.unwrap(previousChallenge))));\n        Fr unused;\n        (etaThree, unused) = splitChallenge(previousChallenge);\n    }\n\n    function generateBetaAndGammaChallenges(Fr previousChallenge, Honk.Proof memory proof)\n        internal\n        pure\n        returns (Fr beta, Fr gamma, Fr nextPreviousChallenge)\n    {\n        bytes32[13] memory round1;\n        round1[0] = FrLib.toBytes32(previousChallenge);\n        round1[1] = bytes32(proof.lookupReadCounts.x_0);\n        round1[2] = bytes32(proof.lookupReadCounts.x_1);\n        round1[3] = bytes32(proof.lookupReadCounts.y_0);\n        round1[4] = bytes32(proof.lookupReadCounts.y_1);\n        round1[5] = bytes32(proof.lookupReadTags.x_0);\n        round1[6] = bytes32(proof.lookupReadTags.x_1);\n        round1[7] = bytes32(proof.lookupReadTags.y_0);\n        round1[8] = bytes32(proof.lookupReadTags.y_1);\n        round1[9] = bytes32(proof.w4.x_0);\n        round1[10] = bytes32(proof.w4.x_1);\n        round1[11] = bytes32(proof.w4.y_0);\n        round1[12] = bytes32(proof.w4.y_1);\n\n        nextPreviousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(round1)));\n        (beta, gamma) = splitChallenge(nextPreviousChallenge);\n    }\n\n    // Alpha challenges non-linearise the gate contributions\n    function generateAlphaChallenges(Fr previousChallenge, Honk.Proof memory proof)\n        internal\n        pure\n        returns (Fr[NUMBER_OF_ALPHAS] memory alphas, Fr nextPreviousChallenge)\n    {\n        // Generate the original sumcheck alpha 0 by hashing zPerm and zLookup\n        uint256[9] memory alpha0;\n        alpha0[0] = Fr.unwrap(previousChallenge);\n        alpha0[1] = proof.lookupInverses.x_0;\n        alpha0[2] = proof.lookupInverses.x_1;\n        alpha0[3] = proof.lookupInverses.y_0;\n        alpha0[4] = proof.lookupInverses.y_1;\n        alpha0[5] = proof.zPerm.x_0;\n        alpha0[6] = proof.zPerm.x_1;\n        alpha0[7] = proof.zPerm.y_0;\n        alpha0[8] = proof.zPerm.y_1;\n\n        nextPreviousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(alpha0)));\n        (alphas[0], alphas[1]) = splitChallenge(nextPreviousChallenge);\n\n        for (uint256 i = 1; i < NUMBER_OF_ALPHAS / 2; i++) {\n            nextPreviousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(Fr.unwrap(nextPreviousChallenge))));\n            (alphas[2 * i], alphas[2 * i + 1]) = splitChallenge(nextPreviousChallenge);\n        }\n        if (((NUMBER_OF_ALPHAS & 1) == 1) && (NUMBER_OF_ALPHAS > 2)) {\n            nextPreviousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(Fr.unwrap(nextPreviousChallenge))));\n            Fr unused;\n            (alphas[NUMBER_OF_ALPHAS - 1], unused) = splitChallenge(nextPreviousChallenge);\n        }\n    }\n\n    function generateGateChallenges(Fr previousChallenge)\n        internal\n        pure\n        returns (Fr[CONST_PROOF_SIZE_LOG_N] memory gateChallenges, Fr nextPreviousChallenge)\n    {\n        for (uint256 i = 0; i < CONST_PROOF_SIZE_LOG_N; i++) {\n            previousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(Fr.unwrap(previousChallenge))));\n            Fr unused;\n            (gateChallenges[i], unused) = splitChallenge(previousChallenge);\n        }\n        nextPreviousChallenge = previousChallenge;\n    }\n\n    function generateSumcheckChallenges(Honk.Proof memory proof, Fr prevChallenge)\n        internal\n        pure\n        returns (Fr[CONST_PROOF_SIZE_LOG_N] memory sumcheckChallenges, Fr nextPreviousChallenge)\n    {\n        for (uint256 i = 0; i < CONST_PROOF_SIZE_LOG_N; i++) {\n            Fr[BATCHED_RELATION_PARTIAL_LENGTH + 1] memory univariateChal;\n            univariateChal[0] = prevChallenge;\n\n            for (uint256 j = 0; j < BATCHED_RELATION_PARTIAL_LENGTH; j++) {\n                univariateChal[j + 1] = proof.sumcheckUnivariates[i][j];\n            }\n            prevChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(univariateChal)));\n            Fr unused;\n            (sumcheckChallenges[i], unused) = splitChallenge(prevChallenge);\n        }\n        nextPreviousChallenge = prevChallenge;\n    }\n\n    function generateRhoChallenge(Honk.Proof memory proof, Fr prevChallenge)\n        internal\n        pure\n        returns (Fr rho, Fr nextPreviousChallenge)\n    {\n        Fr[NUMBER_OF_ENTITIES + 1] memory rhoChallengeElements;\n        rhoChallengeElements[0] = prevChallenge;\n\n        for (uint256 i = 0; i < NUMBER_OF_ENTITIES; i++) {\n            rhoChallengeElements[i + 1] = proof.sumcheckEvaluations[i];\n        }\n\n        nextPreviousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(rhoChallengeElements)));\n        Fr unused;\n        (rho, unused) = splitChallenge(nextPreviousChallenge);\n    }\n\n    function generateGeminiRChallenge(Honk.Proof memory proof, Fr prevChallenge)\n        internal\n        pure\n        returns (Fr geminiR, Fr nextPreviousChallenge)\n    {\n        uint256[(CONST_PROOF_SIZE_LOG_N - 1) * 4 + 1] memory gR;\n        gR[0] = Fr.unwrap(prevChallenge);\n\n        for (uint256 i = 0; i < CONST_PROOF_SIZE_LOG_N - 1; i++) {\n            gR[1 + i * 4] = proof.geminiFoldComms[i].x_0;\n            gR[2 + i * 4] = proof.geminiFoldComms[i].x_1;\n            gR[3 + i * 4] = proof.geminiFoldComms[i].y_0;\n            gR[4 + i * 4] = proof.geminiFoldComms[i].y_1;\n        }\n\n        nextPreviousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(gR)));\n        Fr unused;\n        (geminiR, unused) = splitChallenge(nextPreviousChallenge);\n    }\n\n    function generateShplonkNuChallenge(Honk.Proof memory proof, Fr prevChallenge)\n        internal\n        pure\n        returns (Fr shplonkNu, Fr nextPreviousChallenge)\n    {\n        uint256[(CONST_PROOF_SIZE_LOG_N) + 1] memory shplonkNuChallengeElements;\n        shplonkNuChallengeElements[0] = Fr.unwrap(prevChallenge);\n\n        for (uint256 i = 0; i < CONST_PROOF_SIZE_LOG_N; i++) {\n            shplonkNuChallengeElements[i + 1] = Fr.unwrap(proof.geminiAEvaluations[i]);\n        }\n\n        nextPreviousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(shplonkNuChallengeElements)));\n        Fr unused;\n        (shplonkNu, unused) = splitChallenge(nextPreviousChallenge);\n    }\n\n    function generateShplonkZChallenge(Honk.Proof memory proof, Fr prevChallenge)\n        internal\n        pure\n        returns (Fr shplonkZ, Fr nextPreviousChallenge)\n    {\n        uint256[5] memory shplonkZChallengeElements;\n        shplonkZChallengeElements[0] = Fr.unwrap(prevChallenge);\n\n        shplonkZChallengeElements[1] = proof.shplonkQ.x_0;\n        shplonkZChallengeElements[2] = proof.shplonkQ.x_1;\n        shplonkZChallengeElements[3] = proof.shplonkQ.y_0;\n        shplonkZChallengeElements[4] = proof.shplonkQ.y_1;\n\n        nextPreviousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(shplonkZChallengeElements)));\n        Fr unused;\n        (shplonkZ, unused) = splitChallenge(nextPreviousChallenge);\n    }\n\n    function loadProof(bytes calldata proof) internal pure returns (Honk.Proof memory p) {\n        // Commitments\n        p.w1 = bytesToG1ProofPoint(proof[0x0:0x80]);\n\n        p.w2 = bytesToG1ProofPoint(proof[0x80:0x100]);\n        p.w3 = bytesToG1ProofPoint(proof[0x100:0x180]);\n\n        // Lookup / Permutation Helper Commitments\n        p.lookupReadCounts = bytesToG1ProofPoint(proof[0x180:0x200]);\n        p.lookupReadTags = bytesToG1ProofPoint(proof[0x200:0x280]);\n        p.w4 = bytesToG1ProofPoint(proof[0x280:0x300]);\n        p.lookupInverses = bytesToG1ProofPoint(proof[0x300:0x380]);\n        p.zPerm = bytesToG1ProofPoint(proof[0x380:0x400]);\n        uint256 boundary = 0x400;\n\n        // Sumcheck univariates\n        for (uint256 i = 0; i < CONST_PROOF_SIZE_LOG_N; i++) {\n            for (uint256 j = 0; j < BATCHED_RELATION_PARTIAL_LENGTH; j++) {\n                p.sumcheckUnivariates[i][j] = bytesToFr(proof[boundary:boundary + 0x20]);\n                boundary += 0x20;\n            }\n        }\n        // Sumcheck evaluations\n        for (uint256 i = 0; i < NUMBER_OF_ENTITIES; i++) {\n            p.sumcheckEvaluations[i] = bytesToFr(proof[boundary:boundary + 0x20]);\n            boundary += 0x20;\n        }\n\n        // Gemini\n        // Read gemini fold univariates\n        for (uint256 i = 0; i < CONST_PROOF_SIZE_LOG_N - 1; i++) {\n            p.geminiFoldComms[i] = bytesToG1ProofPoint(proof[boundary:boundary + 0x80]);\n            boundary += 0x80;\n        }\n\n        // Read gemini a evaluations\n        for (uint256 i = 0; i < CONST_PROOF_SIZE_LOG_N; i++) {\n            p.geminiAEvaluations[i] = bytesToFr(proof[boundary:boundary + 0x20]);\n            boundary += 0x20;\n        }\n\n        // Shplonk\n        p.shplonkQ = bytesToG1ProofPoint(proof[boundary:boundary + 0x80]);\n        boundary = boundary + 0x80;\n        // KZG\n        p.kzgQuotient = bytesToG1ProofPoint(proof[boundary:boundary + 0x80]);\n    }\n}\n\n// Fr utility\n\nfunction bytesToFr(bytes calldata proofSection) pure returns (Fr scalar) {\n    require(proofSection.length == 0x20, \"invalid bytes scalar\");\n    scalar = FrLib.fromBytes32(bytes32(proofSection));\n}\n\n// EC Point utilities\nfunction convertProofPoint(Honk.G1ProofPoint memory input) pure returns (Honk.G1Point memory) {\n    return Honk.G1Point({x: input.x_0 | (input.x_1 << 136), y: input.y_0 | (input.y_1 << 136)});\n}\n\nfunction bytesToG1ProofPoint(bytes calldata proofSection) pure returns (Honk.G1ProofPoint memory point) {\n    require(proofSection.length == 0x80, \"invalid bytes point\");\n    point = Honk.G1ProofPoint({\n        x_0: uint256(bytes32(proofSection[0x00:0x20])),\n        x_1: uint256(bytes32(proofSection[0x20:0x40])),\n        y_0: uint256(bytes32(proofSection[0x40:0x60])),\n        y_1: uint256(bytes32(proofSection[0x60:0x80]))\n    });\n}\n\nfunction negateInplace(Honk.G1Point memory point) pure returns (Honk.G1Point memory) {\n    point.y = (Q - point.y) % Q;\n    return point;\n}\n\nfunction pairing(Honk.G1Point memory rhs, Honk.G1Point memory lhs) view returns (bool) {\n    bytes memory input = abi.encodePacked(\n        rhs.x,\n        rhs.y,\n        // Fixed G1 point\n        uint256(0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2),\n        uint256(0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed),\n        uint256(0x090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b),\n        uint256(0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa),\n        lhs.x,\n        lhs.y,\n        // G1 point from VK\n        uint256(0x260e01b251f6f1c7e7ff4e580791dee8ea51d87a358e038b4efe30fac09383c1),\n        uint256(0x0118c4d5b837bcc2bc89b5b398b5974e9f5944073b32078b7e231fec938883b0),\n        uint256(0x04fc6369f7110fe3d25156c1bb9a72859cf2a04641f99ba4ee413c80da6a5fe4),\n        uint256(0x22febda3c0c0632a56475b4214e5615e11e6dd3f96e6cea2854a87d4dacc5e55)\n    );\n\n    (bool success, bytes memory result) = address(0x08).staticcall(input);\n    bool decodedResult = abi.decode(result, (bool));\n    return success && decodedResult;\n}\n\nlibrary RelationsLib {\n    Fr internal constant GRUMPKIN_CURVE_B_PARAMETER_NEGATED = Fr.wrap(17); // -(-17)\n\n    function accumulateRelationEvaluations(\n        Fr[NUMBER_OF_ENTITIES] memory purportedEvaluations,\n        Honk.RelationParameters memory rp,\n        Fr[NUMBER_OF_ALPHAS] memory alphas,\n        Fr powPartialEval\n    ) internal pure returns (Fr accumulator) {\n        Fr[NUMBER_OF_SUBRELATIONS] memory evaluations;\n\n        // Accumulate all relations in Ultra Honk - each with varying number of subrelations\n        accumulateArithmeticRelation(purportedEvaluations, evaluations, powPartialEval);\n        accumulatePermutationRelation(purportedEvaluations, rp, evaluations, powPartialEval);\n        accumulateLogDerivativeLookupRelation(purportedEvaluations, rp, evaluations, powPartialEval);\n        accumulateDeltaRangeRelation(purportedEvaluations, evaluations, powPartialEval);\n        accumulateEllipticRelation(purportedEvaluations, evaluations, powPartialEval);\n        accumulateAuxillaryRelation(purportedEvaluations, rp, evaluations, powPartialEval);\n        accumulatePoseidonExternalRelation(purportedEvaluations, evaluations, powPartialEval);\n        accumulatePoseidonInternalRelation(purportedEvaluations, evaluations, powPartialEval);\n        // batch the subrelations with the alpha challenges to obtain the full honk relation\n        accumulator = scaleAndBatchSubrelations(evaluations, alphas);\n    }\n\n    /**\n     * Aesthetic helper function that is used to index by enum into proof.sumcheckEvaluations, it avoids\n     * the relation checking code being cluttered with uint256 type casting, which is often a different colour in code\n     * editors, and thus is noisy.\n     */\n    function wire(Fr[NUMBER_OF_ENTITIES] memory p, WIRE _wire) internal pure returns (Fr) {\n        return p[uint256(_wire)];\n    }\n\n    uint256 internal constant NEG_HALF_MODULO_P = 0x183227397098d014dc2822db40c0ac2e9419f4243cdcb848a1f0fac9f8000000;\n    /**\n     * Ultra Arithmetic Relation\n     *\n     */\n\n    function accumulateArithmeticRelation(\n        Fr[NUMBER_OF_ENTITIES] memory p,\n        Fr[NUMBER_OF_SUBRELATIONS] memory evals,\n        Fr domainSep\n    ) internal pure {\n        // Relation 0\n        Fr q_arith = wire(p, WIRE.Q_ARITH);\n        {\n            Fr neg_half = Fr.wrap(NEG_HALF_MODULO_P);\n\n            Fr accum = (q_arith - Fr.wrap(3)) * (wire(p, WIRE.Q_M) * wire(p, WIRE.W_R) * wire(p, WIRE.W_L)) * neg_half;\n            accum = accum + (wire(p, WIRE.Q_L) * wire(p, WIRE.W_L)) + (wire(p, WIRE.Q_R) * wire(p, WIRE.W_R))\n                + (wire(p, WIRE.Q_O) * wire(p, WIRE.W_O)) + (wire(p, WIRE.Q_4) * wire(p, WIRE.W_4)) + wire(p, WIRE.Q_C);\n            accum = accum + (q_arith - Fr.wrap(1)) * wire(p, WIRE.W_4_SHIFT);\n            accum = accum * q_arith;\n            accum = accum * domainSep;\n            evals[0] = accum;\n        }\n\n        // Relation 1\n        {\n            Fr accum = wire(p, WIRE.W_L) + wire(p, WIRE.W_4) - wire(p, WIRE.W_L_SHIFT) + wire(p, WIRE.Q_M);\n            accum = accum * (q_arith - Fr.wrap(2));\n            accum = accum * (q_arith - Fr.wrap(1));\n            accum = accum * q_arith;\n            accum = accum * domainSep;\n            evals[1] = accum;\n        }\n    }\n\n    function accumulatePermutationRelation(\n        Fr[NUMBER_OF_ENTITIES] memory p,\n        Honk.RelationParameters memory rp,\n        Fr[NUMBER_OF_SUBRELATIONS] memory evals,\n        Fr domainSep\n    ) internal pure {\n        Fr grand_product_numerator;\n        Fr grand_product_denominator;\n\n        {\n            Fr num = wire(p, WIRE.W_L) + wire(p, WIRE.ID_1) * rp.beta + rp.gamma;\n            num = num * (wire(p, WIRE.W_R) + wire(p, WIRE.ID_2) * rp.beta + rp.gamma);\n            num = num * (wire(p, WIRE.W_O) + wire(p, WIRE.ID_3) * rp.beta + rp.gamma);\n            num = num * (wire(p, WIRE.W_4) + wire(p, WIRE.ID_4) * rp.beta + rp.gamma);\n\n            grand_product_numerator = num;\n        }\n        {\n            Fr den = wire(p, WIRE.W_L) + wire(p, WIRE.SIGMA_1) * rp.beta + rp.gamma;\n            den = den * (wire(p, WIRE.W_R) + wire(p, WIRE.SIGMA_2) * rp.beta + rp.gamma);\n            den = den * (wire(p, WIRE.W_O) + wire(p, WIRE.SIGMA_3) * rp.beta + rp.gamma);\n            den = den * (wire(p, WIRE.W_4) + wire(p, WIRE.SIGMA_4) * rp.beta + rp.gamma);\n\n            grand_product_denominator = den;\n        }\n\n        // Contribution 2\n        {\n            Fr acc = (wire(p, WIRE.Z_PERM) + wire(p, WIRE.LAGRANGE_FIRST)) * grand_product_numerator;\n\n            acc = acc\n                - (\n                    (wire(p, WIRE.Z_PERM_SHIFT) + (wire(p, WIRE.LAGRANGE_LAST) * rp.publicInputsDelta))\n                        * grand_product_denominator\n                );\n            acc = acc * domainSep;\n            evals[2] = acc;\n        }\n\n        // Contribution 3\n        {\n            Fr acc = (wire(p, WIRE.LAGRANGE_LAST) * wire(p, WIRE.Z_PERM_SHIFT)) * domainSep;\n            evals[3] = acc;\n        }\n    }\n\n    function accumulateLogDerivativeLookupRelation(\n        Fr[NUMBER_OF_ENTITIES] memory p,\n        Honk.RelationParameters memory rp,\n        Fr[NUMBER_OF_SUBRELATIONS] memory evals,\n        Fr domainSep\n    ) internal pure {\n        Fr write_term;\n        Fr read_term;\n\n        // Calculate the write term (the table accumulation)\n        {\n            write_term = wire(p, WIRE.TABLE_1) + rp.gamma + (wire(p, WIRE.TABLE_2) * rp.eta)\n                + (wire(p, WIRE.TABLE_3) * rp.etaTwo) + (wire(p, WIRE.TABLE_4) * rp.etaThree);\n        }\n\n        // Calculate the write term\n        {\n            Fr derived_entry_1 = wire(p, WIRE.W_L) + rp.gamma + (wire(p, WIRE.Q_R) * wire(p, WIRE.W_L_SHIFT));\n            Fr derived_entry_2 = wire(p, WIRE.W_R) + wire(p, WIRE.Q_M) * wire(p, WIRE.W_R_SHIFT);\n            Fr derived_entry_3 = wire(p, WIRE.W_O) + wire(p, WIRE.Q_C) * wire(p, WIRE.W_O_SHIFT);\n\n            read_term = derived_entry_1 + (derived_entry_2 * rp.eta) + (derived_entry_3 * rp.etaTwo)\n                + (wire(p, WIRE.Q_O) * rp.etaThree);\n        }\n\n        Fr read_inverse = wire(p, WIRE.LOOKUP_INVERSES) * write_term;\n        Fr write_inverse = wire(p, WIRE.LOOKUP_INVERSES) * read_term;\n\n        Fr inverse_exists_xor = wire(p, WIRE.LOOKUP_READ_TAGS) + wire(p, WIRE.Q_LOOKUP)\n            - (wire(p, WIRE.LOOKUP_READ_TAGS) * wire(p, WIRE.Q_LOOKUP));\n\n        // Inverse calculated correctly relation\n        Fr accumulatorNone = read_term * write_term * wire(p, WIRE.LOOKUP_INVERSES) - inverse_exists_xor;\n        accumulatorNone = accumulatorNone * domainSep;\n\n        // Inverse\n        Fr accumulatorOne = wire(p, WIRE.Q_LOOKUP) * read_inverse - wire(p, WIRE.LOOKUP_READ_COUNTS) * write_inverse;\n\n        evals[4] = accumulatorNone;\n        evals[5] = accumulatorOne;\n    }\n\n    function accumulateDeltaRangeRelation(\n        Fr[NUMBER_OF_ENTITIES] memory p,\n        Fr[NUMBER_OF_SUBRELATIONS] memory evals,\n        Fr domainSep\n    ) internal pure {\n        Fr minus_one = Fr.wrap(0) - Fr.wrap(1);\n        Fr minus_two = Fr.wrap(0) - Fr.wrap(2);\n        Fr minus_three = Fr.wrap(0) - Fr.wrap(3);\n\n        // Compute wire differences\n        Fr delta_1 = wire(p, WIRE.W_R) - wire(p, WIRE.W_L);\n        Fr delta_2 = wire(p, WIRE.W_O) - wire(p, WIRE.W_R);\n        Fr delta_3 = wire(p, WIRE.W_4) - wire(p, WIRE.W_O);\n        Fr delta_4 = wire(p, WIRE.W_L_SHIFT) - wire(p, WIRE.W_4);\n\n        // Contribution 6\n        {\n            Fr acc = delta_1;\n            acc = acc * (delta_1 + minus_one);\n            acc = acc * (delta_1 + minus_two);\n            acc = acc * (delta_1 + minus_three);\n            acc = acc * wire(p, WIRE.Q_RANGE);\n            acc = acc * domainSep;\n            evals[6] = acc;\n        }\n\n        // Contribution 7\n        {\n            Fr acc = delta_2;\n            acc = acc * (delta_2 + minus_one);\n            acc = acc * (delta_2 + minus_two);\n            acc = acc * (delta_2 + minus_three);\n            acc = acc * wire(p, WIRE.Q_RANGE);\n            acc = acc * domainSep;\n            evals[7] = acc;\n        }\n\n        // Contribution 8\n        {\n            Fr acc = delta_3;\n            acc = acc * (delta_3 + minus_one);\n            acc = acc * (delta_3 + minus_two);\n            acc = acc * (delta_3 + minus_three);\n            acc = acc * wire(p, WIRE.Q_RANGE);\n            acc = acc * domainSep;\n            evals[8] = acc;\n        }\n\n        // Contribution 9\n        {\n            Fr acc = delta_4;\n            acc = acc * (delta_4 + minus_one);\n            acc = acc * (delta_4 + minus_two);\n            acc = acc * (delta_4 + minus_three);\n            acc = acc * wire(p, WIRE.Q_RANGE);\n            acc = acc * domainSep;\n            evals[9] = acc;\n        }\n    }\n\n    struct EllipticParams {\n        // Points\n        Fr x_1;\n        Fr y_1;\n        Fr x_2;\n        Fr y_2;\n        Fr y_3;\n        Fr x_3;\n        // push accumulators into memory\n        Fr x_double_identity;\n    }\n\n    function accumulateEllipticRelation(\n        Fr[NUMBER_OF_ENTITIES] memory p,\n        Fr[NUMBER_OF_SUBRELATIONS] memory evals,\n        Fr domainSep\n    ) internal pure {\n        EllipticParams memory ep;\n        ep.x_1 = wire(p, WIRE.W_R);\n        ep.y_1 = wire(p, WIRE.W_O);\n\n        ep.x_2 = wire(p, WIRE.W_L_SHIFT);\n        ep.y_2 = wire(p, WIRE.W_4_SHIFT);\n        ep.y_3 = wire(p, WIRE.W_O_SHIFT);\n        ep.x_3 = wire(p, WIRE.W_R_SHIFT);\n\n        Fr q_sign = wire(p, WIRE.Q_L);\n        Fr q_is_double = wire(p, WIRE.Q_M);\n\n        // Contribution 10 point addition, x-coordinate check\n        // q_elliptic * (x3 + x2 + x1)(x2 - x1)(x2 - x1) - y2^2 - y1^2 + 2(y2y1)*q_sign = 0\n        Fr x_diff = (ep.x_2 - ep.x_1);\n        Fr y1_sqr = (ep.y_1 * ep.y_1);\n        {\n            // Move to top\n            Fr partialEval = domainSep;\n\n            Fr y2_sqr = (ep.y_2 * ep.y_2);\n            Fr y1y2 = ep.y_1 * ep.y_2 * q_sign;\n            Fr x_add_identity = (ep.x_3 + ep.x_2 + ep.x_1);\n            x_add_identity = x_add_identity * x_diff * x_diff;\n            x_add_identity = x_add_identity - y2_sqr - y1_sqr + y1y2 + y1y2;\n\n            evals[10] = x_add_identity * partialEval * wire(p, WIRE.Q_ELLIPTIC) * (Fr.wrap(1) - q_is_double);\n        }\n\n        // Contribution 11 point addition, x-coordinate check\n        // q_elliptic * (q_sign * y1 + y3)(x2 - x1) + (x3 - x1)(y2 - q_sign * y1) = 0\n        {\n            Fr y1_plus_y3 = ep.y_1 + ep.y_3;\n            Fr y_diff = ep.y_2 * q_sign - ep.y_1;\n            Fr y_add_identity = y1_plus_y3 * x_diff + (ep.x_3 - ep.x_1) * y_diff;\n            evals[11] = y_add_identity * domainSep * wire(p, WIRE.Q_ELLIPTIC) * (Fr.wrap(1) - q_is_double);\n        }\n\n        // Contribution 10 point doubling, x-coordinate check\n        // (x3 + x1 + x1) (4y1*y1) - 9 * x1 * x1 * x1 * x1 = 0\n        // N.B. we're using the equivalence x1*x1*x1 === y1*y1 - curve_b to reduce degree by 1\n        {\n            Fr x_pow_4 = (y1_sqr + GRUMPKIN_CURVE_B_PARAMETER_NEGATED) * ep.x_1;\n            Fr y1_sqr_mul_4 = y1_sqr + y1_sqr;\n            y1_sqr_mul_4 = y1_sqr_mul_4 + y1_sqr_mul_4;\n            Fr x1_pow_4_mul_9 = x_pow_4 * Fr.wrap(9);\n\n            // NOTE: pushed into memory (stack >:'( )\n            ep.x_double_identity = (ep.x_3 + ep.x_1 + ep.x_1) * y1_sqr_mul_4 - x1_pow_4_mul_9;\n\n            Fr acc = ep.x_double_identity * domainSep * wire(p, WIRE.Q_ELLIPTIC) * q_is_double;\n            evals[10] = evals[10] + acc;\n        }\n\n        // Contribution 11 point doubling, y-coordinate check\n        // (y1 + y1) (2y1) - (3 * x1 * x1)(x1 - x3) = 0\n        {\n            Fr x1_sqr_mul_3 = (ep.x_1 + ep.x_1 + ep.x_1) * ep.x_1;\n            Fr y_double_identity = x1_sqr_mul_3 * (ep.x_1 - ep.x_3) - (ep.y_1 + ep.y_1) * (ep.y_1 + ep.y_3);\n            evals[11] = evals[11] + y_double_identity * domainSep * wire(p, WIRE.Q_ELLIPTIC) * q_is_double;\n        }\n    }\n\n    // Constants for the auxiliary relation\n    Fr constant LIMB_SIZE = Fr.wrap(uint256(1) << 68);\n    Fr constant SUBLIMB_SHIFT = Fr.wrap(uint256(1) << 14);\n\n    // Parameters used within the Auxiliary Relation\n    // A struct is used to work around stack too deep. This relation has alot of variables\n    struct AuxParams {\n        Fr limb_subproduct;\n        Fr non_native_field_gate_1;\n        Fr non_native_field_gate_2;\n        Fr non_native_field_gate_3;\n        Fr limb_accumulator_1;\n        Fr limb_accumulator_2;\n        Fr memory_record_check;\n        Fr partial_record_check;\n        Fr next_gate_access_type;\n        Fr record_delta;\n        Fr index_delta;\n        Fr adjacent_values_match_if_adjacent_indices_match;\n        Fr adjacent_values_match_if_adjacent_indices_match_and_next_access_is_a_read_operation;\n        Fr access_check;\n        Fr next_gate_access_type_is_boolean;\n        Fr ROM_consistency_check_identity;\n        Fr RAM_consistency_check_identity;\n        Fr timestamp_delta;\n        Fr RAM_timestamp_check_identity;\n        Fr memory_identity;\n        Fr index_is_monotonically_increasing;\n        Fr auxiliary_identity;\n    }\n\n    function accumulateAuxillaryRelation(\n        Fr[NUMBER_OF_ENTITIES] memory p,\n        Honk.RelationParameters memory rp,\n        Fr[NUMBER_OF_SUBRELATIONS] memory evals,\n        Fr domainSep\n    ) internal pure {\n        AuxParams memory ap;\n\n        /**\n         * Contribution 12\n         * Non native field arithmetic gate 2\n         * deg 4\n         *\n         *             _                                                                               _\n         *            /   _                   _                               _       14                \\\n         * q_2 . q_4 |   (w_1 . w_2) + (w_1 . w_2) + (w_1 . w_4 + w_2 . w_3 - w_3) . 2    - w_3 - w_4   |\n         *            \\_                                                                               _/\n         *\n         *\n         */\n        ap.limb_subproduct = wire(p, WIRE.W_L) * wire(p, WIRE.W_R_SHIFT) + wire(p, WIRE.W_L_SHIFT) * wire(p, WIRE.W_R);\n        ap.non_native_field_gate_2 =\n            (wire(p, WIRE.W_L) * wire(p, WIRE.W_4) + wire(p, WIRE.W_R) * wire(p, WIRE.W_O) - wire(p, WIRE.W_O_SHIFT));\n        ap.non_native_field_gate_2 = ap.non_native_field_gate_2 * LIMB_SIZE;\n        ap.non_native_field_gate_2 = ap.non_native_field_gate_2 - wire(p, WIRE.W_4_SHIFT);\n        ap.non_native_field_gate_2 = ap.non_native_field_gate_2 + ap.limb_subproduct;\n        ap.non_native_field_gate_2 = ap.non_native_field_gate_2 * wire(p, WIRE.Q_4);\n\n        ap.limb_subproduct = ap.limb_subproduct * LIMB_SIZE;\n        ap.limb_subproduct = ap.limb_subproduct + (wire(p, WIRE.W_L_SHIFT) * wire(p, WIRE.W_R_SHIFT));\n        ap.non_native_field_gate_1 = ap.limb_subproduct;\n        ap.non_native_field_gate_1 = ap.non_native_field_gate_1 - (wire(p, WIRE.W_O) + wire(p, WIRE.W_4));\n        ap.non_native_field_gate_1 = ap.non_native_field_gate_1 * wire(p, WIRE.Q_O);\n\n        ap.non_native_field_gate_3 = ap.limb_subproduct;\n        ap.non_native_field_gate_3 = ap.non_native_field_gate_3 + wire(p, WIRE.W_4);\n        ap.non_native_field_gate_3 = ap.non_native_field_gate_3 - (wire(p, WIRE.W_O_SHIFT) + wire(p, WIRE.W_4_SHIFT));\n        ap.non_native_field_gate_3 = ap.non_native_field_gate_3 * wire(p, WIRE.Q_M);\n\n        Fr non_native_field_identity =\n            ap.non_native_field_gate_1 + ap.non_native_field_gate_2 + ap.non_native_field_gate_3;\n        non_native_field_identity = non_native_field_identity * wire(p, WIRE.Q_R);\n\n        // ((((w2' * 2^14 + w1') * 2^14 + w3) * 2^14 + w2) * 2^14 + w1 - w4) * qm\n        // deg 2\n        ap.limb_accumulator_1 = wire(p, WIRE.W_R_SHIFT) * SUBLIMB_SHIFT;\n        ap.limb_accumulator_1 = ap.limb_accumulator_1 + wire(p, WIRE.W_L_SHIFT);\n        ap.limb_accumulator_1 = ap.limb_accumulator_1 * SUBLIMB_SHIFT;\n        ap.limb_accumulator_1 = ap.limb_accumulator_1 + wire(p, WIRE.W_O);\n        ap.limb_accumulator_1 = ap.limb_accumulator_1 * SUBLIMB_SHIFT;\n        ap.limb_accumulator_1 = ap.limb_accumulator_1 + wire(p, WIRE.W_R);\n        ap.limb_accumulator_1 = ap.limb_accumulator_1 * SUBLIMB_SHIFT;\n        ap.limb_accumulator_1 = ap.limb_accumulator_1 + wire(p, WIRE.W_L);\n        ap.limb_accumulator_1 = ap.limb_accumulator_1 - wire(p, WIRE.W_4);\n        ap.limb_accumulator_1 = ap.limb_accumulator_1 * wire(p, WIRE.Q_4);\n\n        // ((((w3' * 2^14 + w2') * 2^14 + w1') * 2^14 + w4) * 2^14 + w3 - w4') * qm\n        // deg 2\n        ap.limb_accumulator_2 = wire(p, WIRE.W_O_SHIFT) * SUBLIMB_SHIFT;\n        ap.limb_accumulator_2 = ap.limb_accumulator_2 + wire(p, WIRE.W_R_SHIFT);\n        ap.limb_accumulator_2 = ap.limb_accumulator_2 * SUBLIMB_SHIFT;\n        ap.limb_accumulator_2 = ap.limb_accumulator_2 + wire(p, WIRE.W_L_SHIFT);\n        ap.limb_accumulator_2 = ap.limb_accumulator_2 * SUBLIMB_SHIFT;\n        ap.limb_accumulator_2 = ap.limb_accumulator_2 + wire(p, WIRE.W_4);\n        ap.limb_accumulator_2 = ap.limb_accumulator_2 * SUBLIMB_SHIFT;\n        ap.limb_accumulator_2 = ap.limb_accumulator_2 + wire(p, WIRE.W_O);\n        ap.limb_accumulator_2 = ap.limb_accumulator_2 - wire(p, WIRE.W_4_SHIFT);\n        ap.limb_accumulator_2 = ap.limb_accumulator_2 * wire(p, WIRE.Q_M);\n\n        Fr limb_accumulator_identity = ap.limb_accumulator_1 + ap.limb_accumulator_2;\n        limb_accumulator_identity = limb_accumulator_identity * wire(p, WIRE.Q_O); //  deg 3\n\n        /**\n         * MEMORY\n         *\n         * A RAM memory record contains a tuple of the following fields:\n         *  * i: `index` of memory cell being accessed\n         *  * t: `timestamp` of memory cell being accessed (used for RAM, set to 0 for ROM)\n         *  * v: `value` of memory cell being accessed\n         *  * a: `access` type of record. read: 0 = read, 1 = write\n         *  * r: `record` of memory cell. record = access + index * eta + timestamp * eta_two + value * eta_three\n         *\n         * A ROM memory record contains a tuple of the following fields:\n         *  * i: `index` of memory cell being accessed\n         *  * v: `value1` of memory cell being accessed (ROM tables can store up to 2 values per index)\n         *  * v2:`value2` of memory cell being accessed (ROM tables can store up to 2 values per index)\n         *  * r: `record` of memory cell. record = index * eta + value2 * eta_two + value1 * eta_three\n         *\n         *  When performing a read/write access, the values of i, t, v, v2, a, r are stored in the following wires +\n         * selectors, depending on whether the gate is a RAM read/write or a ROM read\n         *\n         *  | gate type | i  | v2/t  |  v | a  | r  |\n         *  | --------- | -- | ----- | -- | -- | -- |\n         *  | ROM       | w1 | w2    | w3 | -- | w4 |\n         *  | RAM       | w1 | w2    | w3 | qc | w4 |\n         *\n         * (for accesses where `index` is a circuit constant, it is assumed the circuit will apply a copy constraint on\n         * `w2` to fix its value)\n         *\n         *\n         */\n\n        /**\n         * Memory Record Check\n         * Partial degree: 1\n         * Total degree: 4\n         *\n         * A ROM/ROM access gate can be evaluated with the identity:\n         *\n         * qc + w1 \\eta + w2 \\eta_two + w3 \\eta_three - w4 = 0\n         *\n         * For ROM gates, qc = 0\n         */\n        ap.memory_record_check = wire(p, WIRE.W_O) * rp.etaThree;\n        ap.memory_record_check = ap.memory_record_check + (wire(p, WIRE.W_R) * rp.etaTwo);\n        ap.memory_record_check = ap.memory_record_check + (wire(p, WIRE.W_L) * rp.eta);\n        ap.memory_record_check = ap.memory_record_check + wire(p, WIRE.Q_C);\n        ap.partial_record_check = ap.memory_record_check; // used in RAM consistency check; deg 1 or 4\n        ap.memory_record_check = ap.memory_record_check - wire(p, WIRE.W_4);\n\n        /**\n         * Contribution 13 & 14\n         * ROM Consistency Check\n         * Partial degree: 1\n         * Total degree: 4\n         *\n         * For every ROM read, a set equivalence check is applied between the record witnesses, and a second set of\n         * records that are sorted.\n         *\n         * We apply the following checks for the sorted records:\n         *\n         * 1. w1, w2, w3 correctly map to 'index', 'v1, 'v2' for a given record value at w4\n         * 2. index values for adjacent records are monotonically increasing\n         * 3. if, at gate i, index_i == index_{i + 1}, then value1_i == value1_{i + 1} and value2_i == value2_{i + 1}\n         *\n         */\n        ap.index_delta = wire(p, WIRE.W_L_SHIFT) - wire(p, WIRE.W_L);\n        ap.record_delta = wire(p, WIRE.W_4_SHIFT) - wire(p, WIRE.W_4);\n\n        ap.index_is_monotonically_increasing = ap.index_delta * ap.index_delta - ap.index_delta; // deg 2\n\n        ap.adjacent_values_match_if_adjacent_indices_match = (ap.index_delta * MINUS_ONE + Fr.wrap(1)) * ap.record_delta; // deg 2\n\n        evals[13] = ap.adjacent_values_match_if_adjacent_indices_match * (wire(p, WIRE.Q_L) * wire(p, WIRE.Q_R))\n            * (wire(p, WIRE.Q_AUX) * domainSep); // deg 5\n        evals[14] = ap.index_is_monotonically_increasing * (wire(p, WIRE.Q_L) * wire(p, WIRE.Q_R))\n            * (wire(p, WIRE.Q_AUX) * domainSep); // deg 5\n\n        ap.ROM_consistency_check_identity = ap.memory_record_check * (wire(p, WIRE.Q_L) * wire(p, WIRE.Q_R)); // deg 3 or 7\n\n        /**\n         * Contributions 15,16,17\n         * RAM Consistency Check\n         *\n         * The 'access' type of the record is extracted with the expression `w_4 - ap.partial_record_check`\n         * (i.e. for an honest Prover `w1 * eta + w2 * eta^2 + w3 * eta^3 - w4 = access`.\n         * This is validated by requiring `access` to be boolean\n         *\n         * For two adjacent entries in the sorted list if _both_\n         *  A) index values match\n         *  B) adjacent access value is 0 (i.e. next gate is a READ)\n         * then\n         *  C) both values must match.\n         * The gate boolean check is\n         * (A && B) => C  === !(A && B) || C ===  !A || !B || C\n         *\n         * N.B. it is the responsibility of the circuit writer to ensure that every RAM cell is initialized\n         * with a WRITE operation.\n         */\n        Fr access_type = (wire(p, WIRE.W_4) - ap.partial_record_check); // will be 0 or 1 for honest Prover; deg 1 or 4\n        ap.access_check = access_type * access_type - access_type; // check value is 0 or 1; deg 2 or 8\n\n        ap.next_gate_access_type = wire(p, WIRE.W_O_SHIFT) * rp.etaThree;\n        ap.next_gate_access_type = ap.next_gate_access_type + (wire(p, WIRE.W_R_SHIFT) * rp.etaTwo);\n        ap.next_gate_access_type = ap.next_gate_access_type + (wire(p, WIRE.W_L_SHIFT) * rp.eta);\n        ap.next_gate_access_type = wire(p, WIRE.W_4_SHIFT) - ap.next_gate_access_type;\n\n        Fr value_delta = wire(p, WIRE.W_O_SHIFT) - wire(p, WIRE.W_O);\n        ap.adjacent_values_match_if_adjacent_indices_match_and_next_access_is_a_read_operation = (\n            ap.index_delta * MINUS_ONE + Fr.wrap(1)\n        ) * value_delta * (ap.next_gate_access_type * MINUS_ONE + Fr.wrap(1)); // deg 3 or 6\n\n        // We can't apply the RAM consistency check identity on the final entry in the sorted list (the wires in the\n        // next gate would make the identity fail).  We need to validate that its 'access type' bool is correct. Can't\n        // do  with an arithmetic gate because of the  `eta` factors. We need to check that the *next* gate's access\n        // type is  correct, to cover this edge case\n        // deg 2 or 4\n        ap.next_gate_access_type_is_boolean =\n            ap.next_gate_access_type * ap.next_gate_access_type - ap.next_gate_access_type;\n\n        // Putting it all together...\n        evals[15] = ap.adjacent_values_match_if_adjacent_indices_match_and_next_access_is_a_read_operation\n            * (wire(p, WIRE.Q_ARITH)) * (wire(p, WIRE.Q_AUX) * domainSep); // deg 5 or 8\n        evals[16] = ap.index_is_monotonically_increasing * (wire(p, WIRE.Q_ARITH)) * (wire(p, WIRE.Q_AUX) * domainSep); // deg 4\n        evals[17] = ap.next_gate_access_type_is_boolean * (wire(p, WIRE.Q_ARITH)) * (wire(p, WIRE.Q_AUX) * domainSep); // deg 4 or 6\n\n        ap.RAM_consistency_check_identity = ap.access_check * (wire(p, WIRE.Q_ARITH)); // deg 3 or 9\n\n        /**\n         * RAM Timestamp Consistency Check\n         *\n         * | w1 | w2 | w3 | w4 |\n         * | index | timestamp | timestamp_check | -- |\n         *\n         * Let delta_index = index_{i + 1} - index_{i}\n         *\n         * Iff delta_index == 0, timestamp_check = timestamp_{i + 1} - timestamp_i\n         * Else timestamp_check = 0\n         */\n        ap.timestamp_delta = wire(p, WIRE.W_R_SHIFT) - wire(p, WIRE.W_R);\n        ap.RAM_timestamp_check_identity =\n            (ap.index_delta * MINUS_ONE + Fr.wrap(1)) * ap.timestamp_delta - wire(p, WIRE.W_O); // deg 3\n\n        /**\n         * Complete Contribution 12\n         * The complete RAM/ROM memory identity\n         * Partial degree:\n         */\n        ap.memory_identity = ap.ROM_consistency_check_identity; // deg 3 or 6\n        ap.memory_identity =\n            ap.memory_identity + ap.RAM_timestamp_check_identity * (wire(p, WIRE.Q_4) * wire(p, WIRE.Q_L)); // deg 4\n        ap.memory_identity = ap.memory_identity + ap.memory_record_check * (wire(p, WIRE.Q_M) * wire(p, WIRE.Q_L)); // deg 3 or 6\n        ap.memory_identity = ap.memory_identity + ap.RAM_consistency_check_identity; // deg 3 or 9\n\n        // (deg 3 or 9) + (deg 4) + (deg 3)\n        ap.auxiliary_identity = ap.memory_identity + non_native_field_identity + limb_accumulator_identity;\n        ap.auxiliary_identity = ap.auxiliary_identity * (wire(p, WIRE.Q_AUX) * domainSep); // deg 4 or 10\n        evals[12] = ap.auxiliary_identity;\n    }\n\n    struct PoseidonExternalParams {\n        Fr s1;\n        Fr s2;\n        Fr s3;\n        Fr s4;\n        Fr u1;\n        Fr u2;\n        Fr u3;\n        Fr u4;\n        Fr t0;\n        Fr t1;\n        Fr t2;\n        Fr t3;\n        Fr v1;\n        Fr v2;\n        Fr v3;\n        Fr v4;\n        Fr q_pos_by_scaling;\n    }\n\n    function accumulatePoseidonExternalRelation(\n        Fr[NUMBER_OF_ENTITIES] memory p,\n        Fr[NUMBER_OF_SUBRELATIONS] memory evals,\n        Fr domainSep\n    ) internal pure {\n        PoseidonExternalParams memory ep;\n\n        ep.s1 = wire(p, WIRE.W_L) + wire(p, WIRE.Q_L);\n        ep.s2 = wire(p, WIRE.W_R) + wire(p, WIRE.Q_R);\n        ep.s3 = wire(p, WIRE.W_O) + wire(p, WIRE.Q_O);\n        ep.s4 = wire(p, WIRE.W_4) + wire(p, WIRE.Q_4);\n\n        ep.u1 = ep.s1 * ep.s1 * ep.s1 * ep.s1 * ep.s1;\n        ep.u2 = ep.s2 * ep.s2 * ep.s2 * ep.s2 * ep.s2;\n        ep.u3 = ep.s3 * ep.s3 * ep.s3 * ep.s3 * ep.s3;\n        ep.u4 = ep.s4 * ep.s4 * ep.s4 * ep.s4 * ep.s4;\n        // matrix mul v = M_E * u with 14 additions\n        ep.t0 = ep.u1 + ep.u2; // u_1 + u_2\n        ep.t1 = ep.u3 + ep.u4; // u_3 + u_4\n        ep.t2 = ep.u2 + ep.u2 + ep.t1; // 2u_2\n        // ep.t2 += ep.t1; // 2u_2 + u_3 + u_4\n        ep.t3 = ep.u4 + ep.u4 + ep.t0; // 2u_4\n        // ep.t3 += ep.t0; // u_1 + u_2 + 2u_4\n        ep.v4 = ep.t1 + ep.t1;\n        ep.v4 = ep.v4 + ep.v4 + ep.t3;\n        // ep.v4 += ep.t3; // u_1 + u_2 + 4u_3 + 6u_4\n        ep.v2 = ep.t0 + ep.t0;\n        ep.v2 = ep.v2 + ep.v2 + ep.t2;\n        // ep.v2 += ep.t2; // 4u_1 + 6u_2 + u_3 + u_4\n        ep.v1 = ep.t3 + ep.v2; // 5u_1 + 7u_2 + u_3 + 3u_4\n        ep.v3 = ep.t2 + ep.v4; // u_1 + 3u_2 + 5u_3 + 7u_4\n\n        ep.q_pos_by_scaling = wire(p, WIRE.Q_POSEIDON2_EXTERNAL) * domainSep;\n        evals[18] = evals[18] + ep.q_pos_by_scaling * (ep.v1 - wire(p, WIRE.W_L_SHIFT));\n\n        evals[19] = evals[19] + ep.q_pos_by_scaling * (ep.v2 - wire(p, WIRE.W_R_SHIFT));\n\n        evals[20] = evals[20] + ep.q_pos_by_scaling * (ep.v3 - wire(p, WIRE.W_O_SHIFT));\n\n        evals[21] = evals[21] + ep.q_pos_by_scaling * (ep.v4 - wire(p, WIRE.W_4_SHIFT));\n    }\n\n    struct PoseidonInternalParams {\n        Fr u1;\n        Fr u2;\n        Fr u3;\n        Fr u4;\n        Fr u_sum;\n        Fr v1;\n        Fr v2;\n        Fr v3;\n        Fr v4;\n        Fr s1;\n        Fr q_pos_by_scaling;\n    }\n\n    function accumulatePoseidonInternalRelation(\n        Fr[NUMBER_OF_ENTITIES] memory p,\n        Fr[NUMBER_OF_SUBRELATIONS] memory evals,\n        Fr domainSep\n    ) internal pure {\n        PoseidonInternalParams memory ip;\n\n        Fr[4] memory INTERNAL_MATRIX_DIAGONAL = [\n            FrLib.from(0x10dc6e9c006ea38b04b1e03b4bd9490c0d03f98929ca1d7fb56821fd19d3b6e7),\n            FrLib.from(0x0c28145b6a44df3e0149b3d0a30b3bb599df9756d4dd9b84a86b38cfb45a740b),\n            FrLib.from(0x00544b8338791518b2c7645a50392798b21f75bb60e3596170067d00141cac15),\n            FrLib.from(0x222c01175718386f2e2e82eb122789e352e105a3b8fa852613bc534433ee428b)\n        ];\n\n        // add round constants\n        ip.s1 = wire(p, WIRE.W_L) + wire(p, WIRE.Q_L);\n\n        // apply s-box round\n        ip.u1 = ip.s1 * ip.s1 * ip.s1 * ip.s1 * ip.s1;\n        ip.u2 = wire(p, WIRE.W_R);\n        ip.u3 = wire(p, WIRE.W_O);\n        ip.u4 = wire(p, WIRE.W_4);\n\n        // matrix mul with v = M_I * u 4 muls and 7 additions\n        ip.u_sum = ip.u1 + ip.u2 + ip.u3 + ip.u4;\n\n        ip.q_pos_by_scaling = wire(p, WIRE.Q_POSEIDON2_INTERNAL) * domainSep;\n\n        ip.v1 = ip.u1 * INTERNAL_MATRIX_DIAGONAL[0] + ip.u_sum;\n        evals[22] = evals[22] + ip.q_pos_by_scaling * (ip.v1 - wire(p, WIRE.W_L_SHIFT));\n\n        ip.v2 = ip.u2 * INTERNAL_MATRIX_DIAGONAL[1] + ip.u_sum;\n        evals[23] = evals[23] + ip.q_pos_by_scaling * (ip.v2 - wire(p, WIRE.W_R_SHIFT));\n\n        ip.v3 = ip.u3 * INTERNAL_MATRIX_DIAGONAL[2] + ip.u_sum;\n        evals[24] = evals[24] + ip.q_pos_by_scaling * (ip.v3 - wire(p, WIRE.W_O_SHIFT));\n\n        ip.v4 = ip.u4 * INTERNAL_MATRIX_DIAGONAL[3] + ip.u_sum;\n        evals[25] = evals[25] + ip.q_pos_by_scaling * (ip.v4 - wire(p, WIRE.W_4_SHIFT));\n    }\n\n    function scaleAndBatchSubrelations(\n        Fr[NUMBER_OF_SUBRELATIONS] memory evaluations,\n        Fr[NUMBER_OF_ALPHAS] memory subrelationChallenges\n    ) internal pure returns (Fr accumulator) {\n        accumulator = accumulator + evaluations[0];\n\n        for (uint256 i = 1; i < NUMBER_OF_SUBRELATIONS; ++i) {\n            accumulator = accumulator + evaluations[i] * subrelationChallenges[i - 1];\n        }\n    }\n}\n\nstruct ShpleminiIntermediates {\n    Fr unshiftedScalar;\n    Fr shiftedScalar;\n    // Scalar to be multiplied by [1]₁\n    Fr constantTermAccumulator;\n    // Accumulator for powers of rho\n    Fr batchingChallenge;\n    // Linear combination of multilinear (sumcheck) evaluations and powers of rho\n    Fr batchedEvaluation;\n    // 1/(z - r^{2^i}) for i = 0, ..., logSize, dynamically updated\n    Fr posInvertedDenominator;\n    // 1/(z + r^{2^i}) for i = 0, ..., logSize, dynamically updated\n    Fr negInvertedDenominator;\n    // v^{2i} * 1/(z - r^{2^i})\n    Fr scalingFactorPos;\n    // v^{2i+1} * 1/(z + r^{2^i})\n    Fr scalingFactorNeg;\n}\n// // Fold_i(r^{2^i}) reconstructed by Verifier\n// Fr[CONST_PROOF_SIZE_LOG_N] foldPosEvaluations;\n\nlibrary CommitmentSchemeLib {\n    using FrLib for Fr;\n\n    function computeSquares(Fr r) internal pure returns (Fr[CONST_PROOF_SIZE_LOG_N] memory squares) {\n        squares[0] = r;\n        for (uint256 i = 1; i < CONST_PROOF_SIZE_LOG_N; ++i) {\n            squares[i] = squares[i - 1].sqr();\n        }\n    }\n\n    // Compute the evaluations  A_l(r^{2^l}) for l = 0, ..., m-1\n    function computeFoldPosEvaluations(\n        Fr[CONST_PROOF_SIZE_LOG_N] memory sumcheckUChallenges,\n        Fr batchedEvalAccumulator,\n        Fr[CONST_PROOF_SIZE_LOG_N] memory geminiEvaluations,\n        Fr[CONST_PROOF_SIZE_LOG_N] memory geminiEvalChallengePowers,\n        uint256 logSize\n    ) internal view returns (Fr[CONST_PROOF_SIZE_LOG_N] memory foldPosEvaluations) {\n        for (uint256 i = CONST_PROOF_SIZE_LOG_N; i > 0; --i) {\n            Fr challengePower = geminiEvalChallengePowers[i - 1];\n            Fr u = sumcheckUChallenges[i - 1];\n\n            Fr batchedEvalRoundAcc = (\n                (challengePower * batchedEvalAccumulator * Fr.wrap(2))\n                    - geminiEvaluations[i - 1] * (challengePower * (Fr.wrap(1) - u) - u)\n            );\n            // Divide by the denominator\n            batchedEvalRoundAcc = batchedEvalRoundAcc * (challengePower * (Fr.wrap(1) - u) + u).invert();\n\n            if (i <= logSize) {\n                batchedEvalAccumulator = batchedEvalRoundAcc;\n                foldPosEvaluations[i - 1] = batchedEvalRoundAcc;\n            }\n        }\n    }\n}\n\ninterface IVerifier {\n    function verify(bytes calldata _proof, bytes32[] calldata _publicInputs) external view returns (bool);\n}\n\nabstract contract BaseHonkVerifier is IVerifier {\n    using FrLib for Fr;\n\n    uint256 immutable n;\n    uint256 immutable logN;\n    uint256 immutable numPublicInputs;\n\n    constructor(uint256 _n, uint256 _logN, uint256 _numPublicInputs) {\n        n = _n;\n        logN = _logN;\n        numPublicInputs = _numPublicInputs;\n    }\n\n    error ProofLengthWrong();\n    error PublicInputsLengthWrong();\n    error SumcheckFailed();\n    error ShpleminiFailed();\n\n    // Number of field elements in a ultra honk zero knowledge proof\n    uint256 constant PROOF_SIZE = 440;\n\n    function loadVerificationKey() internal pure virtual returns (Honk.VerificationKey memory);\n\n    function verify(bytes calldata proof, bytes32[] calldata publicInputs) public view override returns (bool) {\n        // Check the received proof is the expected size where each field element is 32 bytes\n        if (proof.length != PROOF_SIZE * 32) {\n            revert ProofLengthWrong();\n        }\n\n        Honk.VerificationKey memory vk = loadVerificationKey();\n        Honk.Proof memory p = TranscriptLib.loadProof(proof);\n\n        if (publicInputs.length != vk.publicInputsSize) {\n            revert PublicInputsLengthWrong();\n        }\n\n        // Generate the fiat shamir challenges for the whole protocol\n        // TODO(https://github.com/AztecProtocol/barretenberg/issues/1281): Add pubInputsOffset to VK or remove entirely.\n        Transcript memory t = TranscriptLib.generateTranscript(\n            p, publicInputs, vk.circuitSize, vk.publicInputsSize, /*pubInputsOffset=*/ 1\n        );\n\n        // Derive public input delta\n        // TODO(https://github.com/AztecProtocol/barretenberg/issues/1281): Add pubInputsOffset to VK or remove entirely.\n        t.relationParameters.publicInputsDelta = computePublicInputDelta(\n            publicInputs, t.relationParameters.beta, t.relationParameters.gamma, /*pubInputsOffset=*/ 1\n        );\n\n        // Sumcheck\n        bool sumcheckVerified = verifySumcheck(p, t);\n        if (!sumcheckVerified) revert SumcheckFailed();\n\n        bool shpleminiVerified = verifyShplemini(p, vk, t);\n        if (!shpleminiVerified) revert ShpleminiFailed();\n\n        return sumcheckVerified && shpleminiVerified; // Boolean condition not required - nice for vanity :)\n    }\n\n    function computePublicInputDelta(bytes32[] memory publicInputs, Fr beta, Fr gamma, uint256 offset)\n        internal\n        view\n        returns (Fr publicInputDelta)\n    {\n        Fr numerator = Fr.wrap(1);\n        Fr denominator = Fr.wrap(1);\n\n        Fr numeratorAcc = gamma + (beta * FrLib.from(n + offset));\n        Fr denominatorAcc = gamma - (beta * FrLib.from(offset + 1));\n\n        {\n            for (uint256 i = 0; i < numPublicInputs; i++) {\n                Fr pubInput = FrLib.fromBytes32(publicInputs[i]);\n\n                numerator = numerator * (numeratorAcc + pubInput);\n                denominator = denominator * (denominatorAcc + pubInput);\n\n                numeratorAcc = numeratorAcc + beta;\n                denominatorAcc = denominatorAcc - beta;\n            }\n        }\n\n        // Fr delta = numerator / denominator; // TOOO: batch invert later?\n        publicInputDelta = FrLib.div(numerator, denominator);\n    }\n\n    function verifySumcheck(Honk.Proof memory proof, Transcript memory tp) internal view returns (bool verified) {\n        Fr roundTarget;\n        Fr powPartialEvaluation = Fr.wrap(1);\n\n        // We perform sumcheck reductions over log n rounds ( the multivariate degree )\n        for (uint256 round; round < logN; ++round) {\n            Fr[BATCHED_RELATION_PARTIAL_LENGTH] memory roundUnivariate = proof.sumcheckUnivariates[round];\n            bool valid = checkSum(roundUnivariate, roundTarget);\n            if (!valid) revert SumcheckFailed();\n\n            Fr roundChallenge = tp.sumCheckUChallenges[round];\n\n            // Update the round target for the next rounf\n            roundTarget = computeNextTargetSum(roundUnivariate, roundChallenge);\n            powPartialEvaluation = partiallyEvaluatePOW(tp.gateChallenges[round], powPartialEvaluation, roundChallenge);\n        }\n\n        // Last round\n        Fr grandHonkRelationSum = RelationsLib.accumulateRelationEvaluations(\n            proof.sumcheckEvaluations, tp.relationParameters, tp.alphas, powPartialEvaluation\n        );\n        verified = (grandHonkRelationSum == roundTarget);\n    }\n\n    function checkSum(Fr[BATCHED_RELATION_PARTIAL_LENGTH] memory roundUnivariate, Fr roundTarget)\n        internal\n        pure\n        returns (bool checked)\n    {\n        Fr totalSum = roundUnivariate[0] + roundUnivariate[1];\n        checked = totalSum == roundTarget;\n    }\n\n    // Return the new target sum for the next sumcheck round\n    function computeNextTargetSum(Fr[BATCHED_RELATION_PARTIAL_LENGTH] memory roundUnivariates, Fr roundChallenge)\n        internal\n        view\n        returns (Fr targetSum)\n    {\n        // TODO: inline\n        Fr[BATCHED_RELATION_PARTIAL_LENGTH] memory BARYCENTRIC_LAGRANGE_DENOMINATORS = [\n            Fr.wrap(0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efffec51),\n            Fr.wrap(0x00000000000000000000000000000000000000000000000000000000000002d0),\n            Fr.wrap(0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efffff11),\n            Fr.wrap(0x0000000000000000000000000000000000000000000000000000000000000090),\n            Fr.wrap(0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efffff71),\n            Fr.wrap(0x00000000000000000000000000000000000000000000000000000000000000f0),\n            Fr.wrap(0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593effffd31),\n            Fr.wrap(0x00000000000000000000000000000000000000000000000000000000000013b0)\n        ];\n\n        // To compute the next target sum, we evaluate the given univariate at a point u (challenge).\n\n        // Performing Barycentric evaluations\n        // Compute B(x)\n        Fr numeratorValue = Fr.wrap(1);\n        for (uint256 i = 0; i < BATCHED_RELATION_PARTIAL_LENGTH; ++i) {\n            numeratorValue = numeratorValue * (roundChallenge - Fr.wrap(i));\n        }\n\n        // Calculate domain size N of inverses\n        Fr[BATCHED_RELATION_PARTIAL_LENGTH] memory denominatorInverses;\n        for (uint256 i = 0; i < BATCHED_RELATION_PARTIAL_LENGTH; ++i) {\n            Fr inv = BARYCENTRIC_LAGRANGE_DENOMINATORS[i];\n            inv = inv * (roundChallenge - Fr.wrap(i));\n            inv = FrLib.invert(inv);\n            denominatorInverses[i] = inv;\n        }\n\n        for (uint256 i = 0; i < BATCHED_RELATION_PARTIAL_LENGTH; ++i) {\n            Fr term = roundUnivariates[i];\n            term = term * denominatorInverses[i];\n            targetSum = targetSum + term;\n        }\n\n        // Scale the sum by the value of B(x)\n        targetSum = targetSum * numeratorValue;\n    }\n\n    // Univariate evaluation of the monomial ((1-X_l) + X_l.B_l) at the challenge point X_l=u_l\n    function partiallyEvaluatePOW(Fr gateChallenge, Fr currentEvaluation, Fr roundChallenge)\n        internal\n        pure\n        returns (Fr newEvaluation)\n    {\n        Fr univariateEval = Fr.wrap(1) + (roundChallenge * (gateChallenge - Fr.wrap(1)));\n        newEvaluation = currentEvaluation * univariateEval;\n    }\n\n    function verifyShplemini(Honk.Proof memory proof, Honk.VerificationKey memory vk, Transcript memory tp)\n        internal\n        view\n        returns (bool verified)\n    {\n        ShpleminiIntermediates memory mem; // stack\n\n        // - Compute vector (r, r², ... , r²⁽ⁿ⁻¹⁾), where n = log_circuit_size\n        Fr[CONST_PROOF_SIZE_LOG_N] memory powers_of_evaluation_challenge =\n            CommitmentSchemeLib.computeSquares(tp.geminiR);\n\n        // Arrays hold values that will be linearly combined for the gemini and shplonk batch openings\n        Fr[NUMBER_OF_ENTITIES + CONST_PROOF_SIZE_LOG_N + 2] memory scalars;\n        Honk.G1Point[NUMBER_OF_ENTITIES + CONST_PROOF_SIZE_LOG_N + 2] memory commitments;\n\n        mem.posInvertedDenominator = (tp.shplonkZ - powers_of_evaluation_challenge[0]).invert();\n        mem.negInvertedDenominator = (tp.shplonkZ + powers_of_evaluation_challenge[0]).invert();\n\n        mem.unshiftedScalar = mem.posInvertedDenominator + (tp.shplonkNu * mem.negInvertedDenominator);\n        mem.shiftedScalar =\n            tp.geminiR.invert() * (mem.posInvertedDenominator - (tp.shplonkNu * mem.negInvertedDenominator));\n\n        scalars[0] = Fr.wrap(1);\n        commitments[0] = convertProofPoint(proof.shplonkQ);\n\n        mem.batchingChallenge = Fr.wrap(1);\n        mem.batchedEvaluation = Fr.wrap(0);\n\n        for (uint256 i = 1; i <= NUMBER_UNSHIFTED; ++i) {\n            scalars[i] = mem.unshiftedScalar.neg() * mem.batchingChallenge;\n            mem.batchedEvaluation = mem.batchedEvaluation + (proof.sumcheckEvaluations[i - 1] * mem.batchingChallenge);\n            mem.batchingChallenge = mem.batchingChallenge * tp.rho;\n        }\n        // g commitments are accumulated at r\n        for (uint256 i = NUMBER_UNSHIFTED + 1; i <= NUMBER_OF_ENTITIES; ++i) {\n            scalars[i] = mem.shiftedScalar.neg() * mem.batchingChallenge;\n            mem.batchedEvaluation = mem.batchedEvaluation + (proof.sumcheckEvaluations[i - 1] * mem.batchingChallenge);\n            mem.batchingChallenge = mem.batchingChallenge * tp.rho;\n        }\n\n        commitments[1] = vk.qm;\n        commitments[2] = vk.qc;\n        commitments[3] = vk.ql;\n        commitments[4] = vk.qr;\n        commitments[5] = vk.qo;\n        commitments[6] = vk.q4;\n        commitments[7] = vk.qLookup;\n        commitments[8] = vk.qArith;\n        commitments[9] = vk.qDeltaRange;\n        commitments[10] = vk.qElliptic;\n        commitments[11] = vk.qAux;\n        commitments[12] = vk.qPoseidon2External;\n        commitments[13] = vk.qPoseidon2Internal;\n        commitments[14] = vk.s1;\n        commitments[15] = vk.s2;\n        commitments[16] = vk.s3;\n        commitments[17] = vk.s4;\n        commitments[18] = vk.id1;\n        commitments[19] = vk.id2;\n        commitments[20] = vk.id3;\n        commitments[21] = vk.id4;\n        commitments[22] = vk.t1;\n        commitments[23] = vk.t2;\n        commitments[24] = vk.t3;\n        commitments[25] = vk.t4;\n        commitments[26] = vk.lagrangeFirst;\n        commitments[27] = vk.lagrangeLast;\n\n        // Accumulate proof points\n        commitments[28] = convertProofPoint(proof.w1);\n        commitments[29] = convertProofPoint(proof.w2);\n        commitments[30] = convertProofPoint(proof.w3);\n        commitments[31] = convertProofPoint(proof.w4);\n        commitments[32] = convertProofPoint(proof.zPerm);\n        commitments[33] = convertProofPoint(proof.lookupInverses);\n        commitments[34] = convertProofPoint(proof.lookupReadCounts);\n        commitments[35] = convertProofPoint(proof.lookupReadTags);\n\n        // to be Shifted\n        commitments[36] = convertProofPoint(proof.w1);\n        commitments[37] = convertProofPoint(proof.w2);\n        commitments[38] = convertProofPoint(proof.w3);\n        commitments[39] = convertProofPoint(proof.w4);\n        commitments[40] = convertProofPoint(proof.zPerm);\n\n        // Add contributions from A₀(r) and A₀(-r) to constant_term_accumulator:\n        // Compute the evaluations A_l(r^{2^l}) for l = 0, ..., logN - 1\n        Fr[CONST_PROOF_SIZE_LOG_N] memory foldPosEvaluations = CommitmentSchemeLib.computeFoldPosEvaluations(\n            tp.sumCheckUChallenges,\n            mem.batchedEvaluation,\n            proof.geminiAEvaluations,\n            powers_of_evaluation_challenge,\n            logN\n        );\n\n        // Compute the Shplonk constant term contributions from A₀(±r)\n        mem.constantTermAccumulator = foldPosEvaluations[0] * mem.posInvertedDenominator;\n        mem.constantTermAccumulator =\n            mem.constantTermAccumulator + (proof.geminiAEvaluations[0] * tp.shplonkNu * mem.negInvertedDenominator);\n        mem.batchingChallenge = tp.shplonkNu.sqr();\n\n        // Compute Shplonk constant term contributions from Aₗ(±r^{2ˡ}) for l = 1, ..., m-1;\n        // Compute scalar multipliers for each fold commitment\n        for (uint256 i = 0; i < CONST_PROOF_SIZE_LOG_N - 1; ++i) {\n            bool dummy_round = i >= (logN - 1);\n\n            if (!dummy_round) {\n                // Update inverted denominators\n                mem.posInvertedDenominator = (tp.shplonkZ - powers_of_evaluation_challenge[i + 1]).invert();\n                mem.negInvertedDenominator = (tp.shplonkZ + powers_of_evaluation_challenge[i + 1]).invert();\n\n                // Compute the scalar multipliers for Aₗ(± r^{2ˡ}) and [Aₗ]\n                mem.scalingFactorPos = mem.batchingChallenge * mem.posInvertedDenominator;\n                mem.scalingFactorNeg = mem.batchingChallenge * tp.shplonkNu * mem.negInvertedDenominator;\n                // [Aₗ] is multiplied by -v^{2l}/(z-r^{2^l}) - v^{2l+1} /(z+ r^{2^l})\n                scalars[NUMBER_OF_ENTITIES + 1 + i] = mem.scalingFactorNeg.neg() + mem.scalingFactorPos.neg();\n\n                // Accumulate the const term contribution given by\n                // v^{2l} * Aₗ(r^{2ˡ}) /(z-r^{2^l}) + v^{2l+1} * Aₗ(-r^{2ˡ}) /(z+ r^{2^l})\n                Fr accumContribution = mem.scalingFactorNeg * proof.geminiAEvaluations[i + 1];\n                accumContribution = accumContribution + mem.scalingFactorPos * foldPosEvaluations[i + 1];\n                mem.constantTermAccumulator = mem.constantTermAccumulator + accumContribution;\n                // Update the running power of v\n                mem.batchingChallenge = mem.batchingChallenge * tp.shplonkNu * tp.shplonkNu;\n            }\n\n            commitments[NUMBER_OF_ENTITIES + 1 + i] = convertProofPoint(proof.geminiFoldComms[i]);\n        }\n\n        // Finalise the batch opening claim\n        commitments[NUMBER_OF_ENTITIES + CONST_PROOF_SIZE_LOG_N] = Honk.G1Point({x: 1, y: 2});\n        scalars[NUMBER_OF_ENTITIES + CONST_PROOF_SIZE_LOG_N] = mem.constantTermAccumulator;\n\n        Honk.G1Point memory quotient_commitment = convertProofPoint(proof.kzgQuotient);\n\n        commitments[NUMBER_OF_ENTITIES + CONST_PROOF_SIZE_LOG_N + 1] = quotient_commitment;\n        scalars[NUMBER_OF_ENTITIES + CONST_PROOF_SIZE_LOG_N + 1] = tp.shplonkZ; // evaluation challenge\n\n        Honk.G1Point memory P_0 = batchMul(commitments, scalars);\n        Honk.G1Point memory P_1 = negateInplace(quotient_commitment);\n\n        return pairing(P_0, P_1);\n    }\n\n    // This implementation is the same as above with different constants\n    function batchMul(\n        Honk.G1Point[NUMBER_OF_ENTITIES + CONST_PROOF_SIZE_LOG_N + 2] memory base,\n        Fr[NUMBER_OF_ENTITIES + CONST_PROOF_SIZE_LOG_N + 2] memory scalars\n    ) internal view returns (Honk.G1Point memory result) {\n        uint256 limit = NUMBER_OF_ENTITIES + CONST_PROOF_SIZE_LOG_N + 2;\n        assembly {\n            let success := 0x01\n            let free := mload(0x40)\n\n            // Write the original into the accumulator\n            // Load into memory for ecMUL, leave offset for eccAdd result\n            // base is an array of pointers, so we have to dereference them\n            mstore(add(free, 0x40), mload(mload(base)))\n            mstore(add(free, 0x60), mload(add(0x20, mload(base))))\n            // Add scalar\n            mstore(add(free, 0x80), mload(scalars))\n            success := and(success, staticcall(gas(), 7, add(free, 0x40), 0x60, free, 0x40))\n\n            let count := 0x01\n            for {} lt(count, limit) { count := add(count, 1) } {\n                // Get loop offsets\n                let base_base := add(base, mul(count, 0x20))\n                let scalar_base := add(scalars, mul(count, 0x20))\n\n                mstore(add(free, 0x40), mload(mload(base_base)))\n                mstore(add(free, 0x60), mload(add(0x20, mload(base_base))))\n                // Add scalar\n                mstore(add(free, 0x80), mload(scalar_base))\n\n                success := and(success, staticcall(gas(), 7, add(free, 0x40), 0x60, add(free, 0x40), 0x40))\n                // accumulator = accumulator + accumulator_2\n                success := and(success, staticcall(gas(), 6, free, 0x80, free, 0x40))\n            }\n\n            // Return the result - i hate this\n            mstore(result, mload(free))\n            mstore(add(result, 0x20), mload(add(free, 0x20)))\n        }\n    }\n}\n\ncontract HonkVerifier is BaseHonkVerifier(N, LOG_N, NUMBER_OF_PUBLIC_INPUTS) {\n    function loadVerificationKey() internal pure override returns (Honk.VerificationKey memory) {\n        return HonkVerificationKey.loadVerificationKey();\n    }\n}\n"
    },
    "contracts/Voting.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport {LeanIMT, LeanIMTData} from \"@zk-kit/lean-imt.sol/LeanIMT.sol\";\n\nimport {IVerifier} from \"./Verifier.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract Voting is Ownable {\n    using LeanIMT for LeanIMTData;\n\n    uint256 constant MODULUS = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\n\n    IVerifier public immutable i_verifier;\n    string public question;\n\n    // so that not 2 times the same commitment can be inserted\n    mapping(uint256 => bool) public s_commitments;\n    // so that the proof cannot be replayed - and a person can only vote once\n    mapping(bytes32 => bool) public s_nullifierHashes;\n    mapping(address => bool) public s_voters;\n\n    LeanIMTData public tree;\n    // TODO: change to question\n    uint256 public yesVotes;\n    uint256 public noVotes;\n\n    event NewLeaf(uint256 index, uint256 value);\n    event VoteCast(\n        bytes32 indexed nullifierHash,\n        address indexed voter,\n        bool vote,\n        uint256 timestamp,\n        uint256 totalYes,\n        uint256 totalNo\n    );\n\n    error Voting__CommitmentAlreadyAdded(uint256 commitment);\n    error Voting__NullifierHashAlreadyUsed(bytes32 nullifierHash);\n    error Voting__InvalidProof();\n    error Voting__NotAllowedToVote();\n\n    constructor(IVerifier _verifier, string memory _question) Ownable(msg.sender) {\n        i_verifier = _verifier;\n        question = _question;\n    }\n\n    function addVoters(address[] calldata voters, bool[] calldata statuses) public onlyOwner {\n        require(voters.length == statuses.length, \"Voters and statuses length mismatch\");\n\n        for (uint256 i = 0; i < voters.length; i++) {\n            s_voters[voters[i]] = statuses[i];\n        }\n    }\n\n    function insert(uint256 _commitment) public {\n        // if (!s_voters[msg.sender]) {\n        //     revert Voting__NotAllowedToVote();\n        // }\n        if (s_commitments[_commitment]) {\n            revert Voting__CommitmentAlreadyAdded(_commitment);\n        }\n        s_commitments[_commitment] = true;\n        tree.insert(_commitment);\n        emit NewLeaf(tree.size - 1, _commitment);\n    }\n\n    // TODO: change to vote\n    function vote(bytes memory _proof, bytes32 _root, bytes32 _nullifierHash, bytes32 _vote, bytes32 _depth) public {\n        if (s_nullifierHashes[_nullifierHash]) {\n            revert Voting__NullifierHashAlreadyUsed(_nullifierHash);\n        }\n        s_nullifierHashes[_nullifierHash] = true;\n\n        bytes32[] memory publicInputs = new bytes32[](4);\n        publicInputs[0] = _root;\n        publicInputs[1] = _nullifierHash;\n        publicInputs[2] = _vote;\n        publicInputs[3] = _depth;\n\n        if (!i_verifier.verify(_proof, publicInputs)) {\n            revert Voting__InvalidProof();\n        }\n\n        if (_vote == bytes32(uint256(1))) {\n            yesVotes++;\n        } else {\n            noVotes++;\n        }\n\n        emit VoteCast(_nullifierHash, msg.sender, _vote == bytes32(uint256(1)), block.timestamp, yesVotes, noVotes);\n    }\n\n    // getters\n\n    function getLeaf(uint256 index) public view returns (uint256) {\n        return tree.leaves[index];\n    }\n\n    function getNode(uint256 index) public view returns (uint256) {\n        return tree.sideNodes[index];\n    }\n\n    function getSize() public view returns (uint256) {\n        return tree.size;\n    }\n\n    function getDepth() public view returns (uint256) {\n        return tree.depth;\n    }\n\n    function getRoot() public view returns (uint256) {\n        return tree.root();\n    }\n}\n"
    },
    "contracts/VotingFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.27;\n\nimport {Voting} from \"./Voting.sol\";\nimport {IVerifier} from \"./Verifier.sol\";\n\n/// @title VotingFactory\n/// @notice Deploys new Voting instances and tracks them\ncontract VotingFactory {\n    /// @notice Global verifier used by all Voting instances\n    IVerifier public immutable verifier;\n\n    /// @notice List of all Voting contract addresses created by this factory\n    // TODO: remove -- and use events instead\n    address[] public allVotings;\n\n    /// @notice Mapping from creator address to their deployed Voting contracts\n    mapping(address => address[]) private creatorToVotings;\n\n    /// @dev Emitted when a new Voting is created\n    event VotingCreated(address indexed creator, address indexed voting, string question);\n\n    constructor(IVerifier _verifier) {\n        verifier = _verifier;\n    }\n\n    /// @notice Creates a new Voting instance\n    /// @param _question The human-readable question for this vote\n    /// @return voting The address of the newly created Voting contract\n    function createVoting(string calldata _question) external returns (address voting) {\n        Voting instance = new Voting(verifier, _question);\n\n        instance.transferOwnership(msg.sender);\n\n        voting = address(instance);\n        allVotings.push(voting);\n        creatorToVotings[msg.sender].push(voting);\n\n        emit VotingCreated(msg.sender, voting, _question);\n    }\n\n    /// @notice Returns the list of Voting contracts created by a specific creator\n    function getVotingsByCreator(address creator) external view returns (address[] memory) {\n        return creatorToVotings[creator];\n    }\n}\n"
    },
    "poseidon-solidity/PoseidonT3.sol": {
      "content": "/// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0;\n\nlibrary PoseidonT3 {\n  uint constant M00 = 0x109b7f411ba0e4c9b2b70caf5c36a7b194be7c11ad24378bfedb68592ba8118b;\n  uint constant M01 = 0x2969f27eed31a480b9c36c764379dbca2cc8fdd1415c3dded62940bcde0bd771;\n  uint constant M02 = 0x143021ec686a3f330d5f9e654638065ce6cd79e28c5b3753326244ee65a1b1a7;\n  uint constant M10 = 0x16ed41e13bb9c0c66ae119424fddbcbc9314dc9fdbdeea55d6c64543dc4903e0;\n  uint constant M11 = 0x2e2419f9ec02ec394c9871c832963dc1b89d743c8c7b964029b2311687b1fe23;\n  uint constant M12 = 0x176cc029695ad02582a70eff08a6fd99d057e12e58e7d7b6b16cdfabc8ee2911;\n\n  // See here for a simplified implementation: https://github.com/vimwitch/poseidon-solidity/blob/e57becdabb65d99fdc586fe1e1e09e7108202d53/contracts/Poseidon.sol#L40\n  // Inspired by: https://github.com/iden3/circomlibjs/blob/v0.0.8/src/poseidon_slow.js\n  function hash(uint[2] memory) public pure returns (uint) {\n    assembly {\n      let F := 21888242871839275222246405745257275088548364400416034343698204186575808495617\n      let M20 := 0x2b90bba00fca0589f617e7dcbfe82e0df706ab640ceb247b791a93b74e36736d\n      let M21 := 0x101071f0032379b697315876690f053d148d4e109f5fb065c8aacc55a0f89bfa\n      let M22 := 0x19a3fc0a56702bf417ba7fee3802593fa644470307043f7773279cd71d25d5e0\n\n      // load the inputs from memory\n      let state1 := add(mod(mload(0x80), F), 0x00f1445235f2148c5986587169fc1bcd887b08d4d00868df5696fff40956e864)\n      let state2 := add(mod(mload(0xa0), F), 0x08dff3487e8ac99e1f29a058d0fa80b930c728730b7ab36ce879f3890ecf73f5)\n      let scratch0 := mulmod(state1, state1, F)\n      state1 := mulmod(mulmod(scratch0, scratch0, F), state1, F)\n      scratch0 := mulmod(state2, state2, F)\n      state2 := mulmod(mulmod(scratch0, scratch0, F), state2, F)\n      scratch0 := add(\n        0x2f27be690fdaee46c3ce28f7532b13c856c35342c84bda6e20966310fadc01d0,\n        add(add(15452833169820924772166449970675545095234312153403844297388521437673434406763, mulmod(state1, M10, F)), mulmod(state2, M20, F))\n      )\n      let scratch1 := add(\n        0x2b2ae1acf68b7b8d2416bebf3d4f6234b763fe04b8043ee48b8327bebca16cf2,\n        add(add(18674271267752038776579386132900109523609358935013267566297499497165104279117, mulmod(state1, M11, F)), mulmod(state2, M21, F))\n      )\n      let scratch2 := add(\n        0x0319d062072bef7ecca5eac06f97d4d55952c175ab6b03eae64b44c7dbf11cfa,\n        add(add(14817777843080276494683266178512808687156649753153012854386334860566696099579, mulmod(state1, M12, F)), mulmod(state2, M22, F))\n      )\n      let state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := mulmod(scratch1, scratch1, F)\n      scratch1 := mulmod(mulmod(state0, state0, F), scratch1, F)\n      state0 := mulmod(scratch2, scratch2, F)\n      scratch2 := mulmod(mulmod(state0, state0, F), scratch2, F)\n      state0 := add(0x28813dcaebaeaa828a376df87af4a63bc8b7bf27ad49c6298ef7b387bf28526d, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x2727673b2ccbc903f181bf38e1c1d40d2033865200c352bc150928adddf9cb78, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x234ec45ca27727c2e74abd2b2a1494cd6efbd43e340587d6b8fb9e31e65cc632, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := mulmod(state1, state1, F)\n      state1 := mulmod(mulmod(scratch0, scratch0, F), state1, F)\n      scratch0 := mulmod(state2, state2, F)\n      state2 := mulmod(mulmod(scratch0, scratch0, F), state2, F)\n      scratch0 := add(0x15b52534031ae18f7f862cb2cf7cf760ab10a8150a337b1ccd99ff6e8797d428, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x0dc8fad6d9e4b35f5ed9a3d186b79ce38e0e8a8d1b58b132d701d4eecf68d1f6, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x1bcd95ffc211fbca600f705fad3fb567ea4eb378f62e1fec97805518a47e4d9c, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := mulmod(scratch1, scratch1, F)\n      scratch1 := mulmod(mulmod(state0, state0, F), scratch1, F)\n      state0 := mulmod(scratch2, scratch2, F)\n      scratch2 := mulmod(mulmod(state0, state0, F), scratch2, F)\n      state0 := add(0x10520b0ab721cadfe9eff81b016fc34dc76da36c2578937817cb978d069de559, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x1f6d48149b8e7f7d9b257d8ed5fbbaf42932498075fed0ace88a9eb81f5627f6, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x1d9655f652309014d29e00ef35a2089bfff8dc1c816f0dc9ca34bdb5460c8705, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x04df5a56ff95bcafb051f7b1cd43a99ba731ff67e47032058fe3d4185697cc7d, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x0672d995f8fff640151b3d290cedaf148690a10a8c8424a7f6ec282b6e4be828, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x099952b414884454b21200d7ffafdd5f0c9a9dcc06f2708e9fc1d8209b5c75b9, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x052cba2255dfd00c7c483143ba8d469448e43586a9b4cd9183fd0e843a6b9fa6, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x0b8badee690adb8eb0bd74712b7999af82de55707251ad7716077cb93c464ddc, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x119b1590f13307af5a1ee651020c07c749c15d60683a8050b963d0a8e4b2bdd1, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x03150b7cd6d5d17b2529d36be0f67b832c4acfc884ef4ee5ce15be0bfb4a8d09, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x2cc6182c5e14546e3cf1951f173912355374efb83d80898abe69cb317c9ea565, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x005032551e6378c450cfe129a404b3764218cadedac14e2b92d2cd73111bf0f9, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x233237e3289baa34bb147e972ebcb9516469c399fcc069fb88f9da2cc28276b5, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x05c8f4f4ebd4a6e3c980d31674bfbe6323037f21b34ae5a4e80c2d4c24d60280, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x0a7b1db13042d396ba05d818a319f25252bcf35ef3aeed91ee1f09b2590fc65b, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x2a73b71f9b210cf5b14296572c9d32dbf156e2b086ff47dc5df542365a404ec0, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x1ac9b0417abcc9a1935107e9ffc91dc3ec18f2c4dbe7f22976a760bb5c50c460, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x12c0339ae08374823fabb076707ef479269f3e4d6cb104349015ee046dc93fc0, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x0b7475b102a165ad7f5b18db4e1e704f52900aa3253baac68246682e56e9a28e, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x037c2849e191ca3edb1c5e49f6e8b8917c843e379366f2ea32ab3aa88d7f8448, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x05a6811f8556f014e92674661e217e9bd5206c5c93a07dc145fdb176a716346f, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x29a795e7d98028946e947b75d54e9f044076e87a7b2883b47b675ef5f38bd66e, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x20439a0c84b322eb45a3857afc18f5826e8c7382c8a1585c507be199981fd22f, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x2e0ba8d94d9ecf4a94ec2050c7371ff1bb50f27799a84b6d4a2a6f2a0982c887, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x143fd115ce08fb27ca38eb7cce822b4517822cd2109048d2e6d0ddcca17d71c8, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x0c64cbecb1c734b857968dbbdcf813cdf8611659323dbcbfc84323623be9caf1, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x028a305847c683f646fca925c163ff5ae74f348d62c2b670f1426cef9403da53, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x2e4ef510ff0b6fda5fa940ab4c4380f26a6bcb64d89427b824d6755b5db9e30c, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x0081c95bc43384e663d79270c956ce3b8925b4f6d033b078b96384f50579400e, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x2ed5f0c91cbd9749187e2fade687e05ee2491b349c039a0bba8a9f4023a0bb38, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x30509991f88da3504bbf374ed5aae2f03448a22c76234c8c990f01f33a735206, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x1c3f20fd55409a53221b7c4d49a356b9f0a1119fb2067b41a7529094424ec6ad, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x10b4e7f3ab5df003049514459b6e18eec46bb2213e8e131e170887b47ddcb96c, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x2a1982979c3ff7f43ddd543d891c2abddd80f804c077d775039aa3502e43adef, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x1c74ee64f15e1db6feddbead56d6d55dba431ebc396c9af95cad0f1315bd5c91, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x07533ec850ba7f98eab9303cace01b4b9e4f2e8b82708cfa9c2fe45a0ae146a0, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x21576b438e500449a151e4eeaf17b154285c68f42d42c1808a11abf3764c0750, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x2f17c0559b8fe79608ad5ca193d62f10bce8384c815f0906743d6930836d4a9e, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x2d477e3862d07708a79e8aae946170bc9775a4201318474ae665b0b1b7e2730e, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x162f5243967064c390e095577984f291afba2266c38f5abcd89be0f5b2747eab, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x2b4cb233ede9ba48264ecd2c8ae50d1ad7a8596a87f29f8a7777a70092393311, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x2c8fbcb2dd8573dc1dbaf8f4622854776db2eece6d85c4cf4254e7c35e03b07a, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x1d6f347725e4816af2ff453f0cd56b199e1b61e9f601e9ade5e88db870949da9, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x204b0c397f4ebe71ebc2d8b3df5b913df9e6ac02b68d31324cd49af5c4565529, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x0c4cb9dc3c4fd8174f1149b3c63c3c2f9ecb827cd7dc25534ff8fb75bc79c502, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x174ad61a1448c899a25416474f4930301e5c49475279e0639a616ddc45bc7b54, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x1a96177bcf4d8d89f759df4ec2f3cde2eaaa28c177cc0fa13a9816d49a38d2ef, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x066d04b24331d71cd0ef8054bc60c4ff05202c126a233c1a8242ace360b8a30a, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x2a4c4fc6ec0b0cf52195782871c6dd3b381cc65f72e02ad527037a62aa1bd804, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x13ab2d136ccf37d447e9f2e14a7cedc95e727f8446f6d9d7e55afc01219fd649, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x1121552fca26061619d24d843dc82769c1b04fcec26f55194c2e3e869acc6a9a, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x00ef653322b13d6c889bc81715c37d77a6cd267d595c4a8909a5546c7c97cff1, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x0e25483e45a665208b261d8ba74051e6400c776d652595d9845aca35d8a397d3, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x29f536dcb9dd7682245264659e15d88e395ac3d4dde92d8c46448db979eeba89, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x2a56ef9f2c53febadfda33575dbdbd885a124e2780bbea170e456baace0fa5be, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x1c8361c78eb5cf5decfb7a2d17b5c409f2ae2999a46762e8ee416240a8cb9af1, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x151aff5f38b20a0fc0473089aaf0206b83e8e68a764507bfd3d0ab4be74319c5, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x04c6187e41ed881dc1b239c88f7f9d43a9f52fc8c8b6cdd1e76e47615b51f100, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x13b37bd80f4d27fb10d84331f6fb6d534b81c61ed15776449e801b7ddc9c2967, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x01a5c536273c2d9df578bfbd32c17b7a2ce3664c2a52032c9321ceb1c4e8a8e4, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x2ab3561834ca73835ad05f5d7acb950b4a9a2c666b9726da832239065b7c3b02, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x1d4d8ec291e720db200fe6d686c0d613acaf6af4e95d3bf69f7ed516a597b646, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x041294d2cc484d228f5784fe7919fd2bb925351240a04b711514c9c80b65af1d, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x154ac98e01708c611c4fa715991f004898f57939d126e392042971dd90e81fc6, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x0b339d8acca7d4f83eedd84093aef51050b3684c88f8b0b04524563bc6ea4da4, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x0955e49e6610c94254a4f84cfbab344598f0e71eaff4a7dd81ed95b50839c82e, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x06746a6156eba54426b9e22206f15abca9a6f41e6f535c6f3525401ea0654626, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x0f18f5a0ecd1423c496f3820c549c27838e5790e2bd0a196ac917c7ff32077fb, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x04f6eeca1751f7308ac59eff5beb261e4bb563583ede7bc92a738223d6f76e13, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x2b56973364c4c4f5c1a3ec4da3cdce038811eb116fb3e45bc1768d26fc0b3758, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x123769dd49d5b054dcd76b89804b1bcb8e1392b385716a5d83feb65d437f29ef, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x2147b424fc48c80a88ee52b91169aacea989f6446471150994257b2fb01c63e9, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x0fdc1f58548b85701a6c5505ea332a29647e6f34ad4243c2ea54ad897cebe54d, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x12373a8251fea004df68abcf0f7786d4bceff28c5dbbe0c3944f685cc0a0b1f2, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x21e4f4ea5f35f85bad7ea52ff742c9e8a642756b6af44203dd8a1f35c1a90035, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x16243916d69d2ca3dfb4722224d4c462b57366492f45e90d8a81934f1bc3b147, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x1efbe46dd7a578b4f66f9adbc88b4378abc21566e1a0453ca13a4159cac04ac2, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x07ea5e8537cf5dd08886020e23a7f387d468d5525be66f853b672cc96a88969a, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x05a8c4f9968b8aa3b7b478a30f9a5b63650f19a75e7ce11ca9fe16c0b76c00bc, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x20f057712cc21654fbfe59bd345e8dac3f7818c701b9c7882d9d57b72a32e83f, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x04a12ededa9dfd689672f8c67fee31636dcd8e88d01d49019bd90b33eb33db69, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x27e88d8c15f37dcee44f1e5425a51decbd136ce5091a6767e49ec9544ccd101a, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x2feed17b84285ed9b8a5c8c5e95a41f66e096619a7703223176c41ee433de4d1, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x1ed7cc76edf45c7c404241420f729cf394e5942911312a0d6972b8bd53aff2b8, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x15742e99b9bfa323157ff8c586f5660eac6783476144cdcadf2874be45466b1a, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x1aac285387f65e82c895fc6887ddf40577107454c6ec0317284f033f27d0c785, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x25851c3c845d4790f9ddadbdb6057357832e2e7a49775f71ec75a96554d67c77, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x15a5821565cc2ec2ce78457db197edf353b7ebba2c5523370ddccc3d9f146a67, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x2411d57a4813b9980efa7e31a1db5966dcf64f36044277502f15485f28c71727, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x002e6f8d6520cd4713e335b8c0b6d2e647e9a98e12f4cd2558828b5ef6cb4c9b, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x2ff7bc8f4380cde997da00b616b0fcd1af8f0e91e2fe1ed7398834609e0315d2, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x00b9831b948525595ee02724471bcd182e9521f6b7bb68f1e93be4febb0d3cbe, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x0a2f53768b8ebf6a86913b0e57c04e011ca408648a4743a87d77adbf0c9c3512, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x00248156142fd0373a479f91ff239e960f599ff7e94be69b7f2a290305e1198d, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x171d5620b87bfb1328cf8c02ab3f0c9a397196aa6a542c2350eb512a2b2bcda9, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x170a4f55536f7dc970087c7c10d6fad760c952172dd54dd99d1045e4ec34a808, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x29aba33f799fe66c2ef3134aea04336ecc37e38c1cd211ba482eca17e2dbfae1, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x1e9bc179a4fdd758fdd1bb1945088d47e70d114a03f6a0e8b5ba650369e64973, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x1dd269799b660fad58f7f4892dfb0b5afeaad869a9c4b44f9c9e1c43bdaf8f09, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x22cdbc8b70117ad1401181d02e15459e7ccd426fe869c7c95d1dd2cb0f24af38, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x0ef042e454771c533a9f57a55c503fcefd3150f52ed94a7cd5ba93b9c7dacefd, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x11609e06ad6c8fe2f287f3036037e8851318e8b08a0359a03b304ffca62e8284, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x1166d9e554616dba9e753eea427c17b7fecd58c076dfe42708b08f5b783aa9af, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x2de52989431a859593413026354413db177fbf4cd2ac0b56f855a888357ee466, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x3006eb4ffc7a85819a6da492f3a8ac1df51aee5b17b8e89d74bf01cf5f71e9ad, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x2af41fbb61ba8a80fdcf6fff9e3f6f422993fe8f0a4639f962344c8225145086, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x119e684de476155fe5a6b41a8ebc85db8718ab27889e85e781b214bace4827c3, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x1835b786e2e8925e188bea59ae363537b51248c23828f047cff784b97b3fd800, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x28201a34c594dfa34d794996c6433a20d152bac2a7905c926c40e285ab32eeb6, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x083efd7a27d1751094e80fefaf78b000864c82eb571187724a761f88c22cc4e7, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x0b6f88a3577199526158e61ceea27be811c16df7774dd8519e079564f61fd13b, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x0ec868e6d15e51d9644f66e1d6471a94589511ca00d29e1014390e6ee4254f5b, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x2af33e3f866771271ac0c9b3ed2e1142ecd3e74b939cd40d00d937ab84c98591, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x0b520211f904b5e7d09b5d961c6ace7734568c547dd6858b364ce5e47951f178, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x0b2d722d0919a1aad8db58f10062a92ea0c56ac4270e822cca228620188a1d40, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x1f790d4d7f8cf094d980ceb37c2453e957b54a9991ca38bbe0061d1ed6e562d4, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x0171eb95dfbf7d1eaea97cd385f780150885c16235a2a6a8da92ceb01e504233, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x0c2d0e3b5fd57549329bf6885da66b9b790b40defd2c8650762305381b168873, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x1162fb28689c27154e5a8228b4e72b377cbcafa589e283c35d3803054407a18d, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x2f1459b65dee441b64ad386a91e8310f282c5a92a89e19921623ef8249711bc0, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x1e6ff3216b688c3d996d74367d5cd4c1bc489d46754eb712c243f70d1b53cfbb, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x01ca8be73832b8d0681487d27d157802d741a6f36cdc2a0576881f9326478875, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x1f7735706ffe9fc586f976d5bdf223dc680286080b10cea00b9b5de315f9650e, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x2522b60f4ea3307640a0c2dce041fba921ac10a3d5f096ef4745ca838285f019, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x23f0bee001b1029d5255075ddc957f833418cad4f52b6c3f8ce16c235572575b, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x2bc1ae8b8ddbb81fcaac2d44555ed5685d142633e9df905f66d9401093082d59, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x0f9406b8296564a37304507b8dba3ed162371273a07b1fc98011fcd6ad72205f, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x2360a8eb0cc7defa67b72998de90714e17e75b174a52ee4acb126c8cd995f0a8, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x15871a5cddead976804c803cbaef255eb4815a5e96df8b006dcbbc2767f88948, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x193a56766998ee9e0a8652dd2f3b1da0362f4f54f72379544f957ccdeefb420f, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x2a394a43934f86982f9be56ff4fab1703b2e63c8ad334834e4309805e777ae0f, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x1859954cfeb8695f3e8b635dcb345192892cd11223443ba7b4166e8876c0d142, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x04e1181763050e58013444dbcb99f1902b11bc25d90bbdca408d3819f4fed32b, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x0fdb253dee83869d40c335ea64de8c5bb10eb82db08b5e8b1f5e5552bfd05f23, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x058cbe8a9a5027bdaa4efb623adead6275f08686f1c08984a9d7c5bae9b4f1c0, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x1382edce9971e186497eadb1aeb1f52b23b4b83bef023ab0d15228b4cceca59a, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x03464990f045c6ee0819ca51fd11b0be7f61b8eb99f14b77e1e6634601d9e8b5, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x23f7bfc8720dc296fff33b41f98ff83c6fcab4605db2eb5aaa5bc137aeb70a58, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x0a59a158e3eec2117e6e94e7f0e9decf18c3ffd5e1531a9219636158bbaf62f2, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x06ec54c80381c052b58bf23b312ffd3ce2c4eba065420af8f4c23ed0075fd07b, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x118872dc832e0eb5476b56648e867ec8b09340f7a7bcb1b4962f0ff9ed1f9d01, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x13d69fa127d834165ad5c7cba7ad59ed52e0b0f0e42d7fea95e1906b520921b1, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x169a177f63ea681270b1c6877a73d21bde143942fb71dc55fd8a49f19f10c77b, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x04ef51591c6ead97ef42f287adce40d93abeb032b922f66ffb7e9a5a7450544d, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x256e175a1dc079390ecd7ca703fb2e3b19ec61805d4f03ced5f45ee6dd0f69ec, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x30102d28636abd5fe5f2af412ff6004f75cc360d3205dd2da002813d3e2ceeb2, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x10998e42dfcd3bbf1c0714bc73eb1bf40443a3fa99bef4a31fd31be182fcc792, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x193edd8e9fcf3d7625fa7d24b598a1d89f3362eaf4d582efecad76f879e36860, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x18168afd34f2d915d0368ce80b7b3347d1c7a561ce611425f2664d7aa51f0b5d, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x29383c01ebd3b6ab0c017656ebe658b6a328ec77bc33626e29e2e95b33ea6111, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x10646d2f2603de39a1f4ae5e7771a64a702db6e86fb76ab600bf573f9010c711, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x0beb5e07d1b27145f575f1395a55bf132f90c25b40da7b3864d0242dcb1117fb, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x16d685252078c133dc0d3ecad62b5c8830f95bb2e54b59abdffbf018d96fa336, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x0a6abd1d833938f33c74154e0404b4b40a555bbbec21ddfafd672dd62047f01a, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x1a679f5d36eb7b5c8ea12a4c2dedc8feb12dffeec450317270a6f19b34cf1860, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x0980fb233bd456c23974d50e0ebfde4726a423eada4e8f6ffbc7592e3f1b93d6, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x161b42232e61b84cbf1810af93a38fc0cece3d5628c9282003ebacb5c312c72b, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x0ada10a90c7f0520950f7d47a60d5e6a493f09787f1564e5d09203db47de1a0b, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x1a730d372310ba82320345a29ac4238ed3f07a8a2b4e121bb50ddb9af407f451, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x2c8120f268ef054f817064c369dda7ea908377feaba5c4dffbda10ef58e8c556, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x1c7c8824f758753fa57c00789c684217b930e95313bcb73e6e7b8649a4968f70, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x2cd9ed31f5f8691c8e39e4077a74faa0f400ad8b491eb3f7b47b27fa3fd1cf77, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x23ff4f9d46813457cf60d92f57618399a5e022ac321ca550854ae23918a22eea, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x09945a5d147a4f66ceece6405dddd9d0af5a2c5103529407dff1ea58f180426d, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x188d9c528025d4c2b67660c6b771b90f7c7da6eaa29d3f268a6dd223ec6fc630, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x3050e37996596b7f81f68311431d8734dba7d926d3633595e0c0d8ddf4f0f47f, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x15af1169396830a91600ca8102c35c426ceae5461e3f95d89d829518d30afd78, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x1da6d09885432ea9a06d9f37f873d985dae933e351466b2904284da3320d8acc, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x2796ea90d269af29f5f8acf33921124e4e4fad3dbe658945e546ee411ddaa9cb, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x202d7dd1da0f6b4b0325c8b3307742f01e15612ec8e9304a7cb0319e01d32d60, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x096d6790d05bb759156a952ba263d672a2d7f9c788f4c831a29dace4c0f8be5f, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x054efa1f65b0fce283808965275d877b438da23ce5b13e1963798cb1447d25a4, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x1b162f83d917e93edb3308c29802deb9d8aa690113b2e14864ccf6e18e4165f1, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x21e5241e12564dd6fd9f1cdd2a0de39eedfefc1466cc568ec5ceb745a0506edc, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := mulmod(scratch1, scratch1, F)\n      scratch1 := mulmod(mulmod(state0, state0, F), scratch1, F)\n      state0 := mulmod(scratch2, scratch2, F)\n      scratch2 := mulmod(mulmod(state0, state0, F), scratch2, F)\n      state0 := add(0x1cfb5662e8cf5ac9226a80ee17b36abecb73ab5f87e161927b4349e10e4bdf08, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x0f21177e302a771bbae6d8d1ecb373b62c99af346220ac0129c53f666eb24100, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x1671522374606992affb0dd7f71b12bec4236aede6290546bcef7e1f515c2320, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := mulmod(state1, state1, F)\n      state1 := mulmod(mulmod(scratch0, scratch0, F), state1, F)\n      scratch0 := mulmod(state2, state2, F)\n      state2 := mulmod(mulmod(scratch0, scratch0, F), state2, F)\n      scratch0 := add(0x0fa3ec5b9488259c2eb4cf24501bfad9be2ec9e42c5cc8ccd419d2a692cad870, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x193c0e04e0bd298357cb266c1506080ed36edce85c648cc085e8c57b1ab54bba, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x102adf8ef74735a27e9128306dcbc3c99f6f7291cd406578ce14ea2adaba68f8, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := mulmod(scratch1, scratch1, F)\n      scratch1 := mulmod(mulmod(state0, state0, F), scratch1, F)\n      state0 := mulmod(scratch2, scratch2, F)\n      scratch2 := mulmod(mulmod(state0, state0, F), scratch2, F)\n      state0 := add(0x0fe0af7858e49859e2a54d6f1ad945b1316aa24bfbdd23ae40a6d0cb70c3eab1, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x216f6717bbc7dedb08536a2220843f4e2da5f1daa9ebdefde8a5ea7344798d22, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x1da55cc900f0d21f4a3e694391918a1b3c23b2ac773c6b3ef88e2e4228325161, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := mulmod(state1, state1, F)\n      state1 := mulmod(mulmod(scratch0, scratch0, F), state1, F)\n      scratch0 := mulmod(state2, state2, F)\n      state2 := mulmod(mulmod(scratch0, scratch0, F), state2, F)\n\n      mstore(0x0, mod(add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)), F))\n\n      return(0, 0x20)\n    }\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}